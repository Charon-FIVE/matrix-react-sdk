"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSlashCommand = getSlashCommand;
exports.isSlashCommand = isSlashCommand;
exports.runSlashCommand = runSlashCommand;
exports.shouldSendAnyway = shouldSendAnyway;

var _react = _interopRequireDefault(require("react"));

var _logger = require("matrix-js-sdk/src/logger");

var _parts = require("./parts");

var _SlashCommands = require("../SlashCommands");

var _languageHandler = require("../languageHandler");

var _Modal = _interopRequireDefault(require("../Modal"));

var _ErrorDialog = _interopRequireDefault(require("../components/views/dialogs/ErrorDialog"));

var _QuestionDialog = _interopRequireDefault(require("../components/views/dialogs/QuestionDialog"));

/*
Copyright 2019 - 2022 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
function isSlashCommand(model) {
  const parts = model.parts;
  const firstPart = parts[0];

  if (firstPart) {
    if (firstPart.type === _parts.Type.Command && firstPart.text.startsWith("/") && !firstPart.text.startsWith("//")) {
      return true;
    }

    if (firstPart.text.startsWith("/") && !firstPart.text.startsWith("//") && (firstPart.type === _parts.Type.Plain || firstPart.type === _parts.Type.PillCandidate)) {
      return true;
    }
  }

  return false;
}

function getSlashCommand(model) {
  const commandText = model.parts.reduce((text, part) => {
    // use mxid to textify user pills in a command and room alias/id for room pills
    if (part.type === _parts.Type.UserPill || part.type === _parts.Type.RoomPill) {
      return text + part.resourceId;
    }

    return text + part.text;
  }, "");
  const {
    cmd,
    args
  } = (0, _SlashCommands.getCommand)(commandText);
  return [cmd, args, commandText];
}

async function runSlashCommand(cmd, args, roomId, threadId) {
  const result = cmd.run(roomId, threadId, args);
  let messageContent = null;
  let error = result.error;

  if (result.promise) {
    try {
      if (cmd.category === _SlashCommands.CommandCategories.messages || cmd.category === _SlashCommands.CommandCategories.effects) {
        messageContent = await result.promise;
      } else {
        await result.promise;
      }
    } catch (err) {
      error = err;
    }
  }

  if (error) {
    _logger.logger.error("Command failure: %s", error); // assume the error is a server error when the command is async


    const isServerError = !!result.promise;
    const title = isServerError ? (0, _languageHandler._td)("Server error") : (0, _languageHandler._td)("Command error");
    let errText;

    if (typeof error === 'string') {
      errText = error;
    } else if (error.translatedMessage) {
      // Check for translatable errors (newTranslatableError)
      errText = error.translatedMessage;
    } else if (error.message) {
      errText = error.message;
    } else {
      errText = (0, _languageHandler._t)("Server unavailable, overloaded, or something else went wrong.");
    }

    _Modal.default.createDialog(_ErrorDialog.default, {
      title: (0, _languageHandler._t)(title),
      description: errText
    });

    return [null, false];
  } else {
    _logger.logger.log("Command success.");

    return [messageContent, true];
  }
}

async function shouldSendAnyway(commandText) {
  // ask the user if their unknown command should be sent as a message
  const {
    finished
  } = _Modal.default.createDialog(_QuestionDialog.default, {
    title: (0, _languageHandler._t)("Unknown Command"),
    description: /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Unrecognised command: %(commandText)s", {
      commandText
    })), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("You can use <code>/help</code> to list available commands. " + "Did you mean to send this as a message?", {}, {
      code: t => /*#__PURE__*/_react.default.createElement("code", null, t)
    })), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Hint: Begin your message with <code>//</code> to start it with a slash.", {}, {
      code: t => /*#__PURE__*/_react.default.createElement("code", null, t)
    }))),
    button: (0, _languageHandler._t)('Send as message')
  });

  const [sendAnyway] = await finished;
  return sendAnyway;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,