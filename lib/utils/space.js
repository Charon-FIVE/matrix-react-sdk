"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.showSpacePreferences = exports.showSpaceInvite = exports.showCreateNewSubspace = exports.showCreateNewRoom = exports.showAddExistingSubspace = exports.showAddExistingRooms = exports.shouldShowSpaceSettings = exports.shouldShowSpaceInvite = exports.makeSpaceParentEvent = exports.bulkSpaceBehaviour = void 0;
exports.showSpaceSettings = showSpaceSettings;

var _react = _interopRequireDefault(require("react"));

var _event = require("matrix-js-sdk/src/@types/event");

var _partials = require("matrix-js-sdk/src/@types/partials");

var _Permalinks = require("./permalinks/Permalinks");

var _Modal = _interopRequireDefault(require("../Modal"));

var _CreateRoomDialog = _interopRequireDefault(require("../components/views/dialogs/CreateRoomDialog"));

var _createRoom = _interopRequireDefault(require("../createRoom"));

var _languageHandler = require("../languageHandler");

var _SpacePublicShare = _interopRequireDefault(require("../components/views/spaces/SpacePublicShare"));

var _InfoDialog = _interopRequireDefault(require("../components/views/dialogs/InfoDialog"));

var _RoomInvite = require("../RoomInvite");

var _CreateSubspaceDialog = _interopRequireDefault(require("../components/views/dialogs/CreateSubspaceDialog"));

var _AddExistingSubspaceDialog = _interopRequireDefault(require("../components/views/dialogs/AddExistingSubspaceDialog"));

var _dispatcher = _interopRequireDefault(require("../dispatcher/dispatcher"));

var _RoomViewStore = require("../stores/RoomViewStore");

var _actions = require("../dispatcher/actions");

var _Spinner = _interopRequireDefault(require("../components/views/elements/Spinner"));

var _UIComponents = require("../customisations/helpers/UIComponents");

var _UIFeature = require("../settings/UIFeature");

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const shouldShowSpaceSettings = space => {
  const userId = space.client.getUserId();
  return space.getMyMembership() === "join" && (space.currentState.maySendStateEvent(_event.EventType.RoomAvatar, userId) || space.currentState.maySendStateEvent(_event.EventType.RoomName, userId) || space.currentState.maySendStateEvent(_event.EventType.RoomTopic, userId) || space.currentState.maySendStateEvent(_event.EventType.RoomJoinRules, userId));
};

exports.shouldShowSpaceSettings = shouldShowSpaceSettings;

const makeSpaceParentEvent = function (room) {
  let canonical = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  return {
    type: _event.EventType.SpaceParent,
    content: {
      "via": (0, _Permalinks.calculateRoomVia)(room),
      "canonical": canonical
    },
    state_key: room.roomId
  };
};

exports.makeSpaceParentEvent = makeSpaceParentEvent;

function showSpaceSettings(space) {
  _dispatcher.default.dispatch({
    action: _actions.Action.OpenSpaceSettings,
    space
  });
}

const showAddExistingRooms = space => {
  _dispatcher.default.dispatch({
    action: _actions.Action.OpenAddToExistingSpaceDialog,
    space
  });
};

exports.showAddExistingRooms = showAddExistingRooms;

const showCreateNewRoom = async (space, type) => {
  const modal = _Modal.default.createDialog(_CreateRoomDialog.default, {
    type,
    defaultPublic: space.getJoinRule() === _partials.JoinRule.Public,
    parentSpace: space
  });

  const [shouldCreate, opts] = await modal.finished;

  if (shouldCreate) {
    await (0, _createRoom.default)(opts);
  }

  return shouldCreate;
};

exports.showCreateNewRoom = showCreateNewRoom;

const shouldShowSpaceInvite = space => (space?.getMyMembership() === "join" && space.canInvite(space.client.getUserId()) || space.getJoinRule() === _partials.JoinRule.Public) && (0, _UIComponents.shouldShowComponent)(_UIFeature.UIComponent.InviteUsers);

exports.shouldShowSpaceInvite = shouldShowSpaceInvite;

const showSpaceInvite = function (space) {
  let initialText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

  if (space.getJoinRule() === "public") {
    const modal = _Modal.default.createDialog(_InfoDialog.default, {
      title: (0, _languageHandler._t)("Invite to %(spaceName)s", {
        spaceName: space.name
      }),
      description: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("Share your public space")), /*#__PURE__*/_react.default.createElement(_SpacePublicShare.default, {
        space: space,
        onFinished: () => modal.close()
      })),
      fixedWidth: false,
      button: false,
      className: "mx_SpacePanel_sharePublicSpace",
      hasCloseButton: true
    });
  } else {
    (0, _RoomInvite.showRoomInviteDialog)(space.roomId, initialText);
  }
};

exports.showSpaceInvite = showSpaceInvite;

const showAddExistingSubspace = space => {
  _Modal.default.createDialog(_AddExistingSubspaceDialog.default, {
    space,
    onCreateSubspaceClick: () => showCreateNewSubspace(space),
    onFinished: added => {
      if (added && _RoomViewStore.RoomViewStore.instance.getRoomId() === space.roomId) {
        _dispatcher.default.fire(_actions.Action.UpdateSpaceHierarchy);
      }
    }
  }, "mx_AddExistingToSpaceDialog_wrapper");
};

exports.showAddExistingSubspace = showAddExistingSubspace;

const showCreateNewSubspace = space => {
  _Modal.default.createDialog(_CreateSubspaceDialog.default, {
    space,
    onAddExistingSpaceClick: () => showAddExistingSubspace(space),
    onFinished: added => {
      if (added && _RoomViewStore.RoomViewStore.instance.getRoomId() === space.roomId) {
        _dispatcher.default.fire(_actions.Action.UpdateSpaceHierarchy);
      }
    }
  }, "mx_CreateSubspaceDialog_wrapper");
};

exports.showCreateNewSubspace = showCreateNewSubspace;

const bulkSpaceBehaviour = async (space, children, fn) => {
  const modal = _Modal.default.createDialog(_Spinner.default, null, "mx_Dialog_spinner");

  try {
    for (const room of children) {
      await fn(room);
    }

    await fn(space);
  } finally {
    modal.close();
  }
};

exports.bulkSpaceBehaviour = bulkSpaceBehaviour;

const showSpacePreferences = (space, initialTabId) => {
  _dispatcher.default.dispatch({
    action: _actions.Action.OpenSpacePreferences,
    space,
    initialTabId
  });
};

exports.showSpacePreferences = showSpacePreferences;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,