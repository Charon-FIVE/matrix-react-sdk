"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createMatrixClient;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _matrix = require("matrix-js-sdk/src/matrix");

var _indexeddbCryptoStore = require("matrix-js-sdk/src/crypto/store/indexeddb-crypto-store");

var _indexeddb = require("matrix-js-sdk/src/store/indexeddb");

var _localStorageCryptoStore = require("matrix-js-sdk/src/crypto/store/localStorage-crypto-store");

var _indexeddbWorker = _interopRequireDefault(require("../workers/indexeddb.worker.ts"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

const localStorage = window.localStorage; // just *accessing* indexedDB throws an exception in firefox with
// indexeddb disabled.

let indexedDB;

try {
  indexedDB = window.indexedDB;
} catch (e) {}
/**
 * Create a new matrix client, with the persistent stores set up appropriately
 * (using localstorage/indexeddb, etc)
 *
 * @param {Object} opts  options to pass to Matrix.createClient. This will be
 *    extended with `sessionStore` and `store` members.
 *
 * @returns {MatrixClient} the newly-created MatrixClient
 */


function createMatrixClient(opts) {
  const storeOpts = {
    useAuthorizationHeader: true
  };

  if (indexedDB && localStorage) {
    storeOpts.store = new _indexeddb.IndexedDBStore({
      indexedDB: indexedDB,
      dbName: "riot-web-sync",
      localStorage,
      workerFactory: () => new _indexeddbWorker.default()
    });
  } else if (localStorage) {
    storeOpts.store = new _matrix.MemoryStore({
      localStorage
    });
  }

  if (indexedDB) {
    storeOpts.cryptoStore = new _indexeddbCryptoStore.IndexedDBCryptoStore(indexedDB, "matrix-js-sdk:crypto");
  } else if (localStorage) {
    storeOpts.cryptoStore = new _localStorageCryptoStore.LocalStorageCryptoStore(localStorage);
  } else {
    storeOpts.cryptoStore = new _matrix.MemoryCryptoStore();
  }

  return (0, _matrix.createClient)(_objectSpread(_objectSpread({}, storeOpts), opts));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJsb2NhbFN0b3JhZ2UiLCJ3aW5kb3ciLCJpbmRleGVkREIiLCJlIiwiY3JlYXRlTWF0cml4Q2xpZW50Iiwib3B0cyIsInN0b3JlT3B0cyIsInVzZUF1dGhvcml6YXRpb25IZWFkZXIiLCJzdG9yZSIsIkluZGV4ZWREQlN0b3JlIiwiZGJOYW1lIiwid29ya2VyRmFjdG9yeSIsIkluZGV4ZWREQldvcmtlciIsIk1lbW9yeVN0b3JlIiwiY3J5cHRvU3RvcmUiLCJJbmRleGVkREJDcnlwdG9TdG9yZSIsIkxvY2FsU3RvcmFnZUNyeXB0b1N0b3JlIiwiTWVtb3J5Q3J5cHRvU3RvcmUiLCJjcmVhdGVDbGllbnQiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvY3JlYXRlTWF0cml4Q2xpZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAxNyAtIDIwMjEgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuaW1wb3J0IHtcbiAgICBNYXRyaXhDbGllbnQsXG4gICAgY3JlYXRlQ2xpZW50LFxuICAgIElDcmVhdGVDbGllbnRPcHRzLFxuICAgIE1lbW9yeUNyeXB0b1N0b3JlLFxuICAgIE1lbW9yeVN0b3JlLFxufSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbWF0cml4XCI7XG5pbXBvcnQgeyBJbmRleGVkREJDcnlwdG9TdG9yZSB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9jcnlwdG8vc3RvcmUvaW5kZXhlZGRiLWNyeXB0by1zdG9yZVwiO1xuaW1wb3J0IHsgSW5kZXhlZERCU3RvcmUgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvc3RvcmUvaW5kZXhlZGRiXCI7XG5pbXBvcnQgeyBMb2NhbFN0b3JhZ2VDcnlwdG9TdG9yZSB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9jcnlwdG8vc3RvcmUvbG9jYWxTdG9yYWdlLWNyeXB0by1zdG9yZVwiO1xuXG4vLyBAdHMtaWdub3JlIC0gYC50c2AgaXMgbmVlZGVkIGhlcmUgdG8gbWFrZSBUUyBoYXBweVxuaW1wb3J0IEluZGV4ZWREQldvcmtlciBmcm9tIFwiLi4vd29ya2Vycy9pbmRleGVkZGIud29ya2VyLnRzXCI7XG5cbmNvbnN0IGxvY2FsU3RvcmFnZSA9IHdpbmRvdy5sb2NhbFN0b3JhZ2U7XG5cbi8vIGp1c3QgKmFjY2Vzc2luZyogaW5kZXhlZERCIHRocm93cyBhbiBleGNlcHRpb24gaW4gZmlyZWZveCB3aXRoXG4vLyBpbmRleGVkZGIgZGlzYWJsZWQuXG5sZXQgaW5kZXhlZERCO1xudHJ5IHtcbiAgICBpbmRleGVkREIgPSB3aW5kb3cuaW5kZXhlZERCO1xufSBjYXRjaCAoZSkge31cblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgbWF0cml4IGNsaWVudCwgd2l0aCB0aGUgcGVyc2lzdGVudCBzdG9yZXMgc2V0IHVwIGFwcHJvcHJpYXRlbHlcbiAqICh1c2luZyBsb2NhbHN0b3JhZ2UvaW5kZXhlZGRiLCBldGMpXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgIG9wdGlvbnMgdG8gcGFzcyB0byBNYXRyaXguY3JlYXRlQ2xpZW50LiBUaGlzIHdpbGwgYmVcbiAqICAgIGV4dGVuZGVkIHdpdGggYHNlc3Npb25TdG9yZWAgYW5kIGBzdG9yZWAgbWVtYmVycy5cbiAqXG4gKiBAcmV0dXJucyB7TWF0cml4Q2xpZW50fSB0aGUgbmV3bHktY3JlYXRlZCBNYXRyaXhDbGllbnRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTWF0cml4Q2xpZW50KG9wdHM6IElDcmVhdGVDbGllbnRPcHRzKTogTWF0cml4Q2xpZW50IHtcbiAgICBjb25zdCBzdG9yZU9wdHM6IFBhcnRpYWw8SUNyZWF0ZUNsaWVudE9wdHM+ID0ge1xuICAgICAgICB1c2VBdXRob3JpemF0aW9uSGVhZGVyOiB0cnVlLFxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhlZERCICYmIGxvY2FsU3RvcmFnZSkge1xuICAgICAgICBzdG9yZU9wdHMuc3RvcmUgPSBuZXcgSW5kZXhlZERCU3RvcmUoe1xuICAgICAgICAgICAgaW5kZXhlZERCOiBpbmRleGVkREIsXG4gICAgICAgICAgICBkYk5hbWU6IFwicmlvdC13ZWItc3luY1wiLFxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLFxuICAgICAgICAgICAgd29ya2VyRmFjdG9yeTogKCkgPT4gbmV3IEluZGV4ZWREQldvcmtlcigpLFxuICAgICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGxvY2FsU3RvcmFnZSkge1xuICAgICAgICBzdG9yZU9wdHMuc3RvcmUgPSBuZXcgTWVtb3J5U3RvcmUoeyBsb2NhbFN0b3JhZ2UgfSk7XG4gICAgfVxuXG4gICAgaWYgKGluZGV4ZWREQikge1xuICAgICAgICBzdG9yZU9wdHMuY3J5cHRvU3RvcmUgPSBuZXcgSW5kZXhlZERCQ3J5cHRvU3RvcmUoXG4gICAgICAgICAgICBpbmRleGVkREIsIFwibWF0cml4LWpzLXNkazpjcnlwdG9cIixcbiAgICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGxvY2FsU3RvcmFnZSkge1xuICAgICAgICBzdG9yZU9wdHMuY3J5cHRvU3RvcmUgPSBuZXcgTG9jYWxTdG9yYWdlQ3J5cHRvU3RvcmUobG9jYWxTdG9yYWdlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzdG9yZU9wdHMuY3J5cHRvU3RvcmUgPSBuZXcgTWVtb3J5Q3J5cHRvU3RvcmUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3JlYXRlQ2xpZW50KHtcbiAgICAgICAgLi4uc3RvcmVPcHRzLFxuICAgICAgICAuLi5vcHRzLFxuICAgIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWVBOztBQU9BOztBQUNBOztBQUNBOztBQUdBOzs7Ozs7QUFFQSxNQUFNQSxZQUFZLEdBQUdDLE1BQU0sQ0FBQ0QsWUFBNUIsQyxDQUVBO0FBQ0E7O0FBQ0EsSUFBSUUsU0FBSjs7QUFDQSxJQUFJO0VBQ0FBLFNBQVMsR0FBR0QsTUFBTSxDQUFDQyxTQUFuQjtBQUNILENBRkQsQ0FFRSxPQUFPQyxDQUFQLEVBQVUsQ0FBRTtBQUVkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ2UsU0FBU0Msa0JBQVQsQ0FBNEJDLElBQTVCLEVBQW1FO0VBQzlFLE1BQU1DLFNBQXFDLEdBQUc7SUFDMUNDLHNCQUFzQixFQUFFO0VBRGtCLENBQTlDOztFQUlBLElBQUlMLFNBQVMsSUFBSUYsWUFBakIsRUFBK0I7SUFDM0JNLFNBQVMsQ0FBQ0UsS0FBVixHQUFrQixJQUFJQyx5QkFBSixDQUFtQjtNQUNqQ1AsU0FBUyxFQUFFQSxTQURzQjtNQUVqQ1EsTUFBTSxFQUFFLGVBRnlCO01BR2pDVixZQUhpQztNQUlqQ1csYUFBYSxFQUFFLE1BQU0sSUFBSUMsd0JBQUo7SUFKWSxDQUFuQixDQUFsQjtFQU1ILENBUEQsTUFPTyxJQUFJWixZQUFKLEVBQWtCO0lBQ3JCTSxTQUFTLENBQUNFLEtBQVYsR0FBa0IsSUFBSUssbUJBQUosQ0FBZ0I7TUFBRWI7SUFBRixDQUFoQixDQUFsQjtFQUNIOztFQUVELElBQUlFLFNBQUosRUFBZTtJQUNYSSxTQUFTLENBQUNRLFdBQVYsR0FBd0IsSUFBSUMsMENBQUosQ0FDcEJiLFNBRG9CLEVBQ1Qsc0JBRFMsQ0FBeEI7RUFHSCxDQUpELE1BSU8sSUFBSUYsWUFBSixFQUFrQjtJQUNyQk0sU0FBUyxDQUFDUSxXQUFWLEdBQXdCLElBQUlFLGdEQUFKLENBQTRCaEIsWUFBNUIsQ0FBeEI7RUFDSCxDQUZNLE1BRUE7SUFDSE0sU0FBUyxDQUFDUSxXQUFWLEdBQXdCLElBQUlHLHlCQUFKLEVBQXhCO0VBQ0g7O0VBRUQsT0FBTyxJQUFBQyxvQkFBQSxrQ0FDQVosU0FEQSxHQUVBRCxJQUZBLEVBQVA7QUFJSCJ9