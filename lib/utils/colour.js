"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.textToHtmlRainbow = textToHtmlRainbow;

var _lodash = require("lodash");

/*
Copyright 2019 Michael Telatynski <7t3chguy@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
function textToHtmlRainbow(str) {
  const frequency = 2 * Math.PI / str.length;
  return (0, _lodash.split)(str, '').map((c, i) => {
    if (c === " ") {
      return c;
    }

    const [a, b] = generateAB(i * frequency, 1);
    const [red, green, blue] = labToRGB(75, a, b);
    return '<font color="#' + red.toString(16).padStart(2, "0") + green.toString(16).padStart(2, "0") + blue.toString(16).padStart(2, "0") + '">' + c + "</font>";
  }).join("");
}

function generateAB(hue, chroma) {
  const a = chroma * 127 * Math.cos(hue);
  const b = chroma * 127 * Math.sin(hue);
  return [a, b];
}

function labToRGB(l, a, b) {
  // https://en.wikipedia.org/wiki/CIELAB_color_space#Reverse_transformation
  // https://en.wikipedia.org/wiki/SRGB#The_forward_transformation_(CIE_XYZ_to_sRGB)
  // Convert CIELAB to CIEXYZ (D65)
  let y = (l + 16) / 116;
  const x = adjustXYZ(y + a / 500) * 0.9505;
  const z = adjustXYZ(y - b / 200) * 1.089;
  y = adjustXYZ(y); // Linear transformation from CIEXYZ to RGB

  const red = 3.24096994 * x - 1.53738318 * y - 0.49861076 * z;
  const green = -0.96924364 * x + 1.8759675 * y + 0.04155506 * z;
  const blue = 0.05563008 * x - 0.20397696 * y + 1.05697151 * z;
  return [adjustRGB(red), adjustRGB(green), adjustRGB(blue)];
}

function adjustXYZ(v) {
  if (v > 0.2069) {
    return Math.pow(v, 3);
  }

  return 0.1284 * v - 0.01771;
}

function gammaCorrection(v) {
  // Non-linear transformation to sRGB
  if (v <= 0.0031308) {
    return 12.92 * v;
  }

  return 1.055 * Math.pow(v, 1 / 2.4) - 0.055;
}

function adjustRGB(v) {
  const corrected = gammaCorrection(v); // Limits number between 0 and 1

  const limited = Math.min(Math.max(corrected, 0), 1);
  return Math.round(limited * 255);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0ZXh0VG9IdG1sUmFpbmJvdyIsInN0ciIsImZyZXF1ZW5jeSIsIk1hdGgiLCJQSSIsImxlbmd0aCIsInNwbGl0IiwibWFwIiwiYyIsImkiLCJhIiwiYiIsImdlbmVyYXRlQUIiLCJyZWQiLCJncmVlbiIsImJsdWUiLCJsYWJUb1JHQiIsInRvU3RyaW5nIiwicGFkU3RhcnQiLCJqb2luIiwiaHVlIiwiY2hyb21hIiwiY29zIiwic2luIiwibCIsInkiLCJ4IiwiYWRqdXN0WFlaIiwieiIsImFkanVzdFJHQiIsInYiLCJwb3ciLCJnYW1tYUNvcnJlY3Rpb24iLCJjb3JyZWN0ZWQiLCJsaW1pdGVkIiwibWluIiwibWF4Iiwicm91bmQiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvY29sb3VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAxOSBNaWNoYWVsIFRlbGF0eW5za2kgPDd0M2NoZ3V5QGdtYWlsLmNvbT5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgeyBzcGxpdCB9IGZyb20gJ2xvZGFzaCc7XG5cbmV4cG9ydCBmdW5jdGlvbiB0ZXh0VG9IdG1sUmFpbmJvdyhzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgZnJlcXVlbmN5ID0gKDIgKiBNYXRoLlBJKSAvIHN0ci5sZW5ndGg7XG5cbiAgICByZXR1cm4gc3BsaXQoc3RyLCAnJylcbiAgICAgICAgLm1hcCgoYywgaSkgPT4ge1xuICAgICAgICAgICAgaWYgKGMgPT09IFwiIFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBbYSwgYl0gPSBnZW5lcmF0ZUFCKGkgKiBmcmVxdWVuY3ksIDEpO1xuICAgICAgICAgICAgY29uc3QgW3JlZCwgZ3JlZW4sIGJsdWVdID0gbGFiVG9SR0IoNzUsIGEsIGIpO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAnPGZvbnQgY29sb3I9XCIjJyArXG4gICAgICAgICAgICAgICAgcmVkLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCBcIjBcIikgK1xuICAgICAgICAgICAgICAgIGdyZWVuLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCBcIjBcIikgK1xuICAgICAgICAgICAgICAgIGJsdWUudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsIFwiMFwiKSArXG4gICAgICAgICAgICAgICAgJ1wiPicgK1xuICAgICAgICAgICAgICAgIGMgK1xuICAgICAgICAgICAgICAgIFwiPC9mb250PlwiXG4gICAgICAgICAgICApO1xuICAgICAgICB9KVxuICAgICAgICAuam9pbihcIlwiKTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVBQihodWU6IG51bWJlciwgY2hyb21hOiBudW1iZXIpOiBbbnVtYmVyLCBudW1iZXJdIHtcbiAgICBjb25zdCBhID0gY2hyb21hICogMTI3ICogTWF0aC5jb3MoaHVlKTtcbiAgICBjb25zdCBiID0gY2hyb21hICogMTI3ICogTWF0aC5zaW4oaHVlKTtcblxuICAgIHJldHVybiBbYSwgYl07XG59XG5cbmZ1bmN0aW9uIGxhYlRvUkdCKGw6IG51bWJlciwgYTogbnVtYmVyLCBiOiBudW1iZXIpOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl0ge1xuICAgIC8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NJRUxBQl9jb2xvcl9zcGFjZSNSZXZlcnNlX3RyYW5zZm9ybWF0aW9uXG4gICAgLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU1JHQiNUaGVfZm9yd2FyZF90cmFuc2Zvcm1hdGlvbl8oQ0lFX1hZWl90b19zUkdCKVxuXG4gICAgLy8gQ29udmVydCBDSUVMQUIgdG8gQ0lFWFlaIChENjUpXG4gICAgbGV0IHkgPSAobCArIDE2KSAvIDExNjtcbiAgICBjb25zdCB4ID0gYWRqdXN0WFlaKHkgKyBhIC8gNTAwKSAqIDAuOTUwNTtcbiAgICBjb25zdCB6ID0gYWRqdXN0WFlaKHkgLSBiIC8gMjAwKSAqIDEuMDg5O1xuXG4gICAgeSA9IGFkanVzdFhZWih5KTtcblxuICAgIC8vIExpbmVhciB0cmFuc2Zvcm1hdGlvbiBmcm9tIENJRVhZWiB0byBSR0JcbiAgICBjb25zdCByZWQgPSAzLjI0MDk2OTk0ICogeCAtIDEuNTM3MzgzMTggKiB5IC0gMC40OTg2MTA3NiAqIHo7XG4gICAgY29uc3QgZ3JlZW4gPSAtMC45NjkyNDM2NCAqIHggKyAxLjg3NTk2NzUgKiB5ICsgMC4wNDE1NTUwNiAqIHo7XG4gICAgY29uc3QgYmx1ZSA9IDAuMDU1NjMwMDggKiB4IC0gMC4yMDM5NzY5NiAqIHkgKyAxLjA1Njk3MTUxICogejtcblxuICAgIHJldHVybiBbYWRqdXN0UkdCKHJlZCksIGFkanVzdFJHQihncmVlbiksIGFkanVzdFJHQihibHVlKV07XG59XG5cbmZ1bmN0aW9uIGFkanVzdFhZWih2OiBudW1iZXIpOiBudW1iZXIge1xuICAgIGlmICh2ID4gMC4yMDY5KSB7XG4gICAgICAgIHJldHVybiBNYXRoLnBvdyh2LCAzKTtcbiAgICB9XG4gICAgcmV0dXJuIDAuMTI4NCAqIHYgLSAwLjAxNzcxO1xufVxuXG5mdW5jdGlvbiBnYW1tYUNvcnJlY3Rpb24odjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAvLyBOb24tbGluZWFyIHRyYW5zZm9ybWF0aW9uIHRvIHNSR0JcbiAgICBpZiAodiA8PSAwLjAwMzEzMDgpIHtcbiAgICAgICAgcmV0dXJuIDEyLjkyICogdjtcbiAgICB9XG4gICAgcmV0dXJuIDEuMDU1ICogTWF0aC5wb3codiwgMSAvIDIuNCkgLSAwLjA1NTtcbn1cblxuZnVuY3Rpb24gYWRqdXN0UkdCKHY6IG51bWJlcik6IG51bWJlciB7XG4gICAgY29uc3QgY29ycmVjdGVkID0gZ2FtbWFDb3JyZWN0aW9uKHYpO1xuXG4gICAgLy8gTGltaXRzIG51bWJlciBiZXR3ZWVuIDAgYW5kIDFcbiAgICBjb25zdCBsaW1pdGVkID0gTWF0aC5taW4oTWF0aC5tYXgoY29ycmVjdGVkLCAwKSwgMSk7XG5cbiAgICByZXR1cm4gTWF0aC5yb3VuZChsaW1pdGVkICogMjU1KTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQWdCQTs7QUFoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSU8sU0FBU0EsaUJBQVQsQ0FBMkJDLEdBQTNCLEVBQWdEO0VBQ25ELE1BQU1DLFNBQVMsR0FBSSxJQUFJQyxJQUFJLENBQUNDLEVBQVYsR0FBZ0JILEdBQUcsQ0FBQ0ksTUFBdEM7RUFFQSxPQUFPLElBQUFDLGFBQUEsRUFBTUwsR0FBTixFQUFXLEVBQVgsRUFDRk0sR0FERSxDQUNFLENBQUNDLENBQUQsRUFBSUMsQ0FBSixLQUFVO0lBQ1gsSUFBSUQsQ0FBQyxLQUFLLEdBQVYsRUFBZTtNQUNYLE9BQU9BLENBQVA7SUFDSDs7SUFDRCxNQUFNLENBQUNFLENBQUQsRUFBSUMsQ0FBSixJQUFTQyxVQUFVLENBQUNILENBQUMsR0FBR1AsU0FBTCxFQUFnQixDQUFoQixDQUF6QjtJQUNBLE1BQU0sQ0FBQ1csR0FBRCxFQUFNQyxLQUFOLEVBQWFDLElBQWIsSUFBcUJDLFFBQVEsQ0FBQyxFQUFELEVBQUtOLENBQUwsRUFBUUMsQ0FBUixDQUFuQztJQUNBLE9BQ0ksbUJBQ0FFLEdBQUcsQ0FBQ0ksUUFBSixDQUFhLEVBQWIsRUFBaUJDLFFBQWpCLENBQTBCLENBQTFCLEVBQTZCLEdBQTdCLENBREEsR0FFQUosS0FBSyxDQUFDRyxRQUFOLENBQWUsRUFBZixFQUFtQkMsUUFBbkIsQ0FBNEIsQ0FBNUIsRUFBK0IsR0FBL0IsQ0FGQSxHQUdBSCxJQUFJLENBQUNFLFFBQUwsQ0FBYyxFQUFkLEVBQWtCQyxRQUFsQixDQUEyQixDQUEzQixFQUE4QixHQUE5QixDQUhBLEdBSUEsSUFKQSxHQUtBVixDQUxBLEdBTUEsU0FQSjtFQVNILENBaEJFLEVBaUJGVyxJQWpCRSxDQWlCRyxFQWpCSCxDQUFQO0FBa0JIOztBQUVELFNBQVNQLFVBQVQsQ0FBb0JRLEdBQXBCLEVBQWlDQyxNQUFqQyxFQUFtRTtFQUMvRCxNQUFNWCxDQUFDLEdBQUdXLE1BQU0sR0FBRyxHQUFULEdBQWVsQixJQUFJLENBQUNtQixHQUFMLENBQVNGLEdBQVQsQ0FBekI7RUFDQSxNQUFNVCxDQUFDLEdBQUdVLE1BQU0sR0FBRyxHQUFULEdBQWVsQixJQUFJLENBQUNvQixHQUFMLENBQVNILEdBQVQsQ0FBekI7RUFFQSxPQUFPLENBQUNWLENBQUQsRUFBSUMsQ0FBSixDQUFQO0FBQ0g7O0FBRUQsU0FBU0ssUUFBVCxDQUFrQlEsQ0FBbEIsRUFBNkJkLENBQTdCLEVBQXdDQyxDQUF4QyxFQUE2RTtFQUN6RTtFQUNBO0VBRUE7RUFDQSxJQUFJYyxDQUFDLEdBQUcsQ0FBQ0QsQ0FBQyxHQUFHLEVBQUwsSUFBVyxHQUFuQjtFQUNBLE1BQU1FLENBQUMsR0FBR0MsU0FBUyxDQUFDRixDQUFDLEdBQUdmLENBQUMsR0FBRyxHQUFULENBQVQsR0FBeUIsTUFBbkM7RUFDQSxNQUFNa0IsQ0FBQyxHQUFHRCxTQUFTLENBQUNGLENBQUMsR0FBR2QsQ0FBQyxHQUFHLEdBQVQsQ0FBVCxHQUF5QixLQUFuQztFQUVBYyxDQUFDLEdBQUdFLFNBQVMsQ0FBQ0YsQ0FBRCxDQUFiLENBVHlFLENBV3pFOztFQUNBLE1BQU1aLEdBQUcsR0FBRyxhQUFhYSxDQUFiLEdBQWlCLGFBQWFELENBQTlCLEdBQWtDLGFBQWFHLENBQTNEO0VBQ0EsTUFBTWQsS0FBSyxHQUFHLENBQUMsVUFBRCxHQUFjWSxDQUFkLEdBQWtCLFlBQVlELENBQTlCLEdBQWtDLGFBQWFHLENBQTdEO0VBQ0EsTUFBTWIsSUFBSSxHQUFHLGFBQWFXLENBQWIsR0FBaUIsYUFBYUQsQ0FBOUIsR0FBa0MsYUFBYUcsQ0FBNUQ7RUFFQSxPQUFPLENBQUNDLFNBQVMsQ0FBQ2hCLEdBQUQsQ0FBVixFQUFpQmdCLFNBQVMsQ0FBQ2YsS0FBRCxDQUExQixFQUFtQ2UsU0FBUyxDQUFDZCxJQUFELENBQTVDLENBQVA7QUFDSDs7QUFFRCxTQUFTWSxTQUFULENBQW1CRyxDQUFuQixFQUFzQztFQUNsQyxJQUFJQSxDQUFDLEdBQUcsTUFBUixFQUFnQjtJQUNaLE9BQU8zQixJQUFJLENBQUM0QixHQUFMLENBQVNELENBQVQsRUFBWSxDQUFaLENBQVA7RUFDSDs7RUFDRCxPQUFPLFNBQVNBLENBQVQsR0FBYSxPQUFwQjtBQUNIOztBQUVELFNBQVNFLGVBQVQsQ0FBeUJGLENBQXpCLEVBQTRDO0VBQ3hDO0VBQ0EsSUFBSUEsQ0FBQyxJQUFJLFNBQVQsRUFBb0I7SUFDaEIsT0FBTyxRQUFRQSxDQUFmO0VBQ0g7O0VBQ0QsT0FBTyxRQUFRM0IsSUFBSSxDQUFDNEIsR0FBTCxDQUFTRCxDQUFULEVBQVksSUFBSSxHQUFoQixDQUFSLEdBQStCLEtBQXRDO0FBQ0g7O0FBRUQsU0FBU0QsU0FBVCxDQUFtQkMsQ0FBbkIsRUFBc0M7RUFDbEMsTUFBTUcsU0FBUyxHQUFHRCxlQUFlLENBQUNGLENBQUQsQ0FBakMsQ0FEa0MsQ0FHbEM7O0VBQ0EsTUFBTUksT0FBTyxHQUFHL0IsSUFBSSxDQUFDZ0MsR0FBTCxDQUFTaEMsSUFBSSxDQUFDaUMsR0FBTCxDQUFTSCxTQUFULEVBQW9CLENBQXBCLENBQVQsRUFBaUMsQ0FBakMsQ0FBaEI7RUFFQSxPQUFPOUIsSUFBSSxDQUFDa0MsS0FBTCxDQUFXSCxPQUFPLEdBQUcsR0FBckIsQ0FBUDtBQUNIIn0=