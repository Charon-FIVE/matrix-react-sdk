"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _lodash = require("lodash");

var _logger = require("matrix-js-sdk/src/logger");

/*
Copyright 2017 Aviral Dasgupta

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class SendHistoryManager {
  // used for indexing the storage
  // used for indexing the loaded validated history Array
  constructor(roomId, prefix) {
    (0, _defineProperty2.default)(this, "history", []);
    (0, _defineProperty2.default)(this, "prefix", void 0);
    (0, _defineProperty2.default)(this, "lastIndex", 0);
    (0, _defineProperty2.default)(this, "currentIndex", 0);
    this.prefix = prefix + roomId; // TODO: Performance issues?

    let index = 0;
    let itemJSON;

    while (itemJSON = sessionStorage.getItem(`${this.prefix}[${index}]`)) {
      try {
        this.history.push(JSON.parse(itemJSON));
      } catch (e) {
        _logger.logger.warn("Throwing away unserialisable history", e);

        break;
      }

      ++index;
    }

    this.lastIndex = this.history.length - 1; // reset currentIndex to account for any unserialisable history

    this.currentIndex = this.lastIndex + 1;
  }

  static createItem(model, replyEvent) {
    return {
      parts: model.serializeParts(),
      replyEventId: replyEvent ? replyEvent.getId() : undefined
    };
  }

  save(editorModel, replyEvent) {
    const item = SendHistoryManager.createItem(editorModel, replyEvent);
    this.history.push(item);
    this.currentIndex = this.history.length;
    this.lastIndex += 1;
    sessionStorage.setItem(`${this.prefix}[${this.lastIndex}]`, JSON.stringify(item));
  }

  getItem(offset) {
    this.currentIndex = (0, _lodash.clamp)(this.currentIndex + offset, 0, this.history.length - 1);
    return this.history[this.currentIndex];
  }

}

exports.default = SendHistoryManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTZW5kSGlzdG9yeU1hbmFnZXIiLCJjb25zdHJ1Y3RvciIsInJvb21JZCIsInByZWZpeCIsImluZGV4IiwiaXRlbUpTT04iLCJzZXNzaW9uU3RvcmFnZSIsImdldEl0ZW0iLCJoaXN0b3J5IiwicHVzaCIsIkpTT04iLCJwYXJzZSIsImUiLCJsb2dnZXIiLCJ3YXJuIiwibGFzdEluZGV4IiwibGVuZ3RoIiwiY3VycmVudEluZGV4IiwiY3JlYXRlSXRlbSIsIm1vZGVsIiwicmVwbHlFdmVudCIsInBhcnRzIiwic2VyaWFsaXplUGFydHMiLCJyZXBseUV2ZW50SWQiLCJnZXRJZCIsInVuZGVmaW5lZCIsInNhdmUiLCJlZGl0b3JNb2RlbCIsIml0ZW0iLCJzZXRJdGVtIiwic3RyaW5naWZ5Iiwib2Zmc2V0IiwiY2xhbXAiXSwic291cmNlcyI6WyIuLi9zcmMvU2VuZEhpc3RvcnlNYW5hZ2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAxNyBBdmlyYWwgRGFzZ3VwdGFcblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgeyBjbGFtcCB9IGZyb20gXCJsb2Rhc2hcIjtcbmltcG9ydCB7IE1hdHJpeEV2ZW50IH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL21vZGVscy9ldmVudFwiO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL2xvZ2dlclwiO1xuXG5pbXBvcnQgeyBTZXJpYWxpemVkUGFydCB9IGZyb20gXCIuL2VkaXRvci9wYXJ0c1wiO1xuaW1wb3J0IEVkaXRvck1vZGVsIGZyb20gXCIuL2VkaXRvci9tb2RlbFwiO1xuXG5pbnRlcmZhY2UgSUhpc3RvcnlJdGVtIHtcbiAgICBwYXJ0czogU2VyaWFsaXplZFBhcnRbXTtcbiAgICByZXBseUV2ZW50SWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlbmRIaXN0b3J5TWFuYWdlciB7XG4gICAgaGlzdG9yeTogQXJyYXk8SUhpc3RvcnlJdGVtPiA9IFtdO1xuICAgIHByZWZpeDogc3RyaW5nO1xuICAgIGxhc3RJbmRleCA9IDA7IC8vIHVzZWQgZm9yIGluZGV4aW5nIHRoZSBzdG9yYWdlXG4gICAgY3VycmVudEluZGV4ID0gMDsgLy8gdXNlZCBmb3IgaW5kZXhpbmcgdGhlIGxvYWRlZCB2YWxpZGF0ZWQgaGlzdG9yeSBBcnJheVxuXG4gICAgY29uc3RydWN0b3Iocm9vbUlkOiBzdHJpbmcsIHByZWZpeDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMucHJlZml4ID0gcHJlZml4ICsgcm9vbUlkO1xuXG4gICAgICAgIC8vIFRPRE86IFBlcmZvcm1hbmNlIGlzc3Vlcz9cbiAgICAgICAgbGV0IGluZGV4ID0gMDtcbiAgICAgICAgbGV0IGl0ZW1KU09OO1xuXG4gICAgICAgIHdoaWxlIChpdGVtSlNPTiA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oYCR7dGhpcy5wcmVmaXh9WyR7aW5kZXh9XWApKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKEpTT04ucGFyc2UoaXRlbUpTT04pKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIud2FybihcIlRocm93aW5nIGF3YXkgdW5zZXJpYWxpc2FibGUgaGlzdG9yeVwiLCBlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICsraW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sYXN0SW5kZXggPSB0aGlzLmhpc3RvcnkubGVuZ3RoIC0gMTtcbiAgICAgICAgLy8gcmVzZXQgY3VycmVudEluZGV4IHRvIGFjY291bnQgZm9yIGFueSB1bnNlcmlhbGlzYWJsZSBoaXN0b3J5XG4gICAgICAgIHRoaXMuY3VycmVudEluZGV4ID0gdGhpcy5sYXN0SW5kZXggKyAxO1xuICAgIH1cblxuICAgIHN0YXRpYyBjcmVhdGVJdGVtKG1vZGVsOiBFZGl0b3JNb2RlbCwgcmVwbHlFdmVudD86IE1hdHJpeEV2ZW50KTogSUhpc3RvcnlJdGVtIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBhcnRzOiBtb2RlbC5zZXJpYWxpemVQYXJ0cygpLFxuICAgICAgICAgICAgcmVwbHlFdmVudElkOiByZXBseUV2ZW50ID8gcmVwbHlFdmVudC5nZXRJZCgpIDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHNhdmUoZWRpdG9yTW9kZWw6IEVkaXRvck1vZGVsLCByZXBseUV2ZW50PzogTWF0cml4RXZlbnQpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IFNlbmRIaXN0b3J5TWFuYWdlci5jcmVhdGVJdGVtKGVkaXRvck1vZGVsLCByZXBseUV2ZW50KTtcbiAgICAgICAgdGhpcy5oaXN0b3J5LnB1c2goaXRlbSk7XG4gICAgICAgIHRoaXMuY3VycmVudEluZGV4ID0gdGhpcy5oaXN0b3J5Lmxlbmd0aDtcbiAgICAgICAgdGhpcy5sYXN0SW5kZXggKz0gMTtcbiAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShgJHt0aGlzLnByZWZpeH1bJHt0aGlzLmxhc3RJbmRleH1dYCwgSlNPTi5zdHJpbmdpZnkoaXRlbSkpO1xuICAgIH1cblxuICAgIGdldEl0ZW0ob2Zmc2V0OiBudW1iZXIpOiBJSGlzdG9yeUl0ZW0ge1xuICAgICAgICB0aGlzLmN1cnJlbnRJbmRleCA9IGNsYW1wKHRoaXMuY3VycmVudEluZGV4ICsgb2Zmc2V0LCAwLCB0aGlzLmhpc3RvcnkubGVuZ3RoIC0gMSk7XG4gICAgICAgIHJldHVybiB0aGlzLmhpc3RvcnlbdGhpcy5jdXJyZW50SW5kZXhdO1xuICAgIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFnQkE7O0FBRUE7O0FBbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWNlLE1BQU1BLGtCQUFOLENBQXlCO0VBR3JCO0VBQ0c7RUFFbEJDLFdBQVcsQ0FBQ0MsTUFBRCxFQUFpQkMsTUFBakIsRUFBaUM7SUFBQSwrQ0FMYixFQUthO0lBQUE7SUFBQSxpREFIaEMsQ0FHZ0M7SUFBQSxvREFGN0IsQ0FFNkI7SUFDeEMsS0FBS0EsTUFBTCxHQUFjQSxNQUFNLEdBQUdELE1BQXZCLENBRHdDLENBR3hDOztJQUNBLElBQUlFLEtBQUssR0FBRyxDQUFaO0lBQ0EsSUFBSUMsUUFBSjs7SUFFQSxPQUFPQSxRQUFRLEdBQUdDLGNBQWMsQ0FBQ0MsT0FBZixDQUF3QixHQUFFLEtBQUtKLE1BQU8sSUFBR0MsS0FBTSxHQUEvQyxDQUFsQixFQUFzRTtNQUNsRSxJQUFJO1FBQ0EsS0FBS0ksT0FBTCxDQUFhQyxJQUFiLENBQWtCQyxJQUFJLENBQUNDLEtBQUwsQ0FBV04sUUFBWCxDQUFsQjtNQUNILENBRkQsQ0FFRSxPQUFPTyxDQUFQLEVBQVU7UUFDUkMsY0FBQSxDQUFPQyxJQUFQLENBQVksc0NBQVosRUFBb0RGLENBQXBEOztRQUNBO01BQ0g7O01BQ0QsRUFBRVIsS0FBRjtJQUNIOztJQUNELEtBQUtXLFNBQUwsR0FBaUIsS0FBS1AsT0FBTCxDQUFhUSxNQUFiLEdBQXNCLENBQXZDLENBaEJ3QyxDQWlCeEM7O0lBQ0EsS0FBS0MsWUFBTCxHQUFvQixLQUFLRixTQUFMLEdBQWlCLENBQXJDO0VBQ0g7O0VBRWdCLE9BQVZHLFVBQVUsQ0FBQ0MsS0FBRCxFQUFxQkMsVUFBckIsRUFBNkQ7SUFDMUUsT0FBTztNQUNIQyxLQUFLLEVBQUVGLEtBQUssQ0FBQ0csY0FBTixFQURKO01BRUhDLFlBQVksRUFBRUgsVUFBVSxHQUFHQSxVQUFVLENBQUNJLEtBQVgsRUFBSCxHQUF3QkM7SUFGN0MsQ0FBUDtFQUlIOztFQUVEQyxJQUFJLENBQUNDLFdBQUQsRUFBMkJQLFVBQTNCLEVBQXFEO0lBQ3JELE1BQU1RLElBQUksR0FBRzVCLGtCQUFrQixDQUFDa0IsVUFBbkIsQ0FBOEJTLFdBQTlCLEVBQTJDUCxVQUEzQyxDQUFiO0lBQ0EsS0FBS1osT0FBTCxDQUFhQyxJQUFiLENBQWtCbUIsSUFBbEI7SUFDQSxLQUFLWCxZQUFMLEdBQW9CLEtBQUtULE9BQUwsQ0FBYVEsTUFBakM7SUFDQSxLQUFLRCxTQUFMLElBQWtCLENBQWxCO0lBQ0FULGNBQWMsQ0FBQ3VCLE9BQWYsQ0FBd0IsR0FBRSxLQUFLMUIsTUFBTyxJQUFHLEtBQUtZLFNBQVUsR0FBeEQsRUFBNERMLElBQUksQ0FBQ29CLFNBQUwsQ0FBZUYsSUFBZixDQUE1RDtFQUNIOztFQUVEckIsT0FBTyxDQUFDd0IsTUFBRCxFQUErQjtJQUNsQyxLQUFLZCxZQUFMLEdBQW9CLElBQUFlLGFBQUEsRUFBTSxLQUFLZixZQUFMLEdBQW9CYyxNQUExQixFQUFrQyxDQUFsQyxFQUFxQyxLQUFLdkIsT0FBTCxDQUFhUSxNQUFiLEdBQXNCLENBQTNELENBQXBCO0lBQ0EsT0FBTyxLQUFLUixPQUFMLENBQWEsS0FBS1MsWUFBbEIsQ0FBUDtFQUNIOztBQTdDbUMifQ==