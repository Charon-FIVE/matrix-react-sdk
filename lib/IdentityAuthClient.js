"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.AbortedIdentityActionError = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _serviceTypes = require("matrix-js-sdk/src/service-types");

var _matrix = require("matrix-js-sdk/src/matrix");

var _logger = require("matrix-js-sdk/src/logger");

var _MatrixClientPeg = require("./MatrixClientPeg");

var _Modal = _interopRequireDefault(require("./Modal"));

var _languageHandler = require("./languageHandler");

var _Terms = require("./Terms");

var _IdentityServerUtils = require("./utils/IdentityServerUtils");

var _QuestionDialog = _interopRequireDefault(require("./components/views/dialogs/QuestionDialog"));

var _UrlUtils = require("./utils/UrlUtils");

/*
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class AbortedIdentityActionError extends Error {}

exports.AbortedIdentityActionError = AbortedIdentityActionError;

class IdentityAuthClient {
  /**
   * Creates a new identity auth client
   * @param {string} identityUrl The URL to contact the identity server with.
   * When provided, this class will operate solely within memory, refusing to
   * persist any information such as tokens. Default null (not provided).
   */
  constructor(identityUrl) {
    (0, _defineProperty2.default)(this, "accessToken", void 0);
    (0, _defineProperty2.default)(this, "tempClient", void 0);
    (0, _defineProperty2.default)(this, "authEnabled", true);

    if (identityUrl) {
      // XXX: We shouldn't have to create a whole new MatrixClient just to
      // do identity server auth. The functions don't take an identity URL
      // though, and making all of them take one could lead to developer
      // confusion about what the idBaseUrl does on a client. Therefore, we
      // just make a new client and live with it.
      this.tempClient = (0, _matrix.createClient)({
        baseUrl: "",
        // invalid by design
        idBaseUrl: identityUrl
      });
    }
  }

  get matrixClient() {
    return this.tempClient ? this.tempClient : _MatrixClientPeg.MatrixClientPeg.get();
  }

  writeToken() {
    if (this.tempClient) return; // temporary client: ignore

    window.localStorage.setItem("mx_is_access_token", this.accessToken);
  }

  readToken() {
    if (this.tempClient) return null; // temporary client: ignore

    return window.localStorage.getItem("mx_is_access_token");
  }

  hasCredentials() {
    return Boolean(this.accessToken);
  } // Returns a promise that resolves to the access_token string from the IS


  async getAccessToken() {
    let {
      check = true
    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (!this.authEnabled) {
      // The current IS doesn't support authentication
      return null;
    }

    let token = this.accessToken;

    if (!token) {
      token = this.readToken();
    }

    if (!token) {
      token = await this.registerForToken(check);

      if (token) {
        this.accessToken = token;
        this.writeToken();
      }

      return token;
    }

    if (check) {
      try {
        await this.checkToken(token);
      } catch (e) {
        if (e instanceof _Terms.TermsNotSignedError || e instanceof AbortedIdentityActionError) {
          // Retrying won't help this
          throw e;
        } // Retry in case token expired


        token = await this.registerForToken();

        if (token) {
          this.accessToken = token;
          this.writeToken();
        }
      }
    }

    return token;
  }

  async checkToken(token) {
    const identityServerUrl = this.matrixClient.getIdentityServerUrl();

    try {
      await this.matrixClient.getIdentityAccount(token);
    } catch (e) {
      if (e.errcode === "M_TERMS_NOT_SIGNED") {
        _logger.logger.log("Identity server requires new terms to be agreed to");

        await (0, _Terms.startTermsFlow)([new _Terms.Service(_serviceTypes.SERVICE_TYPES.IS, identityServerUrl, token)]);
        return;
      }

      throw e;
    }

    if (!this.tempClient && !(0, _IdentityServerUtils.doesAccountDataHaveIdentityServer)() && !(await (0, _IdentityServerUtils.doesIdentityServerHaveTerms)(identityServerUrl))) {
      const {
        finished
      } = _Modal.default.createDialog(_QuestionDialog.default, {
        title: (0, _languageHandler._t)("Identity server has no terms of service"),
        description: /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("This action requires accessing the default identity server " + "<server /> to validate an email address or phone number, " + "but the server does not have any terms of service.", {}, {
          server: () => /*#__PURE__*/_react.default.createElement("b", null, (0, _UrlUtils.abbreviateUrl)(identityServerUrl))
        })), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Only continue if you trust the owner of the server."))),
        button: (0, _languageHandler._t)("Trust")
      });

      const [confirmed] = await finished;

      if (confirmed) {
        (0, _IdentityServerUtils.setToDefaultIdentityServer)();
      } else {
        throw new AbortedIdentityActionError("User aborted identity server action without terms");
      }
    } // We should ensure the token in `localStorage` is cleared
    // appropriately. We already clear storage on sign out, but we'll need
    // additional clearing when changing ISes in settings as part of future
    // privacy work.
    // See also https://github.com/vector-im/element-web/issues/10455.

  }

  async registerForToken() {
    let check = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    const hsOpenIdToken = await _MatrixClientPeg.MatrixClientPeg.get().getOpenIdToken(); // XXX: The spec is `token`, but we used `access_token` for a Sydent release.

    const {
      access_token: accessToken,
      token
    } = await this.matrixClient.registerWithIdentityServer(hsOpenIdToken);
    const identityAccessToken = token ? token : accessToken;
    if (check) await this.checkToken(identityAccessToken);
    return identityAccessToken;
  }

}

exports.default = IdentityAuthClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,