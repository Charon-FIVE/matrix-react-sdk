"use strict";

require("matrix-js-sdk/src/@types/global");

require("@types/css-font-loading-module");

require("@types/modernizr");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,