"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _logger = require("matrix-js-sdk/src/logger");

var _languageHandler = require("../../../languageHandler");

var _IntegrationManagers = require("../../../integrations/IntegrationManagers");

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _SettingLevel = require("../../../settings/SettingLevel");

var _ToggleSwitch = _interopRequireDefault(require("../elements/ToggleSwitch"));

/*
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class SetIntegrationManager extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onProvisioningToggled", () => {
      const current = this.state.provisioningEnabled;

      _SettingsStore.default.setValue("integrationProvisioning", null, _SettingLevel.SettingLevel.ACCOUNT, !current).catch(err => {
        _logger.logger.error("Error changing integration manager provisioning");

        _logger.logger.error(err);

        this.setState({
          provisioningEnabled: current
        });
      });

      this.setState({
        provisioningEnabled: !current
      });
    });

    const currentManager = _IntegrationManagers.IntegrationManagers.sharedInstance().getPrimaryManager();

    this.state = {
      currentManager,
      provisioningEnabled: _SettingsStore.default.getValue("integrationProvisioning")
    };
  }

  render() {
    const currentManager = this.state.currentManager;
    let managerName;
    let bodyText;

    if (currentManager) {
      managerName = `(${currentManager.name})`;
      bodyText = (0, _languageHandler._t)("Use an integration manager <b>(%(serverName)s)</b> to manage bots, widgets, " + "and sticker packs.", {
        serverName: currentManager.name
      }, {
        b: sub => /*#__PURE__*/_react.default.createElement("b", null, sub)
      });
    } else {
      bodyText = (0, _languageHandler._t)("Use an integration manager to manage bots, widgets, and sticker packs.");
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SetIntegrationManager"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsFlag"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SetIntegrationManager_heading_manager"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_heading"
    }, (0, _languageHandler._t)("Manage integrations")), /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, managerName)), /*#__PURE__*/_react.default.createElement(_ToggleSwitch.default, {
      checked: this.state.provisioningEnabled,
      disabled: false,
      onChange: this.onProvisioningToggled
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_subsectionText"
    }, bodyText), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_subsectionText"
    }, (0, _languageHandler._t)("Integration managers receive configuration data, and can modify widgets, " + "send room invites, and set power levels on your behalf.")));
  }

}

exports.default = SetIntegrationManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,