"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../../languageHandler");

var _AccessibleButton = _interopRequireDefault(require("../../elements/AccessibleButton"));

var _SettingsSubsection = _interopRequireDefault(require("../shared/SettingsSubsection"));

var _DeviceSecurityCard = _interopRequireDefault(require("./DeviceSecurityCard"));

var _filter = require("./filter");

var _types = require("./types");

/*
Copyright 2022 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const SecurityRecommendations = _ref => {
  let {
    devices,
    currentDeviceId,
    goToFilteredList
  } = _ref;
  const devicesArray = Object.values(devices);
  const unverifiedDevicesCount = (0, _filter.filterDevicesBySecurityRecommendation)(devicesArray, [_types.DeviceSecurityVariation.Unverified]) // filter out the current device
  // as unverfied warning and actions
  // will be shown in current session section
  .filter(device => device.device_id !== currentDeviceId).length;
  const inactiveDevicesCount = (0, _filter.filterDevicesBySecurityRecommendation)(devicesArray, [_types.DeviceSecurityVariation.Inactive]).length;

  if (!(unverifiedDevicesCount | inactiveDevicesCount)) {
    return null;
  }

  const inactiveAgeDays = _filter.INACTIVE_DEVICE_AGE_DAYS;
  return /*#__PURE__*/_react.default.createElement(_SettingsSubsection.default, {
    heading: (0, _languageHandler._t)('Security recommendations'),
    description: (0, _languageHandler._t)('Improve your account security by following these recommendations'),
    "data-testid": "security-recommendations-section"
  }, !!unverifiedDevicesCount && /*#__PURE__*/_react.default.createElement(_DeviceSecurityCard.default, {
    variation: _types.DeviceSecurityVariation.Unverified,
    heading: (0, _languageHandler._t)('Unverified sessions'),
    description: (0, _languageHandler._t)(`Verify your sessions for enhanced secure messaging` + ` or sign out from those you don't recognize or use anymore.`)
  }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    kind: "link_inline",
    onClick: () => goToFilteredList(_types.DeviceSecurityVariation.Unverified),
    "data-testid": "unverified-devices-cta"
  }, (0, _languageHandler._t)('View all') + ` (${unverifiedDevicesCount})`)), !!inactiveDevicesCount && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, !!unverifiedDevicesCount && /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SecurityRecommendations_spacing"
  }), /*#__PURE__*/_react.default.createElement(_DeviceSecurityCard.default, {
    variation: _types.DeviceSecurityVariation.Inactive,
    heading: (0, _languageHandler._t)('Inactive sessions'),
    description: (0, _languageHandler._t)(`Consider signing out from old sessions ` + `(%(inactiveAgeDays)s days or older) you don't use anymore`, {
      inactiveAgeDays
    })
  }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    kind: "link_inline",
    onClick: () => goToFilteredList(_types.DeviceSecurityVariation.Inactive),
    "data-testid": "inactive-devices-cta"
  }, (0, _languageHandler._t)('View all') + ` (${inactiveDevicesCount})`))));
};

var _default = SecurityRecommendations;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,