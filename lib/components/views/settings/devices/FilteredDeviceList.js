"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FilteredDeviceList = void 0;

var _react = _interopRequireWildcard(require("react"));

var _languageHandler = require("../../../../languageHandler");

var _AccessibleButton = _interopRequireDefault(require("../../elements/AccessibleButton"));

var _FilterDropdown = require("../../elements/FilterDropdown");

var _DeviceDetails = _interopRequireDefault(require("./DeviceDetails"));

var _DeviceExpandDetailsButton = _interopRequireDefault(require("./DeviceExpandDetailsButton"));

var _DeviceSecurityCard = _interopRequireDefault(require("./DeviceSecurityCard"));

var _DeviceTile = _interopRequireDefault(require("./DeviceTile"));

var _filter = require("./filter");

var _types = require("./types");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2022 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// devices without timestamp metadata should be sorted last
const sortDevicesByLatestActivity = (left, right) => (right.last_seen_ts || 0) - (left.last_seen_ts || 0);

const getFilteredSortedDevices = (devices, filter) => (0, _filter.filterDevicesBySecurityRecommendation)(Object.values(devices), filter ? [filter] : []).sort(sortDevicesByLatestActivity);

const ALL_FILTER_ID = 'ALL';

const FilterSecurityCard = _ref => {
  let {
    filter
  } = _ref;

  switch (filter) {
    case _types.DeviceSecurityVariation.Verified:
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_FilteredDeviceList_securityCard"
      }, /*#__PURE__*/_react.default.createElement(_DeviceSecurityCard.default, {
        variation: _types.DeviceSecurityVariation.Verified,
        heading: (0, _languageHandler._t)('Verified sessions'),
        description: (0, _languageHandler._t)(`For best security, sign out from any session` + ` that you don't recognize or use anymore.`)
      }));

    case _types.DeviceSecurityVariation.Unverified:
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_FilteredDeviceList_securityCard"
      }, /*#__PURE__*/_react.default.createElement(_DeviceSecurityCard.default, {
        variation: _types.DeviceSecurityVariation.Unverified,
        heading: (0, _languageHandler._t)('Unverified sessions'),
        description: (0, _languageHandler._t)(`Verify your sessions for enhanced secure messaging or sign out` + ` from those you don't recognize or use anymore.`)
      }));

    case _types.DeviceSecurityVariation.Inactive:
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_FilteredDeviceList_securityCard"
      }, /*#__PURE__*/_react.default.createElement(_DeviceSecurityCard.default, {
        variation: _types.DeviceSecurityVariation.Inactive,
        heading: (0, _languageHandler._t)('Inactive sessions'),
        description: (0, _languageHandler._t)(`Consider signing out from old sessions ` + `(%(inactiveAgeDays)s days or older) you don't use anymore`, {
          inactiveAgeDays: _filter.INACTIVE_DEVICE_AGE_DAYS
        })
      }));

    default:
      return null;
  }
};

const getNoResultsMessage = filter => {
  switch (filter) {
    case _types.DeviceSecurityVariation.Verified:
      return (0, _languageHandler._t)('No verified sessions found.');

    case _types.DeviceSecurityVariation.Unverified:
      return (0, _languageHandler._t)('No unverified sessions found.');

    case _types.DeviceSecurityVariation.Inactive:
      return (0, _languageHandler._t)('No inactive sessions found.');

    default:
      return (0, _languageHandler._t)('No sessions found.');
  }
};

const NoResults = _ref2 => {
  let {
    filter,
    clearFilter
  } = _ref2;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_FilteredDeviceList_noResults"
  }, getNoResultsMessage(filter),
  /* No clear filter button when filter is falsy (ie 'All') */
  !!filter && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "\xA0", /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    kind: "link_inline",
    onClick: clearFilter,
    "data-testid": "devices-clear-filter-btn"
  }, (0, _languageHandler._t)('Show all'))));
};

const DeviceListItem = _ref3 => {
  let {
    device,
    isExpanded,
    onDeviceExpandToggle
  } = _ref3;
  return /*#__PURE__*/_react.default.createElement("li", {
    className: "mx_FilteredDeviceList_listItem"
  }, /*#__PURE__*/_react.default.createElement(_DeviceTile.default, {
    device: device
  }, /*#__PURE__*/_react.default.createElement(_DeviceExpandDetailsButton.default, {
    isExpanded: isExpanded,
    onClick: onDeviceExpandToggle
  })), isExpanded && /*#__PURE__*/_react.default.createElement(_DeviceDetails.default, {
    device: device
  }));
};
/**
 * Filtered list of devices
 * Sorted by latest activity descending
 */


const FilteredDeviceList = /*#__PURE__*/(0, _react.forwardRef)((_ref4, ref) => {
  let {
    devices,
    filter,
    expandedDeviceIds,
    onFilterChange,
    onDeviceExpandToggle
  } = _ref4;
  const sortedDevices = getFilteredSortedDevices(devices, filter);
  const options = [{
    id: ALL_FILTER_ID,
    label: (0, _languageHandler._t)('All')
  }, {
    id: _types.DeviceSecurityVariation.Verified,
    label: (0, _languageHandler._t)('Verified'),
    description: (0, _languageHandler._t)('Ready for secure messaging')
  }, {
    id: _types.DeviceSecurityVariation.Unverified,
    label: (0, _languageHandler._t)('Unverified'),
    description: (0, _languageHandler._t)('Not ready for secure messaging')
  }, {
    id: _types.DeviceSecurityVariation.Inactive,
    label: (0, _languageHandler._t)('Inactive'),
    description: (0, _languageHandler._t)('Inactive for %(inactiveAgeDays)s days or longer', {
      inactiveAgeDays: _filter.INACTIVE_DEVICE_AGE_DAYS
    })
  }];

  const onFilterOptionChange = filterId => {
    onFilterChange(filterId === ALL_FILTER_ID ? undefined : filterId);
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_FilteredDeviceList",
    ref: ref
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_FilteredDeviceList_header"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_FilteredDeviceList_headerLabel"
  }, (0, _languageHandler._t)('Sessions')), /*#__PURE__*/_react.default.createElement(_FilterDropdown.FilterDropdown, {
    id: "device-list-filter",
    label: (0, _languageHandler._t)('Filter devices'),
    value: filter || ALL_FILTER_ID,
    onOptionChange: onFilterOptionChange,
    options: options,
    selectedLabel: (0, _languageHandler._t)('Show')
  })), !!sortedDevices.length ? /*#__PURE__*/_react.default.createElement(FilterSecurityCard, {
    filter: filter
  }) : /*#__PURE__*/_react.default.createElement(NoResults, {
    filter: filter,
    clearFilter: () => onFilterChange(undefined)
  }), /*#__PURE__*/_react.default.createElement("ol", {
    className: "mx_FilteredDeviceList_list"
  }, sortedDevices.map(device => /*#__PURE__*/_react.default.createElement(DeviceListItem, {
    key: device.device_id,
    device: device,
    isExpanded: expandedDeviceIds.includes(device.device_id),
    onDeviceExpandToggle: () => onDeviceExpandToggle(device.device_id)
  }))));
});
exports.FilteredDeviceList = FilteredDeviceList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,