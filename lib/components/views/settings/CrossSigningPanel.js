"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _matrix = require("matrix-js-sdk/src/matrix");

var _logger = require("matrix-js-sdk/src/logger");

var _crypto = require("matrix-js-sdk/src/crypto");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _languageHandler = require("../../../languageHandler");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _Spinner = _interopRequireDefault(require("../elements/Spinner"));

var _InteractiveAuthDialog = _interopRequireDefault(require("../dialogs/InteractiveAuthDialog"));

var _ConfirmDestroyCrossSigningDialog = _interopRequireDefault(require("../dialogs/security/ConfirmDestroyCrossSigningDialog"));

var _SetupEncryptionDialog = _interopRequireDefault(require("../dialogs/security/SetupEncryptionDialog"));

var _SecurityManager = require("../../../SecurityManager");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

/*
Copyright 2019, 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class CrossSigningPanel extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "unmounted", false);
    (0, _defineProperty2.default)(this, "onAccountData", event => {
      const type = event.getType();

      if (type.startsWith("m.cross_signing") || type.startsWith("m.secret_storage")) {
        this.getUpdatedStatus();
      }
    });
    (0, _defineProperty2.default)(this, "onBootstrapClick", () => {
      if (this.state.crossSigningPrivateKeysInStorage) {
        _Modal.default.createDialog(_SetupEncryptionDialog.default, {}, null,
        /* priority = */
        false,
        /* static = */
        true);
      } else {
        // Trigger the flow to set up secure backup, which is what this will do when in
        // the appropriate state.
        (0, _SecurityManager.accessSecretStorage)();
      }
    });
    (0, _defineProperty2.default)(this, "onStatusChanged", () => {
      this.getUpdatedStatus();
    });
    (0, _defineProperty2.default)(this, "bootstrapCrossSigning", async _ref => {
      let {
        forceReset = false
      } = _ref;
      this.setState({
        error: undefined
      });

      try {
        const cli = _MatrixClientPeg.MatrixClientPeg.get();

        await cli.bootstrapCrossSigning({
          authUploadDeviceSigningKeys: async makeRequest => {
            const {
              finished
            } = _Modal.default.createDialog(_InteractiveAuthDialog.default, {
              title: (0, _languageHandler._t)("Setting up keys"),
              matrixClient: cli,
              makeRequest
            });

            const [confirmed] = await finished;

            if (!confirmed) {
              throw new Error("Cross-signing key upload auth canceled");
            }
          },
          setupNewCrossSigning: forceReset
        });
      } catch (e) {
        this.setState({
          error: e
        });

        _logger.logger.error("Error bootstrapping cross-signing", e);
      }

      if (this.unmounted) return;
      this.getUpdatedStatus();
    });
    (0, _defineProperty2.default)(this, "resetCrossSigning", () => {
      _Modal.default.createDialog(_ConfirmDestroyCrossSigningDialog.default, {
        onFinished: act => {
          if (!act) return;
          this.bootstrapCrossSigning({
            forceReset: true
          });
        }
      });
    });
    this.state = {};
  }

  componentDidMount() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    cli.on(_matrix.ClientEvent.AccountData, this.onAccountData);
    cli.on(_crypto.CryptoEvent.UserTrustStatusChanged, this.onStatusChanged);
    cli.on(_crypto.CryptoEvent.KeysChanged, this.onStatusChanged);
    this.getUpdatedStatus();
  }

  componentWillUnmount() {
    this.unmounted = true;

    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    if (!cli) return;
    cli.removeListener(_matrix.ClientEvent.AccountData, this.onAccountData);
    cli.removeListener(_crypto.CryptoEvent.UserTrustStatusChanged, this.onStatusChanged);
    cli.removeListener(_crypto.CryptoEvent.KeysChanged, this.onStatusChanged);
  }

  async getUpdatedStatus() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    const pkCache = cli.getCrossSigningCacheCallbacks();
    const crossSigning = cli.crypto.crossSigningInfo;
    const secretStorage = cli.crypto.secretStorage;
    const crossSigningPublicKeysOnDevice = Boolean(crossSigning.getId());
    const crossSigningPrivateKeysInStorage = Boolean(await crossSigning.isStoredInSecretStorage(secretStorage));
    const masterPrivateKeyCached = !!(pkCache && (await pkCache.getCrossSigningKeyCache("master")));
    const selfSigningPrivateKeyCached = !!(pkCache && (await pkCache.getCrossSigningKeyCache("self_signing")));
    const userSigningPrivateKeyCached = !!(pkCache && (await pkCache.getCrossSigningKeyCache("user_signing")));
    const homeserverSupportsCrossSigning = await cli.doesServerSupportUnstableFeature("org.matrix.e2e_cross_signing");
    const crossSigningReady = await cli.isCrossSigningReady();
    this.setState({
      crossSigningPublicKeysOnDevice,
      crossSigningPrivateKeysInStorage,
      masterPrivateKeyCached,
      selfSigningPrivateKeyCached,
      userSigningPrivateKeyCached,
      homeserverSupportsCrossSigning,
      crossSigningReady
    });
  }
  /**
   * Bootstrapping cross-signing take one of these paths:
   * 1. Create cross-signing keys locally and store in secret storage (if it
   *    already exists on the account).
   * 2. Access existing secret storage by requesting passphrase and accessing
   *    cross-signing keys as needed.
   * 3. All keys are loaded and there's nothing to do.
   * @param {bool} [forceReset] Bootstrap again even if keys already present
   */


  render() {
    const {
      error,
      crossSigningPublicKeysOnDevice,
      crossSigningPrivateKeysInStorage,
      masterPrivateKeyCached,
      selfSigningPrivateKeyCached,
      userSigningPrivateKeyCached,
      homeserverSupportsCrossSigning,
      crossSigningReady
    } = this.state;
    let errorSection;

    if (error) {
      errorSection = /*#__PURE__*/_react.default.createElement("div", {
        className: "error"
      }, error.toString());
    }

    let summarisedStatus;

    if (homeserverSupportsCrossSigning === undefined) {
      summarisedStatus = /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
    } else if (!homeserverSupportsCrossSigning) {
      summarisedStatus = /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Your homeserver does not support cross-signing."));
    } else if (crossSigningReady && crossSigningPrivateKeysInStorage) {
      summarisedStatus = /*#__PURE__*/_react.default.createElement("p", null, "\u2705 ", (0, _languageHandler._t)("Cross-signing is ready for use."));
    } else if (crossSigningReady && !crossSigningPrivateKeysInStorage) {
      summarisedStatus = /*#__PURE__*/_react.default.createElement("p", null, "\u26A0\uFE0F ", (0, _languageHandler._t)("Cross-signing is ready but keys are not backed up."));
    } else if (crossSigningPrivateKeysInStorage) {
      summarisedStatus = /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Your account has a cross-signing identity in secret storage, " + "but it is not yet trusted by this session."));
    } else {
      summarisedStatus = /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Cross-signing is not set up."));
    }

    const keysExistAnywhere = crossSigningPublicKeysOnDevice || crossSigningPrivateKeysInStorage || masterPrivateKeyCached || selfSigningPrivateKeyCached || userSigningPrivateKeyCached;
    const keysExistEverywhere = crossSigningPublicKeysOnDevice && crossSigningPrivateKeysInStorage && masterPrivateKeyCached && selfSigningPrivateKeyCached && userSigningPrivateKeyCached;
    const actions = []; // TODO: determine how better to expose this to users in addition to prompts at login/toast

    if (!keysExistEverywhere && homeserverSupportsCrossSigning) {
      let buttonCaption = (0, _languageHandler._t)("Set up Secure Backup");

      if (crossSigningPrivateKeysInStorage) {
        buttonCaption = (0, _languageHandler._t)("Verify this session");
      }

      actions.push( /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        key: "setup",
        kind: "primary",
        onClick: this.onBootstrapClick
      }, buttonCaption));
    }

    if (keysExistAnywhere) {
      actions.push( /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        key: "reset",
        kind: "danger",
        onClick: this.resetCrossSigning
      }, (0, _languageHandler._t)("Reset")));
    }

    let actionRow;

    if (actions.length) {
      actionRow = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_CrossSigningPanel_buttonRow"
      }, actions);
    }

    return /*#__PURE__*/_react.default.createElement("div", null, summarisedStatus, /*#__PURE__*/_react.default.createElement("details", null, /*#__PURE__*/_react.default.createElement("summary", null, (0, _languageHandler._t)("Advanced")), /*#__PURE__*/_react.default.createElement("table", {
      className: "mx_CrossSigningPanel_statusList"
    }, /*#__PURE__*/_react.default.createElement("tbody", null, /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement("td", null, (0, _languageHandler._t)("Cross-signing public keys:")), /*#__PURE__*/_react.default.createElement("td", null, crossSigningPublicKeysOnDevice ? (0, _languageHandler._t)("in memory") : (0, _languageHandler._t)("not found"))), /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement("td", null, (0, _languageHandler._t)("Cross-signing private keys:")), /*#__PURE__*/_react.default.createElement("td", null, crossSigningPrivateKeysInStorage ? (0, _languageHandler._t)("in secret storage") : (0, _languageHandler._t)("not found in storage"))), /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement("td", null, (0, _languageHandler._t)("Master private key:")), /*#__PURE__*/_react.default.createElement("td", null, masterPrivateKeyCached ? (0, _languageHandler._t)("cached locally") : (0, _languageHandler._t)("not found locally"))), /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement("td", null, (0, _languageHandler._t)("Self signing private key:")), /*#__PURE__*/_react.default.createElement("td", null, selfSigningPrivateKeyCached ? (0, _languageHandler._t)("cached locally") : (0, _languageHandler._t)("not found locally"))), /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement("td", null, (0, _languageHandler._t)("User signing private key:")), /*#__PURE__*/_react.default.createElement("td", null, userSigningPrivateKeyCached ? (0, _languageHandler._t)("cached locally") : (0, _languageHandler._t)("not found locally"))), /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement("td", null, (0, _languageHandler._t)("Homeserver feature support:")), /*#__PURE__*/_react.default.createElement("td", null, homeserverSupportsCrossSigning ? (0, _languageHandler._t)("exists") : (0, _languageHandler._t)("not found")))))), errorSection, actionRow);
  }

}

exports.default = CrossSigningPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,