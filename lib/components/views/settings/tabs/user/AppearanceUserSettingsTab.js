"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../../../languageHandler");

var _SdkConfig = _interopRequireDefault(require("../../../../../SdkConfig"));

var _MatrixClientPeg = require("../../../../../MatrixClientPeg");

var _SettingsStore = _interopRequireDefault(require("../../../../../settings/SettingsStore"));

var _SettingsFlag = _interopRequireDefault(require("../../../elements/SettingsFlag"));

var _Field = _interopRequireDefault(require("../../../elements/Field"));

var _AccessibleButton = _interopRequireDefault(require("../../../elements/AccessibleButton"));

var _SettingLevel = require("../../../../../settings/SettingLevel");

var _UIFeature = require("../../../../../settings/UIFeature");

var _LayoutSwitcher = _interopRequireDefault(require("../../LayoutSwitcher"));

var _FontScalingPanel = _interopRequireDefault(require("../../FontScalingPanel"));

var _ThemeChoicePanel = _interopRequireDefault(require("../../ThemeChoicePanel"));

var _ImageSizePanel = _interopRequireDefault(require("../../ImageSizePanel"));

/*
Copyright 2019 New Vector Ltd
Copyright 2019 - 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class AppearanceUserSettingsTab extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "MESSAGE_PREVIEW_TEXT", (0, _languageHandler._t)("Hey you. You're the best!"));
    (0, _defineProperty2.default)(this, "unmounted", false);
    (0, _defineProperty2.default)(this, "onLayoutChanged", layout => {
      this.setState({
        layout: layout
      });
    });
    this.state = {
      useSystemFont: _SettingsStore.default.getValue("useSystemFont"),
      systemFont: _SettingsStore.default.getValue("systemFont"),
      showAdvanced: false,
      layout: _SettingsStore.default.getValue("layout"),
      userId: null,
      displayName: null,
      avatarUrl: null
    };
  }

  async componentDidMount() {
    // Fetch the current user profile for the message preview
    const client = _MatrixClientPeg.MatrixClientPeg.get();

    const userId = client.getUserId();
    const profileInfo = await client.getProfileInfo(userId);
    if (this.unmounted) return;
    this.setState({
      userId,
      displayName: profileInfo.displayname,
      avatarUrl: profileInfo.avatar_url
    });
  }

  componentWillUnmount() {
    this.unmounted = true;
  }

  renderAdvancedSection() {
    if (!_SettingsStore.default.getValue(_UIFeature.UIFeature.AdvancedSettings)) return null;

    const brand = _SdkConfig.default.get().brand;

    const toggle = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      kind: "link",
      onClick: () => this.setState({
        showAdvanced: !this.state.showAdvanced
      })
    }, this.state.showAdvanced ? (0, _languageHandler._t)("Hide advanced") : (0, _languageHandler._t)("Show advanced"));

    let advanced;

    if (this.state.showAdvanced) {
      const tooltipContent = (0, _languageHandler._t)("Set the name of a font installed on your system & %(brand)s will attempt to use it.", {
        brand
      });
      advanced = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_SettingsFlag.default, {
        name: "useCompactLayout",
        level: _SettingLevel.SettingLevel.DEVICE,
        useCheckbox: true
      }), /*#__PURE__*/_react.default.createElement(_SettingsFlag.default, {
        name: "useSystemFont",
        level: _SettingLevel.SettingLevel.DEVICE,
        useCheckbox: true,
        onChange: checked => this.setState({
          useSystemFont: checked
        })
      }), /*#__PURE__*/_react.default.createElement(_Field.default, {
        className: "mx_AppearanceUserSettingsTab_systemFont",
        label: _SettingsStore.default.getDisplayName("systemFont"),
        onChange: value => {
          this.setState({
            systemFont: value.target.value
          });

          _SettingsStore.default.setValue("systemFont", null, _SettingLevel.SettingLevel.DEVICE, value.target.value);
        },
        tooltipContent: tooltipContent,
        forceTooltipVisible: true,
        disabled: !this.state.useSystemFont,
        value: this.state.systemFont
      }));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section mx_AppearanceUserSettingsTab_Advanced"
    }, toggle, advanced);
  }

  render() {
    const brand = _SdkConfig.default.get().brand;

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab mx_AppearanceUserSettingsTab"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_heading"
    }, (0, _languageHandler._t)("Customise your appearance")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_subsectionText"
    }, (0, _languageHandler._t)("Appearance Settings only affect this %(brand)s session.", {
      brand
    })), /*#__PURE__*/_react.default.createElement(_ThemeChoicePanel.default, null), /*#__PURE__*/_react.default.createElement(_LayoutSwitcher.default, {
      userId: this.state.userId,
      displayName: this.state.displayName,
      avatarUrl: this.state.avatarUrl,
      messagePreviewText: this.MESSAGE_PREVIEW_TEXT,
      onLayoutChanged: this.onLayoutChanged
    }), /*#__PURE__*/_react.default.createElement(_FontScalingPanel.default, null), this.renderAdvancedSection(), /*#__PURE__*/_react.default.createElement(_ImageSizePanel.default, null));
  }

}

exports.default = AppearanceUserSettingsTab;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,