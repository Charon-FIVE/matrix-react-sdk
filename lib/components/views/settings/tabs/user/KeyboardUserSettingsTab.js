"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _KeyboardShortcuts = require("../../../../../accessibility/KeyboardShortcuts");

var _SdkConfig = _interopRequireDefault(require("../../../../../SdkConfig"));

var _languageHandler = require("../../../../../languageHandler");

var _KeyboardShortcutUtils = require("../../../../../accessibility/KeyboardShortcutUtils");

var _KeyboardShortcut = require("../../KeyboardShortcut");

/*
Copyright 2020 The Matrix.org Foundation C.I.C.
Copyright 2021 - 2022 Å imon Brandner <simon.bra.ag@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Filter out the labs section if labs aren't enabled.
const visibleCategories = Object.entries(_KeyboardShortcuts.CATEGORIES).filter(_ref => {
  let [categoryName] = _ref;
  return categoryName !== _KeyboardShortcuts.CategoryName.LABS || _SdkConfig.default.get("show_labs_settings");
});

const KeyboardShortcutRow = _ref2 => {
  let {
    name
  } = _ref2;
  const displayName = (0, _KeyboardShortcutUtils.getKeyboardShortcutDisplayName)(name);
  const value = (0, _KeyboardShortcutUtils.getKeyboardShortcutValue)(name);
  if (!displayName || !value) return null;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_KeyboardShortcut_shortcutRow"
  }, displayName, /*#__PURE__*/_react.default.createElement(_KeyboardShortcut.KeyboardShortcut, {
    value: value
  }));
};

const KeyboardShortcutSection = _ref3 => {
  let {
    categoryName,
    category
  } = _ref3;
  if (!category.categoryLabel) return null;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SettingsTab_section",
    key: categoryName
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SettingsTab_subheading"
  }, (0, _languageHandler._t)(category.categoryLabel)), /*#__PURE__*/_react.default.createElement("div", null, " ", category.settingNames.map(shortcutName => {
    return /*#__PURE__*/_react.default.createElement(KeyboardShortcutRow, {
      key: shortcutName,
      name: shortcutName
    });
  }), " "));
};

const KeyboardUserSettingsTab = () => {
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SettingsTab mx_KeyboardUserSettingsTab"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SettingsTab_heading"
  }, (0, _languageHandler._t)("Keyboard")), visibleCategories.map(_ref4 => {
    let [categoryName, category] = _ref4;
    return /*#__PURE__*/_react.default.createElement(KeyboardShortcutSection, {
      key: categoryName,
      categoryName: categoryName,
      category: category
    });
  }));
};

var _default = KeyboardUserSettingsTab;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ2aXNpYmxlQ2F0ZWdvcmllcyIsIk9iamVjdCIsImVudHJpZXMiLCJDQVRFR09SSUVTIiwiZmlsdGVyIiwiY2F0ZWdvcnlOYW1lIiwiQ2F0ZWdvcnlOYW1lIiwiTEFCUyIsIlNka0NvbmZpZyIsImdldCIsIktleWJvYXJkU2hvcnRjdXRSb3ciLCJuYW1lIiwiZGlzcGxheU5hbWUiLCJnZXRLZXlib2FyZFNob3J0Y3V0RGlzcGxheU5hbWUiLCJ2YWx1ZSIsImdldEtleWJvYXJkU2hvcnRjdXRWYWx1ZSIsIktleWJvYXJkU2hvcnRjdXRTZWN0aW9uIiwiY2F0ZWdvcnkiLCJjYXRlZ29yeUxhYmVsIiwiX3QiLCJzZXR0aW5nTmFtZXMiLCJtYXAiLCJzaG9ydGN1dE5hbWUiLCJLZXlib2FyZFVzZXJTZXR0aW5nc1RhYiJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL3NldHRpbmdzL3RhYnMvdXNlci9LZXlib2FyZFVzZXJTZXR0aW5nc1RhYi50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDIwIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5Db3B5cmlnaHQgMjAyMSAtIDIwMjIgxaBpbW9uIEJyYW5kbmVyIDxzaW1vbi5icmEuYWdAZ21haWwuY29tPlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHtcbiAgICBJQ2F0ZWdvcnksXG4gICAgQ0FURUdPUklFUyxcbiAgICBDYXRlZ29yeU5hbWUsXG59IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9hY2Nlc3NpYmlsaXR5L0tleWJvYXJkU2hvcnRjdXRzXCI7XG5pbXBvcnQgU2RrQ29uZmlnIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9TZGtDb25maWdcIjtcbmltcG9ydCB7IF90IH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2xhbmd1YWdlSGFuZGxlclwiO1xuaW1wb3J0IHtcbiAgICBnZXRLZXlib2FyZFNob3J0Y3V0RGlzcGxheU5hbWUsIGdldEtleWJvYXJkU2hvcnRjdXRWYWx1ZSxcbn0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2FjY2Vzc2liaWxpdHkvS2V5Ym9hcmRTaG9ydGN1dFV0aWxzXCI7XG5pbXBvcnQgeyBLZXlib2FyZFNob3J0Y3V0IH0gZnJvbSBcIi4uLy4uL0tleWJvYXJkU2hvcnRjdXRcIjtcblxuaW50ZXJmYWNlIElLZXlib2FyZFNob3J0Y3V0Um93UHJvcHMge1xuICAgIG5hbWU6IHN0cmluZztcbn1cblxuLy8gRmlsdGVyIG91dCB0aGUgbGFicyBzZWN0aW9uIGlmIGxhYnMgYXJlbid0IGVuYWJsZWQuXG5jb25zdCB2aXNpYmxlQ2F0ZWdvcmllcyA9IE9iamVjdC5lbnRyaWVzKENBVEVHT1JJRVMpLmZpbHRlcigoW2NhdGVnb3J5TmFtZV0pID0+XG4gICAgY2F0ZWdvcnlOYW1lICE9PSBDYXRlZ29yeU5hbWUuTEFCUyB8fCBTZGtDb25maWcuZ2V0KFwic2hvd19sYWJzX3NldHRpbmdzXCIpKTtcblxuY29uc3QgS2V5Ym9hcmRTaG9ydGN1dFJvdzogUmVhY3QuRkM8SUtleWJvYXJkU2hvcnRjdXRSb3dQcm9wcz4gPSAoeyBuYW1lIH0pID0+IHtcbiAgICBjb25zdCBkaXNwbGF5TmFtZSA9IGdldEtleWJvYXJkU2hvcnRjdXREaXNwbGF5TmFtZShuYW1lKTtcbiAgICBjb25zdCB2YWx1ZSA9IGdldEtleWJvYXJkU2hvcnRjdXRWYWx1ZShuYW1lKTtcbiAgICBpZiAoIWRpc3BsYXlOYW1lIHx8ICF2YWx1ZSkgcmV0dXJuIG51bGw7XG5cbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJteF9LZXlib2FyZFNob3J0Y3V0X3Nob3J0Y3V0Um93XCI+XG4gICAgICAgIHsgZGlzcGxheU5hbWUgfVxuICAgICAgICA8S2V5Ym9hcmRTaG9ydGN1dCB2YWx1ZT17dmFsdWV9IC8+XG4gICAgPC9kaXY+O1xufTtcblxuaW50ZXJmYWNlIElLZXlib2FyZFNob3J0Y3V0U2VjdGlvblByb3BzIHtcbiAgICBjYXRlZ29yeU5hbWU6IENhdGVnb3J5TmFtZTtcbiAgICBjYXRlZ29yeTogSUNhdGVnb3J5O1xufVxuXG5jb25zdCBLZXlib2FyZFNob3J0Y3V0U2VjdGlvbjogUmVhY3QuRkM8SUtleWJvYXJkU2hvcnRjdXRTZWN0aW9uUHJvcHM+ID0gKHsgY2F0ZWdvcnlOYW1lLCBjYXRlZ29yeSB9KSA9PiB7XG4gICAgaWYgKCFjYXRlZ29yeS5jYXRlZ29yeUxhYmVsKSByZXR1cm4gbnVsbDtcblxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cIm14X1NldHRpbmdzVGFiX3NlY3Rpb25cIiBrZXk9e2NhdGVnb3J5TmFtZX0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfU2V0dGluZ3NUYWJfc3ViaGVhZGluZ1wiPnsgX3QoY2F0ZWdvcnkuY2F0ZWdvcnlMYWJlbCkgfTwvZGl2PlxuICAgICAgICA8ZGl2PiB7IGNhdGVnb3J5LnNldHRpbmdOYW1lcy5tYXAoKHNob3J0Y3V0TmFtZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIDxLZXlib2FyZFNob3J0Y3V0Um93IGtleT17c2hvcnRjdXROYW1lfSBuYW1lPXtzaG9ydGN1dE5hbWV9IC8+O1xuICAgICAgICB9KSB9IDwvZGl2PlxuICAgIDwvZGl2Pjtcbn07XG5cbmNvbnN0IEtleWJvYXJkVXNlclNldHRpbmdzVGFiOiBSZWFjdC5GQyA9ICgpID0+IHtcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJteF9TZXR0aW5nc1RhYiBteF9LZXlib2FyZFVzZXJTZXR0aW5nc1RhYlwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X1NldHRpbmdzVGFiX2hlYWRpbmdcIj57IF90KFwiS2V5Ym9hcmRcIikgfTwvZGl2PlxuICAgICAgICB7IHZpc2libGVDYXRlZ29yaWVzLm1hcCgoW2NhdGVnb3J5TmFtZSwgY2F0ZWdvcnldOiBbQ2F0ZWdvcnlOYW1lLCBJQ2F0ZWdvcnldKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gPEtleWJvYXJkU2hvcnRjdXRTZWN0aW9uIGtleT17Y2F0ZWdvcnlOYW1lfSBjYXRlZ29yeU5hbWU9e2NhdGVnb3J5TmFtZX0gY2F0ZWdvcnk9e2NhdGVnb3J5fSAvPjtcbiAgICAgICAgfSkgfVxuICAgIDwvZGl2Pjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEtleWJvYXJkVXNlclNldHRpbmdzVGFiO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFpQkE7O0FBRUE7O0FBS0E7O0FBQ0E7O0FBQ0E7O0FBR0E7O0FBN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBb0JBO0FBQ0EsTUFBTUEsaUJBQWlCLEdBQUdDLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlQyw2QkFBZixFQUEyQkMsTUFBM0IsQ0FBa0M7RUFBQSxJQUFDLENBQUNDLFlBQUQsQ0FBRDtFQUFBLE9BQ3hEQSxZQUFZLEtBQUtDLCtCQUFBLENBQWFDLElBQTlCLElBQXNDQyxrQkFBQSxDQUFVQyxHQUFWLENBQWMsb0JBQWQsQ0FEa0I7QUFBQSxDQUFsQyxDQUExQjs7QUFHQSxNQUFNQyxtQkFBd0QsR0FBRyxTQUFjO0VBQUEsSUFBYjtJQUFFQztFQUFGLENBQWE7RUFDM0UsTUFBTUMsV0FBVyxHQUFHLElBQUFDLHFEQUFBLEVBQStCRixJQUEvQixDQUFwQjtFQUNBLE1BQU1HLEtBQUssR0FBRyxJQUFBQywrQ0FBQSxFQUF5QkosSUFBekIsQ0FBZDtFQUNBLElBQUksQ0FBQ0MsV0FBRCxJQUFnQixDQUFDRSxLQUFyQixFQUE0QixPQUFPLElBQVA7RUFFNUIsb0JBQU87SUFBSyxTQUFTLEVBQUM7RUFBZixHQUNERixXQURDLGVBRUgsNkJBQUMsa0NBQUQ7SUFBa0IsS0FBSyxFQUFFRTtFQUF6QixFQUZHLENBQVA7QUFJSCxDQVREOztBQWdCQSxNQUFNRSx1QkFBZ0UsR0FBRyxTQUFnQztFQUFBLElBQS9CO0lBQUVYLFlBQUY7SUFBZ0JZO0VBQWhCLENBQStCO0VBQ3JHLElBQUksQ0FBQ0EsUUFBUSxDQUFDQyxhQUFkLEVBQTZCLE9BQU8sSUFBUDtFQUU3QixvQkFBTztJQUFLLFNBQVMsRUFBQyx3QkFBZjtJQUF3QyxHQUFHLEVBQUViO0VBQTdDLGdCQUNIO0lBQUssU0FBUyxFQUFDO0VBQWYsR0FBNkMsSUFBQWMsbUJBQUEsRUFBR0YsUUFBUSxDQUFDQyxhQUFaLENBQTdDLENBREcsZUFFSCwrQ0FBUUQsUUFBUSxDQUFDRyxZQUFULENBQXNCQyxHQUF0QixDQUEyQkMsWUFBRCxJQUFrQjtJQUNoRCxvQkFBTyw2QkFBQyxtQkFBRDtNQUFxQixHQUFHLEVBQUVBLFlBQTFCO01BQXdDLElBQUksRUFBRUE7SUFBOUMsRUFBUDtFQUNILENBRk8sQ0FBUixNQUZHLENBQVA7QUFNSCxDQVREOztBQVdBLE1BQU1DLHVCQUFpQyxHQUFHLE1BQU07RUFDNUMsb0JBQU87SUFBSyxTQUFTLEVBQUM7RUFBZixnQkFDSDtJQUFLLFNBQVMsRUFBQztFQUFmLEdBQTBDLElBQUFKLG1CQUFBLEVBQUcsVUFBSCxDQUExQyxDQURHLEVBRURuQixpQkFBaUIsQ0FBQ3FCLEdBQWxCLENBQXNCLFNBQXlEO0lBQUEsSUFBeEQsQ0FBQ2hCLFlBQUQsRUFBZVksUUFBZixDQUF3RDtJQUM3RSxvQkFBTyw2QkFBQyx1QkFBRDtNQUF5QixHQUFHLEVBQUVaLFlBQTlCO01BQTRDLFlBQVksRUFBRUEsWUFBMUQ7TUFBd0UsUUFBUSxFQUFFWTtJQUFsRixFQUFQO0VBQ0gsQ0FGQyxDQUZDLENBQVA7QUFNSCxDQVBEOztlQVNlTSx1QiJ9