"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../../../languageHandler");

var _SettingsStore = _interopRequireDefault(require("../../../../../settings/SettingsStore"));

var _Field = _interopRequireDefault(require("../../../elements/Field"));

var _SettingLevel = require("../../../../../settings/SettingLevel");

var _SettingsFlag = _interopRequireDefault(require("../../../elements/SettingsFlag"));

var _AccessibleButton = _interopRequireDefault(require("../../../elements/AccessibleButton"));

var _dispatcher = _interopRequireDefault(require("../../../../../dispatcher/dispatcher"));

var _UserTab = require("../../../dialogs/UserTab");

var _actions = require("../../../../../dispatcher/actions");

var _SdkConfig = _interopRequireDefault(require("../../../../../SdkConfig"));

var _MatrixClientPeg = require("../../../../../MatrixClientPeg");

var _UserOnboardingPage = require("../../../user-onboarding/UserOnboardingPage");

/*
Copyright 2019-2021 The Matrix.org Foundation C.I.C.
Copyright 2019 Michael Telatynski <7t3chguy@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class PreferencesUserSettingsTab extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onAutocompleteDelayChange", e => {
      this.setState({
        autocompleteDelay: e.target.value
      });

      _SettingsStore.default.setValue("autocompleteDelay", null, _SettingLevel.SettingLevel.DEVICE, e.target.value);
    });
    (0, _defineProperty2.default)(this, "onReadMarkerInViewThresholdMs", e => {
      this.setState({
        readMarkerInViewThresholdMs: e.target.value
      });

      _SettingsStore.default.setValue("readMarkerInViewThresholdMs", null, _SettingLevel.SettingLevel.DEVICE, e.target.value);
    });
    (0, _defineProperty2.default)(this, "onReadMarkerOutOfViewThresholdMs", e => {
      this.setState({
        readMarkerOutOfViewThresholdMs: e.target.value
      });

      _SettingsStore.default.setValue("readMarkerOutOfViewThresholdMs", null, _SettingLevel.SettingLevel.DEVICE, e.target.value);
    });
    (0, _defineProperty2.default)(this, "onKeyboardShortcutsClicked", () => {
      _dispatcher.default.dispatch({
        action: _actions.Action.ViewUserSettings,
        initialTabId: _UserTab.UserTab.Keyboard
      });
    });
    this.state = {
      disablingReadReceiptsSupported: false,
      autocompleteDelay: _SettingsStore.default.getValueAt(_SettingLevel.SettingLevel.DEVICE, 'autocompleteDelay').toString(10),
      readMarkerInViewThresholdMs: _SettingsStore.default.getValueAt(_SettingLevel.SettingLevel.DEVICE, 'readMarkerInViewThresholdMs').toString(10),
      readMarkerOutOfViewThresholdMs: _SettingsStore.default.getValueAt(_SettingLevel.SettingLevel.DEVICE, 'readMarkerOutOfViewThresholdMs').toString(10)
    };
  }

  async componentDidMount() {
    this.setState({
      disablingReadReceiptsSupported: (await _MatrixClientPeg.MatrixClientPeg.get().doesServerSupportUnstableFeature("org.matrix.msc2285.stable")) || (await _MatrixClientPeg.MatrixClientPeg.get().doesServerSupportUnstableFeature("org.matrix.msc2285"))
    });
  }

  renderGroup(settingIds) {
    let level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _SettingLevel.SettingLevel.ACCOUNT;
    return settingIds.map(i => {
      const disabled = !_SettingsStore.default.isEnabled(i);
      return /*#__PURE__*/_react.default.createElement(_SettingsFlag.default, {
        key: i,
        name: i,
        level: level,
        disabled: disabled
      });
    });
  }

  render() {
    const useCase = _SettingsStore.default.getValue("FTUE.useCaseSelection");

    const roomListSettings = PreferencesUserSettingsTab.ROOM_LIST_SETTINGS // Only show the breadcrumbs setting if breadcrumbs v2 is disabled
    .filter(it => it !== "breadcrumbs" || !_SettingsStore.default.getValue("feature_breadcrumbs_v2")) // Only show the user onboarding setting if the user should see the user onboarding page
    .filter(it => it !== "FTUE.userOnboardingButton" || (0, _UserOnboardingPage.showUserOnboardingPage)(useCase));
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab mx_PreferencesUserSettingsTab"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_heading"
    }, (0, _languageHandler._t)("Preferences")), roomListSettings.length > 0 && /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Room list")), this.renderGroup(roomListSettings)), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Spaces")), this.renderGroup(PreferencesUserSettingsTab.SPACES_SETTINGS, _SettingLevel.SettingLevel.ACCOUNT)), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Keyboard shortcuts")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsFlag"
    }, (0, _languageHandler._t)("To view all keyboard shortcuts, <a>click here</a>.", {}, {
      a: sub => /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        kind: "link_inline",
        onClick: this.onKeyboardShortcutsClicked
      }, sub)
    })), this.renderGroup(PreferencesUserSettingsTab.KEYBINDINGS_SETTINGS)), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Displaying time")), this.renderGroup(PreferencesUserSettingsTab.TIME_SETTINGS)), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Presence")), /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subsectionText"
    }, (0, _languageHandler._t)("Share your activity and status with others.")), /*#__PURE__*/_react.default.createElement(_SettingsFlag.default, {
      disabled: !this.state.disablingReadReceiptsSupported,
      disabledDescription: (0, _languageHandler._t)("Your server doesn't support disabling sending read receipts."),
      name: "sendReadReceipts",
      level: _SettingLevel.SettingLevel.ACCOUNT
    }), this.renderGroup(PreferencesUserSettingsTab.PRESENCE_SETTINGS)), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Composer")), this.renderGroup(PreferencesUserSettingsTab.COMPOSER_SETTINGS)), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Code blocks")), this.renderGroup(PreferencesUserSettingsTab.CODE_BLOCKS_SETTINGS)), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Images, GIFs and videos")), this.renderGroup(PreferencesUserSettingsTab.IMAGES_AND_VIDEOS_SETTINGS)), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Timeline")), this.renderGroup(PreferencesUserSettingsTab.TIMELINE_SETTINGS)), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("General")), this.renderGroup(PreferencesUserSettingsTab.GENERAL_SETTINGS), /*#__PURE__*/_react.default.createElement(_SettingsFlag.default, {
      name: "Electron.showTrayIcon",
      level: _SettingLevel.SettingLevel.PLATFORM,
      hideIfCannotSet: true
    }), /*#__PURE__*/_react.default.createElement(_SettingsFlag.default, {
      name: "Electron.enableHardwareAcceleration",
      level: _SettingLevel.SettingLevel.PLATFORM,
      hideIfCannotSet: true,
      label: (0, _languageHandler._t)('Enable hardware acceleration (restart %(appName)s to take effect)', {
        appName: _SdkConfig.default.get().brand
      })
    }), /*#__PURE__*/_react.default.createElement(_SettingsFlag.default, {
      name: "Electron.alwaysShowMenuBar",
      level: _SettingLevel.SettingLevel.PLATFORM,
      hideIfCannotSet: true
    }), /*#__PURE__*/_react.default.createElement(_SettingsFlag.default, {
      name: "Electron.autoLaunch",
      level: _SettingLevel.SettingLevel.PLATFORM,
      hideIfCannotSet: true
    }), /*#__PURE__*/_react.default.createElement(_SettingsFlag.default, {
      name: "Electron.warnBeforeExit",
      level: _SettingLevel.SettingLevel.PLATFORM,
      hideIfCannotSet: true
    }), /*#__PURE__*/_react.default.createElement(_Field.default, {
      label: (0, _languageHandler._t)('Autocomplete delay (ms)'),
      type: "number",
      value: this.state.autocompleteDelay,
      onChange: this.onAutocompleteDelayChange
    }), /*#__PURE__*/_react.default.createElement(_Field.default, {
      label: (0, _languageHandler._t)('Read Marker lifetime (ms)'),
      type: "number",
      value: this.state.readMarkerInViewThresholdMs,
      onChange: this.onReadMarkerInViewThresholdMs
    }), /*#__PURE__*/_react.default.createElement(_Field.default, {
      label: (0, _languageHandler._t)('Read Marker off-screen lifetime (ms)'),
      type: "number",
      value: this.state.readMarkerOutOfViewThresholdMs,
      onChange: this.onReadMarkerOutOfViewThresholdMs
    })));
  }

}

exports.default = PreferencesUserSettingsTab;
(0, _defineProperty2.default)(PreferencesUserSettingsTab, "ROOM_LIST_SETTINGS", ['breadcrumbs', "FTUE.userOnboardingButton"]);
(0, _defineProperty2.default)(PreferencesUserSettingsTab, "SPACES_SETTINGS", ["Spaces.allRoomsInHome"]);
(0, _defineProperty2.default)(PreferencesUserSettingsTab, "KEYBINDINGS_SETTINGS", ['ctrlFForSearch']);
(0, _defineProperty2.default)(PreferencesUserSettingsTab, "PRESENCE_SETTINGS", ["sendTypingNotifications" // sendReadReceipts - handled specially due to server needing support
]);
(0, _defineProperty2.default)(PreferencesUserSettingsTab, "COMPOSER_SETTINGS", ['MessageComposerInput.autoReplaceEmoji', 'MessageComposerInput.useMarkdown', 'MessageComposerInput.suggestEmoji', 'MessageComposerInput.ctrlEnterToSend', 'MessageComposerInput.surroundWith', 'MessageComposerInput.showStickersButton', 'MessageComposerInput.insertTrailingColon']);
(0, _defineProperty2.default)(PreferencesUserSettingsTab, "TIME_SETTINGS", ['showTwelveHourTimestamps', 'alwaysShowTimestamps']);
(0, _defineProperty2.default)(PreferencesUserSettingsTab, "CODE_BLOCKS_SETTINGS", ['enableSyntaxHighlightLanguageDetection', 'expandCodeByDefault', 'showCodeLineNumbers']);
(0, _defineProperty2.default)(PreferencesUserSettingsTab, "IMAGES_AND_VIDEOS_SETTINGS", ['urlPreviewsEnabled', 'autoplayGifs', 'autoplayVideo', 'showImages']);
(0, _defineProperty2.default)(PreferencesUserSettingsTab, "TIMELINE_SETTINGS", ['showTypingNotifications', 'showRedactions', 'showReadReceipts', 'showJoinLeaves', 'showDisplaynameChanges', 'showChatEffects', 'showAvatarChanges', 'Pill.shouldShowPillAvatar', 'TextualBody.enableBigEmoji', 'scrollToBottomOnMessageSent', 'useOnlyCurrentProfiles']);
(0, _defineProperty2.default)(PreferencesUserSettingsTab, "GENERAL_SETTINGS", ['promptBeforeInviteUnknownUsers' // Start automatically after startup (electron-only)
// Autocomplete delay (niche text box)
]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,