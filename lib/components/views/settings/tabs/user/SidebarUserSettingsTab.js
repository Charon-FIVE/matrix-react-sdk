"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onMetaSpaceChangeFactory = exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../../../languageHandler");

var _SettingsStore = _interopRequireDefault(require("../../../../../settings/SettingsStore"));

var _SettingLevel = require("../../../../../settings/SettingLevel");

var _StyledCheckbox = _interopRequireDefault(require("../../../elements/StyledCheckbox"));

var _useSettings = require("../../../../../hooks/useSettings");

var _spaces = require("../../../../../stores/spaces");

var _PosthogTrackers = _interopRequireDefault(require("../../../../../PosthogTrackers"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

const onMetaSpaceChangeFactory = (metaSpace, interactionName) => e => {
  const currentValue = _SettingsStore.default.getValue("Spaces.enabledMetaSpaces");

  _SettingsStore.default.setValue("Spaces.enabledMetaSpaces", null, _SettingLevel.SettingLevel.ACCOUNT, _objectSpread(_objectSpread({}, currentValue), {}, {
    [metaSpace]: e.target.checked
  }));

  _PosthogTrackers.default.trackInteraction(interactionName, e, [_spaces.MetaSpace.Home, null, _spaces.MetaSpace.Favourites, _spaces.MetaSpace.People, _spaces.MetaSpace.Orphans].indexOf(metaSpace));
};

exports.onMetaSpaceChangeFactory = onMetaSpaceChangeFactory;

const SidebarUserSettingsTab = () => {
  const {
    [_spaces.MetaSpace.Home]: homeEnabled,
    [_spaces.MetaSpace.Favourites]: favouritesEnabled,
    [_spaces.MetaSpace.People]: peopleEnabled,
    [_spaces.MetaSpace.Orphans]: orphansEnabled
  } = (0, _useSettings.useSettingValue)("Spaces.enabledMetaSpaces");
  const allRoomsInHome = (0, _useSettings.useSettingValue)("Spaces.allRoomsInHome");
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SettingsTab mx_SidebarUserSettingsTab"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SettingsTab_heading"
  }, (0, _languageHandler._t)("Sidebar")), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SettingsTab_section"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SettingsTab_subheading"
  }, (0, _languageHandler._t)("Spaces to show")), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SettingsTab_subsectionText"
  }, (0, _languageHandler._t)("Spaces are ways to group rooms and people. " + "Alongside the spaces you're in, you can use some pre-built ones too.")), /*#__PURE__*/_react.default.createElement(_StyledCheckbox.default, {
    checked: !!homeEnabled,
    onChange: onMetaSpaceChangeFactory(_spaces.MetaSpace.Home, "WebSettingsSidebarTabSpacesCheckbox"),
    className: "mx_SidebarUserSettingsTab_homeCheckbox",
    disabled: homeEnabled
  }, (0, _languageHandler._t)("Home")), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SidebarUserSettingsTab_checkboxMicrocopy"
  }, (0, _languageHandler._t)("Home is useful for getting an overview of everything.")), /*#__PURE__*/_react.default.createElement(_StyledCheckbox.default, {
    checked: allRoomsInHome,
    disabled: !homeEnabled,
    onChange: e => {
      _SettingsStore.default.setValue("Spaces.allRoomsInHome", null, _SettingLevel.SettingLevel.ACCOUNT, e.target.checked);

      _PosthogTrackers.default.trackInteraction("WebSettingsSidebarTabSpacesCheckbox", e, 1);
    },
    className: "mx_SidebarUserSettingsTab_homeAllRoomsCheckbox"
  }, (0, _languageHandler._t)("Show all rooms")), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SidebarUserSettingsTab_checkboxMicrocopy"
  }, (0, _languageHandler._t)("Show all your rooms in Home, even if they're in a space.")), /*#__PURE__*/_react.default.createElement(_StyledCheckbox.default, {
    checked: !!favouritesEnabled,
    onChange: onMetaSpaceChangeFactory(_spaces.MetaSpace.Favourites, "WebSettingsSidebarTabSpacesCheckbox"),
    className: "mx_SidebarUserSettingsTab_favouritesCheckbox"
  }, (0, _languageHandler._t)("Favourites")), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SidebarUserSettingsTab_checkboxMicrocopy"
  }, (0, _languageHandler._t)("Group all your favourite rooms and people in one place.")), /*#__PURE__*/_react.default.createElement(_StyledCheckbox.default, {
    checked: !!peopleEnabled,
    onChange: onMetaSpaceChangeFactory(_spaces.MetaSpace.People, "WebSettingsSidebarTabSpacesCheckbox"),
    className: "mx_SidebarUserSettingsTab_peopleCheckbox"
  }, (0, _languageHandler._t)("People")), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SidebarUserSettingsTab_checkboxMicrocopy"
  }, (0, _languageHandler._t)("Group all your people in one place.")), /*#__PURE__*/_react.default.createElement(_StyledCheckbox.default, {
    checked: !!orphansEnabled,
    onChange: onMetaSpaceChangeFactory(_spaces.MetaSpace.Orphans, "WebSettingsSidebarTabSpacesCheckbox"),
    className: "mx_SidebarUserSettingsTab_orphansCheckbox"
  }, (0, _languageHandler._t)("Rooms outside of a space")), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SidebarUserSettingsTab_checkboxMicrocopy"
  }, (0, _languageHandler._t)("Group all your rooms that aren't part of a space in one place."))));
};

var _default = SidebarUserSettingsTab;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvbk1ldGFTcGFjZUNoYW5nZUZhY3RvcnkiLCJtZXRhU3BhY2UiLCJpbnRlcmFjdGlvbk5hbWUiLCJlIiwiY3VycmVudFZhbHVlIiwiU2V0dGluZ3NTdG9yZSIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJTZXR0aW5nTGV2ZWwiLCJBQ0NPVU5UIiwidGFyZ2V0IiwiY2hlY2tlZCIsIlBvc3Rob2dUcmFja2VycyIsInRyYWNrSW50ZXJhY3Rpb24iLCJNZXRhU3BhY2UiLCJIb21lIiwiRmF2b3VyaXRlcyIsIlBlb3BsZSIsIk9ycGhhbnMiLCJpbmRleE9mIiwiU2lkZWJhclVzZXJTZXR0aW5nc1RhYiIsImhvbWVFbmFibGVkIiwiZmF2b3VyaXRlc0VuYWJsZWQiLCJwZW9wbGVFbmFibGVkIiwib3JwaGFuc0VuYWJsZWQiLCJ1c2VTZXR0aW5nVmFsdWUiLCJhbGxSb29tc0luSG9tZSIsIl90Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvdmlld3Mvc2V0dGluZ3MvdGFicy91c2VyL1NpZGViYXJVc2VyU2V0dGluZ3NUYWIudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMSAtIDIwMjIgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgUmVhY3QsIHsgQ2hhbmdlRXZlbnQgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IF90IH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2xhbmd1YWdlSGFuZGxlclwiO1xuaW1wb3J0IFNldHRpbmdzU3RvcmUgZnJvbSBcIi4uLy4uLy4uLy4uLy4uL3NldHRpbmdzL1NldHRpbmdzU3RvcmVcIjtcbmltcG9ydCB7IFNldHRpbmdMZXZlbCB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9zZXR0aW5ncy9TZXR0aW5nTGV2ZWxcIjtcbmltcG9ydCBTdHlsZWRDaGVja2JveCBmcm9tIFwiLi4vLi4vLi4vZWxlbWVudHMvU3R5bGVkQ2hlY2tib3hcIjtcbmltcG9ydCB7IHVzZVNldHRpbmdWYWx1ZSB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9ob29rcy91c2VTZXR0aW5nc1wiO1xuaW1wb3J0IHsgTWV0YVNwYWNlIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL3N0b3Jlcy9zcGFjZXNcIjtcbmltcG9ydCBQb3N0aG9nVHJhY2tlcnMgZnJvbSBcIi4uLy4uLy4uLy4uLy4uL1Bvc3Rob2dUcmFja2Vyc1wiO1xuXG50eXBlIEludGVyYWN0aW9uTmFtZSA9IFwiV2ViU2V0dGluZ3NTaWRlYmFyVGFiU3BhY2VzQ2hlY2tib3hcIiB8IFwiV2ViUXVpY2tTZXR0aW5nc1BpblRvU2lkZWJhckNoZWNrYm94XCI7XG5cbmV4cG9ydCBjb25zdCBvbk1ldGFTcGFjZUNoYW5nZUZhY3RvcnkgPSAoXG4gICAgbWV0YVNwYWNlOiBNZXRhU3BhY2UsXG4gICAgaW50ZXJhY3Rpb25OYW1lOiBJbnRlcmFjdGlvbk5hbWUsXG4pID0+IChlOiBDaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xuICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IFNldHRpbmdzU3RvcmUuZ2V0VmFsdWUoXCJTcGFjZXMuZW5hYmxlZE1ldGFTcGFjZXNcIik7XG4gICAgU2V0dGluZ3NTdG9yZS5zZXRWYWx1ZShcIlNwYWNlcy5lbmFibGVkTWV0YVNwYWNlc1wiLCBudWxsLCBTZXR0aW5nTGV2ZWwuQUNDT1VOVCwge1xuICAgICAgICAuLi5jdXJyZW50VmFsdWUsXG4gICAgICAgIFttZXRhU3BhY2VdOiBlLnRhcmdldC5jaGVja2VkLFxuICAgIH0pO1xuXG4gICAgUG9zdGhvZ1RyYWNrZXJzLnRyYWNrSW50ZXJhY3Rpb24oXG4gICAgICAgIGludGVyYWN0aW9uTmFtZSxcbiAgICAgICAgZSxcbiAgICAgICAgW01ldGFTcGFjZS5Ib21lLCBudWxsLCBNZXRhU3BhY2UuRmF2b3VyaXRlcywgTWV0YVNwYWNlLlBlb3BsZSwgTWV0YVNwYWNlLk9ycGhhbnNdLmluZGV4T2YobWV0YVNwYWNlKSxcbiAgICApO1xufTtcblxuY29uc3QgU2lkZWJhclVzZXJTZXR0aW5nc1RhYiA9ICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICAgIFtNZXRhU3BhY2UuSG9tZV06IGhvbWVFbmFibGVkLFxuICAgICAgICBbTWV0YVNwYWNlLkZhdm91cml0ZXNdOiBmYXZvdXJpdGVzRW5hYmxlZCxcbiAgICAgICAgW01ldGFTcGFjZS5QZW9wbGVdOiBwZW9wbGVFbmFibGVkLFxuICAgICAgICBbTWV0YVNwYWNlLk9ycGhhbnNdOiBvcnBoYW5zRW5hYmxlZCxcbiAgICB9ID0gdXNlU2V0dGluZ1ZhbHVlPFJlY29yZDxNZXRhU3BhY2UsIGJvb2xlYW4+PihcIlNwYWNlcy5lbmFibGVkTWV0YVNwYWNlc1wiKTtcbiAgICBjb25zdCBhbGxSb29tc0luSG9tZSA9IHVzZVNldHRpbmdWYWx1ZTxib29sZWFuPihcIlNwYWNlcy5hbGxSb29tc0luSG9tZVwiKTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfU2V0dGluZ3NUYWIgbXhfU2lkZWJhclVzZXJTZXR0aW5nc1RhYlwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9TZXR0aW5nc1RhYl9oZWFkaW5nXCI+eyBfdChcIlNpZGViYXJcIikgfTwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9TZXR0aW5nc1RhYl9zZWN0aW9uXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9TZXR0aW5nc1RhYl9zdWJoZWFkaW5nXCI+eyBfdChcIlNwYWNlcyB0byBzaG93XCIpIH08L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X1NldHRpbmdzVGFiX3N1YnNlY3Rpb25UZXh0XCI+XG4gICAgICAgICAgICAgICAgICAgIHsgX3QoXCJTcGFjZXMgYXJlIHdheXMgdG8gZ3JvdXAgcm9vbXMgYW5kIHBlb3BsZS4gXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJBbG9uZ3NpZGUgdGhlIHNwYWNlcyB5b3UncmUgaW4sIHlvdSBjYW4gdXNlIHNvbWUgcHJlLWJ1aWx0IG9uZXMgdG9vLlwiKSB9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8U3R5bGVkQ2hlY2tib3hcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17ISFob21lRW5hYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e29uTWV0YVNwYWNlQ2hhbmdlRmFjdG9yeShNZXRhU3BhY2UuSG9tZSwgXCJXZWJTZXR0aW5nc1NpZGViYXJUYWJTcGFjZXNDaGVja2JveFwiKX1cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibXhfU2lkZWJhclVzZXJTZXR0aW5nc1RhYl9ob21lQ2hlY2tib3hcIlxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17aG9tZUVuYWJsZWR9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICB7IF90KFwiSG9tZVwiKSB9XG4gICAgICAgICAgICAgICAgPC9TdHlsZWRDaGVja2JveD5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X1NpZGViYXJVc2VyU2V0dGluZ3NUYWJfY2hlY2tib3hNaWNyb2NvcHlcIj5cbiAgICAgICAgICAgICAgICAgICAgeyBfdChcIkhvbWUgaXMgdXNlZnVsIGZvciBnZXR0aW5nIGFuIG92ZXJ2aWV3IG9mIGV2ZXJ5dGhpbmcuXCIpIH1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDxTdHlsZWRDaGVja2JveFxuICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXthbGxSb29tc0luSG9tZX1cbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9eyFob21lRW5hYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgU2V0dGluZ3NTdG9yZS5zZXRWYWx1ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlNwYWNlcy5hbGxSb29tc0luSG9tZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU2V0dGluZ0xldmVsLkFDQ09VTlQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS50YXJnZXQuY2hlY2tlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBQb3N0aG9nVHJhY2tlcnMudHJhY2tJbnRlcmFjdGlvbihcIldlYlNldHRpbmdzU2lkZWJhclRhYlNwYWNlc0NoZWNrYm94XCIsIGUsIDEpO1xuICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJteF9TaWRlYmFyVXNlclNldHRpbmdzVGFiX2hvbWVBbGxSb29tc0NoZWNrYm94XCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIHsgX3QoXCJTaG93IGFsbCByb29tc1wiKSB9XG4gICAgICAgICAgICAgICAgPC9TdHlsZWRDaGVja2JveD5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X1NpZGViYXJVc2VyU2V0dGluZ3NUYWJfY2hlY2tib3hNaWNyb2NvcHlcIj5cbiAgICAgICAgICAgICAgICAgICAgeyBfdChcIlNob3cgYWxsIHlvdXIgcm9vbXMgaW4gSG9tZSwgZXZlbiBpZiB0aGV5J3JlIGluIGEgc3BhY2UuXCIpIH1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDxTdHlsZWRDaGVja2JveFxuICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXshIWZhdm91cml0ZXNFbmFibGVkfVxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17b25NZXRhU3BhY2VDaGFuZ2VGYWN0b3J5KE1ldGFTcGFjZS5GYXZvdXJpdGVzLCBcIldlYlNldHRpbmdzU2lkZWJhclRhYlNwYWNlc0NoZWNrYm94XCIpfVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJteF9TaWRlYmFyVXNlclNldHRpbmdzVGFiX2Zhdm91cml0ZXNDaGVja2JveFwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICB7IF90KFwiRmF2b3VyaXRlc1wiKSB9XG4gICAgICAgICAgICAgICAgPC9TdHlsZWRDaGVja2JveD5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X1NpZGViYXJVc2VyU2V0dGluZ3NUYWJfY2hlY2tib3hNaWNyb2NvcHlcIj5cbiAgICAgICAgICAgICAgICAgICAgeyBfdChcIkdyb3VwIGFsbCB5b3VyIGZhdm91cml0ZSByb29tcyBhbmQgcGVvcGxlIGluIG9uZSBwbGFjZS5cIikgfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPFN0eWxlZENoZWNrYm94XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9eyEhcGVvcGxlRW5hYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e29uTWV0YVNwYWNlQ2hhbmdlRmFjdG9yeShNZXRhU3BhY2UuUGVvcGxlLCBcIldlYlNldHRpbmdzU2lkZWJhclRhYlNwYWNlc0NoZWNrYm94XCIpfVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJteF9TaWRlYmFyVXNlclNldHRpbmdzVGFiX3Blb3BsZUNoZWNrYm94XCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIHsgX3QoXCJQZW9wbGVcIikgfVxuICAgICAgICAgICAgICAgIDwvU3R5bGVkQ2hlY2tib3g+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9TaWRlYmFyVXNlclNldHRpbmdzVGFiX2NoZWNrYm94TWljcm9jb3B5XCI+XG4gICAgICAgICAgICAgICAgICAgIHsgX3QoXCJHcm91cCBhbGwgeW91ciBwZW9wbGUgaW4gb25lIHBsYWNlLlwiKSB9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8U3R5bGVkQ2hlY2tib3hcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17ISFvcnBoYW5zRW5hYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e29uTWV0YVNwYWNlQ2hhbmdlRmFjdG9yeShNZXRhU3BhY2UuT3JwaGFucywgXCJXZWJTZXR0aW5nc1NpZGViYXJUYWJTcGFjZXNDaGVja2JveFwiKX1cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibXhfU2lkZWJhclVzZXJTZXR0aW5nc1RhYl9vcnBoYW5zQ2hlY2tib3hcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgeyBfdChcIlJvb21zIG91dHNpZGUgb2YgYSBzcGFjZVwiKSB9XG4gICAgICAgICAgICAgICAgPC9TdHlsZWRDaGVja2JveD5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X1NpZGViYXJVc2VyU2V0dGluZ3NUYWJfY2hlY2tib3hNaWNyb2NvcHlcIj5cbiAgICAgICAgICAgICAgICAgICAgeyBfdChcIkdyb3VwIGFsbCB5b3VyIHJvb21zIHRoYXQgYXJlbid0IHBhcnQgb2YgYSBzcGFjZSBpbiBvbmUgcGxhY2UuXCIpIH1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2lkZWJhclVzZXJTZXR0aW5nc1RhYjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFnQkE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7OztBQUlPLE1BQU1BLHdCQUF3QixHQUFHLENBQ3BDQyxTQURvQyxFQUVwQ0MsZUFGb0MsS0FHbENDLENBQUQsSUFBc0M7RUFDdkMsTUFBTUMsWUFBWSxHQUFHQyxzQkFBQSxDQUFjQyxRQUFkLENBQXVCLDBCQUF2QixDQUFyQjs7RUFDQUQsc0JBQUEsQ0FBY0UsUUFBZCxDQUF1QiwwQkFBdkIsRUFBbUQsSUFBbkQsRUFBeURDLDBCQUFBLENBQWFDLE9BQXRFLGtDQUNPTCxZQURQO0lBRUksQ0FBQ0gsU0FBRCxHQUFhRSxDQUFDLENBQUNPLE1BQUYsQ0FBU0M7RUFGMUI7O0VBS0FDLHdCQUFBLENBQWdCQyxnQkFBaEIsQ0FDSVgsZUFESixFQUVJQyxDQUZKLEVBR0ksQ0FBQ1csaUJBQUEsQ0FBVUMsSUFBWCxFQUFpQixJQUFqQixFQUF1QkQsaUJBQUEsQ0FBVUUsVUFBakMsRUFBNkNGLGlCQUFBLENBQVVHLE1BQXZELEVBQStESCxpQkFBQSxDQUFVSSxPQUF6RSxFQUFrRkMsT0FBbEYsQ0FB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