"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _event = require("matrix-js-sdk/src/@types/event");

var _languageHandler = require("../../../../../languageHandler");

var _MatrixClientPeg = require("../../../../../MatrixClientPeg");

var _AccessibleButton = _interopRequireDefault(require("../../../elements/AccessibleButton"));

var _RoomUpgradeDialog = _interopRequireDefault(require("../../../dialogs/RoomUpgradeDialog"));

var _Modal = _interopRequireDefault(require("../../../../../Modal"));

var _dispatcher = _interopRequireDefault(require("../../../../../dispatcher/dispatcher"));

var _actions = require("../../../../../dispatcher/actions");

var _CopyableText = _interopRequireDefault(require("../../../elements/CopyableText"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

class AdvancedRoomSettingsTab extends _react.default.Component {
  constructor(props, context) {
    super(props, context);
    (0, _defineProperty2.default)(this, "upgradeRoom", e => {
      const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(this.props.roomId);

      _Modal.default.createDialog(_RoomUpgradeDialog.default, {
        room
      });
    });
    (0, _defineProperty2.default)(this, "onOldRoomClicked", e => {
      e.preventDefault();
      e.stopPropagation();

      _dispatcher.default.dispatch({
        action: _actions.Action.ViewRoom,
        room_id: this.state.oldRoomId,
        event_id: this.state.oldEventId,
        metricsTrigger: "WebPredecessorSettings",
        metricsViaKeyboard: e.type !== "click"
      });

      this.props.closeSettingsFn();
    });
    this.state = {
      // This is eventually set to the value of room.getRecommendedVersion()
      upgradeRecommendation: null
    }; // we handle lack of this object gracefully later, so don't worry about it failing here.

    const _room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(this.props.roomId);

    _room.getRecommendedVersion().then(v => {
      const tombstone = _room.currentState.getStateEvents(_event.EventType.RoomTombstone, "");

      const additionalStateChanges = {};

      const createEvent = _room.currentState.getStateEvents(_event.EventType.RoomCreate, "");

      const predecessor = createEvent ? createEvent.getContent().predecessor : null;

      if (predecessor && predecessor.room_id) {
        additionalStateChanges.oldRoomId = predecessor.room_id;
        additionalStateChanges.oldEventId = predecessor.event_id;
      }

      this.setState(_objectSpread({
        upgraded: !!tombstone?.getContent().replacement_room,
        upgradeRecommendation: v
      }, additionalStateChanges));
    });
  }

  render() {
    const client = _MatrixClientPeg.MatrixClientPeg.get();

    const room = client.getRoom(this.props.roomId);
    const isSpace = room.isSpaceRoom();
    let unfederatableSection;
    const createEvent = room.currentState.getStateEvents(_event.EventType.RoomCreate, '');

    if (createEvent && createEvent.getContent()['m.federate'] === false) {
      unfederatableSection = /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)('This room is not accessible by remote Matrix servers'));
    }

    let roomUpgradeButton;

    if (this.state.upgradeRecommendation && this.state.upgradeRecommendation.needsUpgrade && !this.state.upgraded) {
      roomUpgradeButton = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", {
        className: "mx_SettingsTab_warningText"
      }, (0, _languageHandler._t)("<b>Warning</b>: Upgrading a room will <i>not automatically migrate room members " + "to the new version of the room.</i> We'll post a link to the new room in the old " + "version of the room - room members will have to click this link to join the new room.", {}, {
        "b": sub => /*#__PURE__*/_react.default.createElement("b", null, sub),
        "i": sub => /*#__PURE__*/_react.default.createElement("i", null, sub)
      })), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        onClick: this.upgradeRoom,
        kind: "primary"
      }, isSpace ? (0, _languageHandler._t)("Upgrade this space to the recommended room version") : (0, _languageHandler._t)("Upgrade this room to the recommended room version")));
    }

    let oldRoomLink;

    if (this.state.oldRoomId) {
      let copy;

      if (isSpace) {
        copy = (0, _languageHandler._t)("View older version of %(spaceName)s.", {
          spaceName: room.name
        });
      } else {
        copy = (0, _languageHandler._t)("View older messages in %(roomName)s.", {
          roomName: room.name
        });
      }

      oldRoomLink = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        element: "a",
        onClick: this.onOldRoomClicked
      }, copy);
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_heading"
    }, (0, _languageHandler._t)("Advanced")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section mx_SettingsTab_subsectionText"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, room?.isSpaceRoom() ? (0, _languageHandler._t)("Space information") : (0, _languageHandler._t)("Room information")), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("Internal room ID")), /*#__PURE__*/_react.default.createElement(_CopyableText.default, {
      getTextToCopy: () => this.props.roomId
    }, this.props.roomId)), unfederatableSection), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section mx_SettingsTab_subsectionText"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Room version")), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("Room version:")), "\xA0", room.getVersion()), oldRoomLink, roomUpgradeButton));
  }

}

exports.default = AdvancedRoomSettingsTab;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,