"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ExistingSpellCheckLanguage = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _SpellCheckLanguagesDropdown = _interopRequireDefault(require("../../../components/views/elements/SpellCheckLanguagesDropdown"));

var _AccessibleButton = _interopRequireDefault(require("../../../components/views/elements/AccessibleButton"));

var _languageHandler = require("../../../languageHandler");

/*
Copyright 2021 Å imon Brandner <simon.bra.ag@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class ExistingSpellCheckLanguage extends _react.default.Component {
  constructor() {
    super(...arguments);
    (0, _defineProperty2.default)(this, "onRemove", e => {
      e.stopPropagation();
      e.preventDefault();
      return this.props.onRemoved(this.props.language);
    });
  }

  render() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ExistingSpellCheckLanguage"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_ExistingSpellCheckLanguage_language"
    }, this.props.language), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onRemove,
      kind: "danger_sm"
    }, (0, _languageHandler._t)("Remove")));
  }

}

exports.ExistingSpellCheckLanguage = ExistingSpellCheckLanguage;

class SpellCheckLanguages extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onRemoved", language => {
      const languages = this.props.languages.filter(e => e !== language);
      this.props.onLanguagesChange(languages);
    });
    (0, _defineProperty2.default)(this, "onAddClick", e => {
      e.stopPropagation();
      e.preventDefault();
      const language = this.state.newLanguage;
      this.setState({
        newLanguage: ""
      });
      if (!language) return;
      if (this.props.languages.includes(language)) return;
      this.props.languages.push(language);
      this.props.onLanguagesChange(this.props.languages);
    });
    (0, _defineProperty2.default)(this, "onNewLanguageChange", language => {
      if (this.state.newLanguage === language) return;
      this.setState({
        newLanguage: language
      });
    });
    this.state = {
      newLanguage: ""
    };
  }

  render() {
    const existingSpellCheckLanguages = this.props.languages.map(e => {
      return /*#__PURE__*/_react.default.createElement(ExistingSpellCheckLanguage, {
        language: e,
        onRemoved: this.onRemoved,
        key: e
      });
    });

    const addButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onAddClick,
      kind: "primary"
    }, (0, _languageHandler._t)("Add"));

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SpellCheckLanguages"
    }, existingSpellCheckLanguages, /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: this.onAddClick,
      noValidate: true
    }, /*#__PURE__*/_react.default.createElement(_SpellCheckLanguagesDropdown.default, {
      className: "mx_GeneralUserSettingsTab_spellCheckLanguageInput",
      value: this.state.newLanguage,
      onOptionChange: this.onNewLanguageChange
    }), addButton));
  }

}

exports.default = SpellCheckLanguages;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,