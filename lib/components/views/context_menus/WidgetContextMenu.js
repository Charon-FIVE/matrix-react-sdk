"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _matrixWidgetApi = require("matrix-widget-api");

var _logger = require("matrix-js-sdk/src/logger");

var _IconizedContextMenu = _interopRequireWildcard(require("./IconizedContextMenu"));

var _ContextMenu = require("../../structures/ContextMenu");

var _languageHandler = require("../../../languageHandler");

var _WidgetUtils = _interopRequireDefault(require("../../../utils/WidgetUtils"));

var _WidgetMessagingStore = require("../../../stores/widgets/WidgetMessagingStore");

var _RoomContext = _interopRequireDefault(require("../../../contexts/RoomContext"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _QuestionDialog = _interopRequireDefault(require("../dialogs/QuestionDialog"));

var _ErrorDialog = _interopRequireDefault(require("../dialogs/ErrorDialog"));

var _WidgetType = require("../../../widgets/WidgetType");

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _WidgetLayoutStore = require("../../../stores/widgets/WidgetLayoutStore");

var _Livestream = require("../../../Livestream");

const _excluded = ["onFinished", "app", "userWidget", "onDeleteClick", "onEditClick", "showUnpin"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const WidgetContextMenu = _ref => {
  let {
    onFinished,
    app,
    userWidget,
    onDeleteClick,
    onEditClick,
    showUnpin
  } = _ref,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  const cli = (0, _react.useContext)(_MatrixClientContext.default);
  const {
    room,
    roomId
  } = (0, _react.useContext)(_RoomContext.default);

  const widgetMessaging = _WidgetMessagingStore.WidgetMessagingStore.instance.getMessagingForUid(_WidgetUtils.default.getWidgetUid(app));

  const canModify = userWidget || _WidgetUtils.default.canUserModifyWidgets(roomId);

  let streamAudioStreamButton;

  if ((0, _Livestream.getConfigLivestreamUrl)() && _WidgetType.WidgetType.JITSI.matches(app.type)) {
    const onStreamAudioClick = async () => {
      try {
        await (0, _Livestream.startJitsiAudioLivestream)(widgetMessaging, roomId);
      } catch (err) {
        _logger.logger.error("Failed to start livestream", err); // XXX: won't i18n well, but looks like widget api only support 'message'?


        const message = err.message || (0, _languageHandler._t)("Unable to start audio streaming.");

        _Modal.default.createDialog(_ErrorDialog.default, {
          title: (0, _languageHandler._t)('Failed to start livestream'),
          description: message
        });
      }

      onFinished();
    };

    streamAudioStreamButton = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      onClick: onStreamAudioClick,
      label: (0, _languageHandler._t)("Start audio stream")
    });
  }

  const pinnedWidgets = _WidgetLayoutStore.WidgetLayoutStore.instance.getContainerWidgets(room, _WidgetLayoutStore.Container.Top);

  const widgetIndex = pinnedWidgets.findIndex(widget => widget.id === app.id);
  let editButton;

  if (canModify && _WidgetUtils.default.isManagedByManager(app)) {
    const _onEditClick = () => {
      if (onEditClick) {
        onEditClick();
      } else {
        _WidgetUtils.default.editWidget(room, app);
      }

      onFinished();
    };

    editButton = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      onClick: _onEditClick,
      label: (0, _languageHandler._t)("Edit")
    });
  }

  let snapshotButton;

  const screenshotsEnabled = _SettingsStore.default.getValue("enableWidgetScreenshots");

  if (screenshotsEnabled && widgetMessaging?.hasCapability(_matrixWidgetApi.MatrixCapabilities.Screenshots)) {
    const onSnapshotClick = () => {
      widgetMessaging?.takeScreenshot().then(data => {
        _dispatcher.default.dispatch({
          action: 'picture_snapshot',
          file: data.screenshot
        });
      }).catch(err => {
        _logger.logger.error("Failed to take screenshot: ", err);
      });
      onFinished();
    };

    snapshotButton = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      onClick: onSnapshotClick,
      label: (0, _languageHandler._t)("Take a picture")
    });
  }

  let deleteButton;

  if (onDeleteClick || canModify) {
    const _onDeleteClick = () => {
      if (onDeleteClick) {
        onDeleteClick();
      } else {
        // Show delete confirmation dialog
        _Modal.default.createDialog(_QuestionDialog.default, {
          title: (0, _languageHandler._t)("Delete Widget"),
          description: (0, _languageHandler._t)("Deleting a widget removes it for all users in this room." + " Are you sure you want to delete this widget?"),
          button: (0, _languageHandler._t)("Delete widget"),
          onFinished: confirmed => {
            if (!confirmed) return;

            _WidgetUtils.default.setRoomWidget(roomId, app.id);
          }
        });
      }

      onFinished();
    };

    deleteButton = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      onClick: _onDeleteClick,
      label: userWidget ? (0, _languageHandler._t)("Remove") : (0, _languageHandler._t)("Remove for everyone")
    });
  }

  let isAllowedWidget = _SettingsStore.default.getValue("allowedWidgets", roomId)[app.eventId];

  if (isAllowedWidget === undefined) {
    isAllowedWidget = app.creatorUserId === cli.getUserId();
  }

  const isLocalWidget = _WidgetType.WidgetType.JITSI.matches(app.type);

  let revokeButton;

  if (!userWidget && !isLocalWidget && isAllowedWidget) {
    const onRevokeClick = () => {
      _logger.logger.info("Revoking permission for widget to load: " + app.eventId);

      const current = _SettingsStore.default.getValue("allowedWidgets", roomId);

      current[app.eventId] = false;

      const level = _SettingsStore.default.firstSupportedLevel("allowedWidgets");

      _SettingsStore.default.setValue("allowedWidgets", roomId, level, current).catch(err => {
        _logger.logger.error(err); // We don't really need to do anything about this - the user will just hit the button again.

      });

      onFinished();
    };

    revokeButton = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      onClick: onRevokeClick,
      label: (0, _languageHandler._t)("Revoke permissions")
    });
  }

  let moveLeftButton;

  if (showUnpin && widgetIndex > 0) {
    const onClick = () => {
      _WidgetLayoutStore.WidgetLayoutStore.instance.moveWithinContainer(room, _WidgetLayoutStore.Container.Top, app, -1);

      onFinished();
    };

    moveLeftButton = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      onClick: onClick,
      label: (0, _languageHandler._t)("Move left")
    });
  }

  let moveRightButton;

  if (showUnpin && widgetIndex < pinnedWidgets.length - 1) {
    const onClick = () => {
      _WidgetLayoutStore.WidgetLayoutStore.instance.moveWithinContainer(room, _WidgetLayoutStore.Container.Top, app, 1);

      onFinished();
    };

    moveRightButton = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      onClick: onClick,
      label: (0, _languageHandler._t)("Move right")
    });
  }

  return /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.default, (0, _extends2.default)({}, props, {
    chevronFace: _ContextMenu.ChevronFace.None,
    onFinished: onFinished
  }), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOptionList, null, streamAudioStreamButton, editButton, revokeButton, deleteButton, snapshotButton, moveLeftButton, moveRightButton));
};

var _default = WidgetContextMenu;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,