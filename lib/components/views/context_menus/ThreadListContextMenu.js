"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _actions = require("../../../dispatcher/actions");

var _strings = require("../../../utils/strings");

var _ContextMenu = require("../../structures/ContextMenu");

var _languageHandler = require("../../../languageHandler");

var _IconizedContextMenu = _interopRequireWildcard(require("./IconizedContextMenu"));

var _WidgetLayoutStore = require("../../../stores/widgets/WidgetLayoutStore");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

const _excluded = ["mxEvent", "permalinkCreator", "onMenuToggle"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const contextMenuBelow = elementRect => {
  // align the context menu's icons with the icon which opened the context menu
  const left = elementRect.left + window.scrollX + elementRect.width;
  const top = elementRect.bottom + window.scrollY;
  const chevronFace = _ContextMenu.ChevronFace.None;
  return {
    left,
    top,
    chevronFace
  };
};

const ThreadListContextMenu = _ref => {
  let {
    mxEvent,
    permalinkCreator,
    onMenuToggle
  } = _ref,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  const [menuDisplayed, button, openMenu, closeThreadOptions] = (0, _ContextMenu.useContextMenu)();
  const viewInRoom = (0, _react.useCallback)(evt => {
    evt.preventDefault();
    evt.stopPropagation();

    _dispatcher.default.dispatch({
      action: _actions.Action.ViewRoom,
      event_id: mxEvent.getId(),
      highlighted: true,
      room_id: mxEvent.getRoomId(),
      metricsTrigger: undefined // room doesn't change

    });

    closeThreadOptions();
  }, [mxEvent, closeThreadOptions]);
  const copyLinkToThread = (0, _react.useCallback)(async evt => {
    evt.preventDefault();
    evt.stopPropagation();
    const matrixToUrl = permalinkCreator.forEvent(mxEvent.getId());
    await (0, _strings.copyPlaintext)(matrixToUrl);
    closeThreadOptions();
  }, [mxEvent, closeThreadOptions, permalinkCreator]);
  (0, _react.useEffect)(() => {
    onMenuToggle?.(menuDisplayed);
  }, [menuDisplayed, onMenuToggle]);
  const isMainSplitTimelineShown = !_WidgetLayoutStore.WidgetLayoutStore.instance.hasMaximisedWidget(_MatrixClientPeg.MatrixClientPeg.get().getRoom(mxEvent.getRoomId()));
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ContextMenu.ContextMenuTooltipButton, (0, _extends2.default)({}, props, {
    className: "mx_BaseCard_header_title_button--option",
    onClick: openMenu,
    title: (0, _languageHandler._t)("Thread options"),
    isExpanded: menuDisplayed,
    inputRef: button
  })), menuDisplayed && /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.default, (0, _extends2.default)({
    onFinished: closeThreadOptions,
    className: "mx_RoomTile_contextMenu",
    compact: true,
    rightAligned: true
  }, contextMenuBelow(button.current.getBoundingClientRect())), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOptionList, null, isMainSplitTimelineShown && /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
    onClick: e => viewInRoom(e),
    label: (0, _languageHandler._t)("View in room"),
    iconClassName: "mx_ThreadPanel_viewInRoom"
  }), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
    onClick: e => copyLinkToThread(e),
    label: (0, _languageHandler._t)("Copy link to thread"),
    iconClassName: "mx_ThreadPanel_copyLinkToThread"
  }))));
};

var _default = ThreadListContextMenu;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,