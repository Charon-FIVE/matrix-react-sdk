"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _event = require("matrix-js-sdk/src/@types/event");

var _IconizedContextMenu = _interopRequireWildcard(require("./IconizedContextMenu"));

var _languageHandler = require("../../../languageHandler");

var _space = require("../../../utils/space");

var _leaveBehaviour = require("../../../utils/leave-behaviour");

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _BetaCard = require("../beta/BetaCard");

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _actions = require("../../../dispatcher/actions");

var _UIComponents = require("../../../customisations/helpers/UIComponents");

var _UIFeature = require("../../../settings/UIFeature");

var _PosthogTrackers = _interopRequireDefault(require("../../../PosthogTrackers"));

const _excluded = ["space", "hideHeader", "onFinished"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const SpaceContextMenu = _ref => {
  let {
    space,
    hideHeader,
    onFinished
  } = _ref,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  const cli = (0, _react.useContext)(_MatrixClientContext.default);
  const userId = cli.getUserId();
  let inviteOption;

  if (space.getJoinRule() === "public" || space.canInvite(userId)) {
    const onInviteClick = ev => {
      ev.preventDefault();
      ev.stopPropagation();
      (0, _space.showSpaceInvite)(space);
      onFinished();
    };

    inviteOption = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      "data-test-id": "invite-option",
      className: "mx_SpacePanel_contextMenu_inviteButton",
      iconClassName: "mx_SpacePanel_iconInvite",
      label: (0, _languageHandler._t)("Invite"),
      onClick: onInviteClick
    });
  }

  let settingsOption;
  let leaveOption;

  if ((0, _space.shouldShowSpaceSettings)(space)) {
    const onSettingsClick = ev => {
      ev.preventDefault();
      ev.stopPropagation();
      (0, _space.showSpaceSettings)(space);
      onFinished();
    };

    settingsOption = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      "data-test-id": "settings-option",
      iconClassName: "mx_SpacePanel_iconSettings",
      label: (0, _languageHandler._t)("Settings"),
      onClick: onSettingsClick
    });
  } else {
    const onLeaveClick = ev => {
      ev.preventDefault();
      ev.stopPropagation();
      (0, _leaveBehaviour.leaveSpace)(space);
      onFinished();
    };

    leaveOption = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      "data-test-id": "leave-option",
      iconClassName: "mx_SpacePanel_iconLeave",
      className: "mx_IconizedContextMenu_option_red",
      label: (0, _languageHandler._t)("Leave space"),
      onClick: onLeaveClick
    });
  }

  let devtoolsOption;

  if (_SettingsStore.default.getValue("developerMode")) {
    const onViewTimelineClick = ev => {
      ev.preventDefault();
      ev.stopPropagation();

      _dispatcher.default.dispatch({
        action: _actions.Action.ViewRoom,
        room_id: space.roomId,
        forceTimeline: true,
        metricsTrigger: undefined // room doesn't change

      });

      onFinished();
    };

    devtoolsOption = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      iconClassName: "mx_SpacePanel_iconSettings",
      label: (0, _languageHandler._t)("See room timeline (devtools)"),
      onClick: onViewTimelineClick
    });
  }

  const hasPermissionToAddSpaceChild = space.currentState.maySendStateEvent(_event.EventType.SpaceChild, userId);
  const canAddRooms = hasPermissionToAddSpaceChild && (0, _UIComponents.shouldShowComponent)(_UIFeature.UIComponent.CreateRooms);

  const canAddVideoRooms = canAddRooms && _SettingsStore.default.getValue("feature_video_rooms");

  const canAddSubSpaces = hasPermissionToAddSpaceChild && (0, _UIComponents.shouldShowComponent)(_UIFeature.UIComponent.CreateSpaces);
  let newRoomSection;

  if (canAddRooms || canAddSubSpaces) {
    const onNewRoomClick = ev => {
      ev.preventDefault();
      ev.stopPropagation();

      _PosthogTrackers.default.trackInteraction("WebSpaceContextMenuNewRoomItem", ev);

      (0, _space.showCreateNewRoom)(space);
      onFinished();
    };

    const onNewVideoRoomClick = ev => {
      ev.preventDefault();
      ev.stopPropagation();
      (0, _space.showCreateNewRoom)(space, _event.RoomType.ElementVideo);
      onFinished();
    };

    const onNewSubspaceClick = ev => {
      ev.preventDefault();
      ev.stopPropagation();
      (0, _space.showCreateNewSubspace)(space);
      onFinished();
    };

    newRoomSection = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      "data-test-id": "add-to-space-header",
      className: "mx_SpacePanel_contextMenu_separatorLabel"
    }, (0, _languageHandler._t)("Add")), canAddRooms && /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      "data-test-id": "new-room-option",
      iconClassName: "mx_SpacePanel_iconPlus",
      label: (0, _languageHandler._t)("Room"),
      onClick: onNewRoomClick
    }), canAddVideoRooms && /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      "data-test-id": "new-video-room-option",
      iconClassName: "mx_SpacePanel_iconPlus",
      label: (0, _languageHandler._t)("Video room"),
      onClick: onNewVideoRoomClick
    }, /*#__PURE__*/_react.default.createElement(_BetaCard.BetaPill, null)), canAddSubSpaces && /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      "data-test-id": "new-subspace-option",
      iconClassName: "mx_SpacePanel_iconPlus",
      label: (0, _languageHandler._t)("Space"),
      onClick: onNewSubspaceClick
    }, /*#__PURE__*/_react.default.createElement(_BetaCard.BetaPill, null)));
  }

  const onPreferencesClick = ev => {
    ev.preventDefault();
    ev.stopPropagation();
    (0, _space.showSpacePreferences)(space);
    onFinished();
  };

  const openSpace = ev => {
    ev.preventDefault();
    ev.stopPropagation();

    _dispatcher.default.dispatch({
      action: _actions.Action.ViewRoom,
      room_id: space.roomId,
      metricsTrigger: undefined // other

    });

    onFinished();
  };

  const onExploreRoomsClick = ev => {
    _PosthogTrackers.default.trackInteraction("WebSpaceContextMenuExploreRoomsItem", ev);

    openSpace(ev);
  };

  const onHomeClick = ev => {
    _PosthogTrackers.default.trackInteraction("WebSpaceContextMenuHomeItem", ev);

    openSpace(ev);
  };

  return /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.default, (0, _extends2.default)({}, props, {
    onFinished: onFinished,
    className: "mx_SpacePanel_contextMenu",
    compact: true
  }), !hideHeader && /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpacePanel_contextMenu_header"
  }, space.name), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOptionList, {
    first: true
  }, /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
    iconClassName: "mx_SpacePanel_iconHome",
    label: (0, _languageHandler._t)("Space home"),
    onClick: onHomeClick
  }), inviteOption, /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
    iconClassName: "mx_SpacePanel_iconExplore",
    label: canAddRooms ? (0, _languageHandler._t)("Manage & explore rooms") : (0, _languageHandler._t)("Explore rooms"),
    onClick: onExploreRoomsClick
  }), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
    iconClassName: "mx_SpacePanel_iconPreferences",
    label: (0, _languageHandler._t)("Preferences"),
    onClick: onPreferencesClick
  }), settingsOption, leaveOption, devtoolsOption, newRoomSection));
};

var _default = SpaceContextMenu;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,