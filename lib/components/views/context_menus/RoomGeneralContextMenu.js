"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RoomGeneralContextMenu = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _logger = require("matrix-js-sdk/src/logger");

var _react = _interopRequireWildcard(require("react"));

var _KeyboardShortcuts = require("../../../accessibility/KeyboardShortcuts");

var _RoomListActions = _interopRequireDefault(require("../../../actions/RoomListActions"));

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _useEventEmitter = require("../../../hooks/useEventEmitter");

var _KeyBindingsManager = require("../../../KeyBindingsManager");

var _languageHandler = require("../../../languageHandler");

var _models = require("../../../stores/room-list/models");

var _RoomListStore = _interopRequireWildcard(require("../../../stores/room-list/RoomListStore"));

var _DMRoomMap = _interopRequireDefault(require("../../../utils/DMRoomMap"));

var _IconizedContextMenu = _interopRequireWildcard(require("../context_menus/IconizedContextMenu"));

const _excluded = ["room", "onFinished", "onPostFavoriteClick", "onPostLowPriorityClick", "onPostInviteClick", "onPostCopyLinkClick", "onPostSettingsClick", "onPostLeaveClick", "onPostForgetClick"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const RoomGeneralContextMenu = _ref => {
  let {
    room,
    onFinished,
    onPostFavoriteClick,
    onPostLowPriorityClick,
    onPostInviteClick,
    onPostCopyLinkClick,
    onPostSettingsClick,
    onPostLeaveClick,
    onPostForgetClick
  } = _ref,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  const cli = (0, _react.useContext)(_MatrixClientContext.default);
  const roomTags = (0, _useEventEmitter.useEventEmitterState)(_RoomListStore.default.instance, _RoomListStore.LISTS_UPDATE_EVENT, () => _RoomListStore.default.instance.getTagsForRoom(room));

  const isDm = _DMRoomMap.default.shared().getUserIdForRoomId(room.roomId);

  const wrapHandler = function (handler, postHandler) {
    let persistent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    return ev => {
      ev.preventDefault();
      ev.stopPropagation();
      handler(ev);
      const action = (0, _KeyBindingsManager.getKeyBindingsManager)().getAccessibilityAction(ev);

      if (!persistent || action === _KeyboardShortcuts.KeyBindingAction.Enter) {
        onFinished();
      }

      postHandler?.(ev);
    };
  };

  const onTagRoom = (ev, tagId) => {
    if (tagId === _models.DefaultTagID.Favourite || tagId === _models.DefaultTagID.LowPriority) {
      const inverseTag = tagId === _models.DefaultTagID.Favourite ? _models.DefaultTagID.LowPriority : _models.DefaultTagID.Favourite;

      const isApplied = _RoomListStore.default.instance.getTagsForRoom(room).includes(tagId);

      const removeTag = isApplied ? tagId : inverseTag;
      const addTag = isApplied ? null : tagId;

      _dispatcher.default.dispatch(_RoomListActions.default.tagRoom(cli, room, removeTag, addTag, undefined, 0));
    } else {
      _logger.logger.warn(`Unexpected tag ${tagId} applied to ${room.roomId}`);
    }
  };

  const isFavorite = roomTags.includes(_models.DefaultTagID.Favourite);

  const favoriteOption = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuCheckbox, {
    onClick: wrapHandler(ev => onTagRoom(ev, _models.DefaultTagID.Favourite), onPostFavoriteClick, true),
    active: isFavorite,
    label: isFavorite ? (0, _languageHandler._t)("Favourited") : (0, _languageHandler._t)("Favourite"),
    iconClassName: "mx_RoomGeneralContextMenu_iconStar"
  });

  const isLowPriority = roomTags.includes(_models.DefaultTagID.LowPriority);

  const lowPriorityOption = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuCheckbox, {
    onClick: wrapHandler(ev => onTagRoom(ev, _models.DefaultTagID.LowPriority), onPostLowPriorityClick, true),
    active: isLowPriority,
    label: (0, _languageHandler._t)("Low Priority"),
    iconClassName: "mx_RoomGeneralContextMenu_iconArrowDown"
  });

  let inviteOption;

  if (room.canInvite(cli.getUserId()) && !isDm) {
    inviteOption = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      onClick: wrapHandler(() => _dispatcher.default.dispatch({
        action: "view_invite",
        roomId: room.roomId
      }), onPostInviteClick),
      label: (0, _languageHandler._t)("Invite"),
      iconClassName: "mx_RoomGeneralContextMenu_iconInvite"
    });
  }

  let copyLinkOption;

  if (!isDm) {
    copyLinkOption = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      onClick: wrapHandler(() => _dispatcher.default.dispatch({
        action: "copy_room",
        room_id: room.roomId
      }), onPostCopyLinkClick),
      label: (0, _languageHandler._t)("Copy room link"),
      iconClassName: "mx_RoomGeneralContextMenu_iconCopyLink"
    });
  }

  const settingsOption = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
    onClick: wrapHandler(() => _dispatcher.default.dispatch({
      action: "open_room_settings",
      room_id: room.roomId
    }), onPostSettingsClick),
    label: (0, _languageHandler._t)("Settings"),
    iconClassName: "mx_RoomGeneralContextMenu_iconSettings"
  });

  let leaveOption;

  if (roomTags.includes(_models.DefaultTagID.Archived)) {
    leaveOption = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      iconClassName: "mx_RoomGeneralContextMenu_iconSignOut",
      label: (0, _languageHandler._t)("Forget Room"),
      className: "mx_IconizedContextMenu_option_red",
      onClick: wrapHandler(() => _dispatcher.default.dispatch({
        action: "forget_room",
        room_id: room.roomId
      }), onPostForgetClick)
    });
  } else {
    leaveOption = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      onClick: wrapHandler(() => _dispatcher.default.dispatch({
        action: "leave_room",
        room_id: room.roomId
      }), onPostLeaveClick),
      label: (0, _languageHandler._t)("Leave"),
      className: "mx_IconizedContextMenu_option_red",
      iconClassName: "mx_RoomGeneralContextMenu_iconSignOut"
    });
  }

  return /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.default, (0, _extends2.default)({}, props, {
    onFinished: onFinished,
    className: "mx_RoomGeneralContextMenu",
    compact: true
  }), !roomTags.includes(_models.DefaultTagID.Archived) && /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOptionList, null, favoriteOption, lowPriorityOption, inviteOption, copyLinkOption, settingsOption), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOptionList, {
    red: true
  }, leaveOption));
};

exports.RoomGeneralContextMenu = RoomGeneralContextMenu;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,