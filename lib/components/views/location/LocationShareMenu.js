"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _ContextMenu = _interopRequireDefault(require("../../structures/ContextMenu"));

var _LocationPicker = _interopRequireDefault(require("./LocationPicker"));

var _shareLocation = require("./shareLocation");

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _ShareDialogButtons = _interopRequireDefault(require("./ShareDialogButtons"));

var _ShareType = _interopRequireDefault(require("./ShareType"));

var _OwnProfileStore = require("../../../stores/OwnProfileStore");

var _EnableLiveShare = require("./EnableLiveShare");

var _useSettings = require("../../../hooks/useSettings");

var _SettingLevel = require("../../../settings/SettingLevel");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2022 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const getEnabledShareTypes = relation => {
  const enabledShareTypes = [_shareLocation.LocationShareType.Own]; // live locations cannot have a relation
  // hide the option when composer has a relation

  if (!relation) {
    enabledShareTypes.push(_shareLocation.LocationShareType.Live);
  }

  enabledShareTypes.push(_shareLocation.LocationShareType.Pin);
  return enabledShareTypes;
};

const LocationShareMenu = _ref => {
  let {
    menuPosition,
    onFinished,
    sender,
    roomId,
    openMenu,
    relation
  } = _ref;
  const matrixClient = (0, _react.useContext)(_MatrixClientContext.default);
  const enabledShareTypes = getEnabledShareTypes(relation);
  const isLiveShareEnabled = (0, _useSettings.useFeatureEnabled)("feature_location_share_live");
  const multipleShareTypesEnabled = enabledShareTypes.length > 1;
  const [shareType, setShareType] = (0, _react.useState)(multipleShareTypesEnabled ? undefined : _shareLocation.LocationShareType.Own);
  const displayName = _OwnProfileStore.OwnProfileStore.instance.displayName;
  const onLocationSubmit = shareType === _shareLocation.LocationShareType.Live ? (0, _shareLocation.shareLiveLocation)(matrixClient, roomId, displayName, openMenu) : (0, _shareLocation.shareLocation)(matrixClient, roomId, shareType, relation, openMenu);

  const onLiveShareEnableSubmit = () => {
    _SettingsStore.default.setValue("feature_location_share_live", undefined, _SettingLevel.SettingLevel.DEVICE, true);
  };

  const shouldAdvertiseLiveLabsFlag = shareType === _shareLocation.LocationShareType.Live && !isLiveShareEnabled;
  return /*#__PURE__*/_react.default.createElement(_ContextMenu.default, (0, _extends2.default)({}, menuPosition, {
    onFinished: onFinished,
    managed: false
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_LocationShareMenu"
  }, shouldAdvertiseLiveLabsFlag && /*#__PURE__*/_react.default.createElement(_EnableLiveShare.EnableLiveShare, {
    onSubmit: onLiveShareEnableSubmit
  }), !shouldAdvertiseLiveLabsFlag && !!shareType && /*#__PURE__*/_react.default.createElement(_LocationPicker.default, {
    sender: sender,
    shareType: shareType,
    onChoose: onLocationSubmit,
    onFinished: onFinished
  }), !shareType && /*#__PURE__*/_react.default.createElement(_ShareType.default, {
    setShareType: setShareType,
    enabledShareTypes: enabledShareTypes
  }), /*#__PURE__*/_react.default.createElement(_ShareDialogButtons.default, {
    displayBack: !!shareType && multipleShareTypesEnabled,
    onBack: () => setShareType(undefined),
    onCancel: onFinished
  })));
};

var _default = LocationShareMenu;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZXRFbmFibGVkU2hhcmVUeXBlcyIsInJlbGF0aW9uIiwiZW5hYmxlZFNoYXJlVHlwZXMiLCJMb2NhdGlvblNoYXJlVHlwZSIsIk93biIsInB1c2giLCJMaXZlIiwiUGluIiwiTG9jYXRpb25TaGFyZU1lbnUiLCJtZW51UG9zaXRpb24iLCJvbkZpbmlzaGVkIiwic2VuZGVyIiwicm9vbUlkIiwib3Blbk1lbnUiLCJtYXRyaXhDbGllbnQiLCJ1c2VDb250ZXh0IiwiTWF0cml4Q2xpZW50Q29udGV4dCIsImlzTGl2ZVNoYXJlRW5hYmxlZCIsInVzZUZlYXR1cmVFbmFibGVkIiwibXVsdGlwbGVTaGFyZVR5cGVzRW5hYmxlZCIsImxlbmd0aCIsInNoYXJlVHlwZSIsInNldFNoYXJlVHlwZSIsInVzZVN0YXRlIiwidW5kZWZpbmVkIiwiZGlzcGxheU5hbWUiLCJPd25Qcm9maWxlU3RvcmUiLCJpbnN0YW5jZSIsIm9uTG9jYXRpb25TdWJtaXQiLCJzaGFyZUxpdmVMb2NhdGlvbiIsInNoYXJlTG9jYXRpb24iLCJvbkxpdmVTaGFyZUVuYWJsZVN1Ym1pdCIsIlNldHRpbmdzU3RvcmUiLCJzZXRWYWx1ZSIsIlNldHRpbmdMZXZlbCIsIkRFVklDRSIsInNob3VsZEFkdmVydGlzZUxpdmVMYWJzRmxhZyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2xvY2F0aW9uL0xvY2F0aW9uU2hhcmVNZW51LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMjIgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgUmVhY3QsIHsgU3ludGhldGljRXZlbnQsIHVzZUNvbnRleHQsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUm9vbSB9IGZyb20gJ21hdHJpeC1qcy1zZGsvc3JjL21vZGVscy9yb29tJztcbmltcG9ydCB7IElFdmVudFJlbGF0aW9uIH0gZnJvbSAnbWF0cml4LWpzLXNkay9zcmMvbW9kZWxzL2V2ZW50JztcblxuaW1wb3J0IE1hdHJpeENsaWVudENvbnRleHQgZnJvbSAnLi4vLi4vLi4vY29udGV4dHMvTWF0cml4Q2xpZW50Q29udGV4dCc7XG5pbXBvcnQgQ29udGV4dE1lbnUsIHsgQWJvdmVMZWZ0T2YgfSBmcm9tICcuLi8uLi9zdHJ1Y3R1cmVzL0NvbnRleHRNZW51JztcbmltcG9ydCBMb2NhdGlvblBpY2tlciwgeyBJTG9jYXRpb25QaWNrZXJQcm9wcyB9IGZyb20gXCIuL0xvY2F0aW9uUGlja2VyXCI7XG5pbXBvcnQgeyBzaGFyZUxpdmVMb2NhdGlvbiwgc2hhcmVMb2NhdGlvbiwgTG9jYXRpb25TaGFyZVR5cGUgfSBmcm9tICcuL3NoYXJlTG9jYXRpb24nO1xuaW1wb3J0IFNldHRpbmdzU3RvcmUgZnJvbSAnLi4vLi4vLi4vc2V0dGluZ3MvU2V0dGluZ3NTdG9yZSc7XG5pbXBvcnQgU2hhcmVEaWFsb2dCdXR0b25zIGZyb20gJy4vU2hhcmVEaWFsb2dCdXR0b25zJztcbmltcG9ydCBTaGFyZVR5cGUgZnJvbSAnLi9TaGFyZVR5cGUnO1xuaW1wb3J0IHsgT3duUHJvZmlsZVN0b3JlIH0gZnJvbSAnLi4vLi4vLi4vc3RvcmVzL093blByb2ZpbGVTdG9yZSc7XG5pbXBvcnQgeyBFbmFibGVMaXZlU2hhcmUgfSBmcm9tICcuL0VuYWJsZUxpdmVTaGFyZSc7XG5pbXBvcnQgeyB1c2VGZWF0dXJlRW5hYmxlZCB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZVNldHRpbmdzJztcbmltcG9ydCB7IFNldHRpbmdMZXZlbCB9IGZyb20gJy4uLy4uLy4uL3NldHRpbmdzL1NldHRpbmdMZXZlbCc7XG5cbnR5cGUgUHJvcHMgPSBPbWl0PElMb2NhdGlvblBpY2tlclByb3BzLCAnb25DaG9vc2UnIHwgJ3NoYXJlVHlwZSc+ICYge1xuICAgIG9uRmluaXNoZWQ6IChldj86IFN5bnRoZXRpY0V2ZW50KSA9PiB2b2lkO1xuICAgIG1lbnVQb3NpdGlvbjogQWJvdmVMZWZ0T2Y7XG4gICAgb3Blbk1lbnU6ICgpID0+IHZvaWQ7XG4gICAgcm9vbUlkOiBSb29tW1wicm9vbUlkXCJdO1xuICAgIHJlbGF0aW9uPzogSUV2ZW50UmVsYXRpb247XG59O1xuXG5jb25zdCBnZXRFbmFibGVkU2hhcmVUeXBlcyA9IChyZWxhdGlvbik6IExvY2F0aW9uU2hhcmVUeXBlW10gPT4ge1xuICAgIGNvbnN0IGVuYWJsZWRTaGFyZVR5cGVzID0gW1xuICAgICAgICBMb2NhdGlvblNoYXJlVHlwZS5Pd24sXG4gICAgXTtcblxuICAgIC8vIGxpdmUgbG9jYXRpb25zIGNhbm5vdCBoYXZlIGEgcmVsYXRpb25cbiAgICAvLyBoaWRlIHRoZSBvcHRpb24gd2hlbiBjb21wb3NlciBoYXMgYSByZWxhdGlvblxuICAgIGlmICghcmVsYXRpb24pIHtcbiAgICAgICAgZW5hYmxlZFNoYXJlVHlwZXMucHVzaChMb2NhdGlvblNoYXJlVHlwZS5MaXZlKTtcbiAgICB9XG5cbiAgICBlbmFibGVkU2hhcmVUeXBlcy5wdXNoKExvY2F0aW9uU2hhcmVUeXBlLlBpbik7XG5cbiAgICByZXR1cm4gZW5hYmxlZFNoYXJlVHlwZXM7XG59O1xuXG5jb25zdCBMb2NhdGlvblNoYXJlTWVudTogUmVhY3QuRkM8UHJvcHM+ID0gKHtcbiAgICBtZW51UG9zaXRpb24sXG4gICAgb25GaW5pc2hlZCxcbiAgICBzZW5kZXIsXG4gICAgcm9vbUlkLFxuICAgIG9wZW5NZW51LFxuICAgIHJlbGF0aW9uLFxufSkgPT4ge1xuICAgIGNvbnN0IG1hdHJpeENsaWVudCA9IHVzZUNvbnRleHQoTWF0cml4Q2xpZW50Q29udGV4dCk7XG4gICAgY29uc3QgZW5hYmxlZFNoYXJlVHlwZXMgPSBnZXRFbmFibGVkU2hhcmVUeXBlcyhyZWxhdGlvbik7XG4gICAgY29uc3QgaXNMaXZlU2hhcmVFbmFibGVkID0gdXNlRmVhdHVyZUVuYWJsZWQoXCJmZWF0dXJlX2xvY2F0aW9uX3NoYXJlX2xpdmVcIik7XG5cbiAgICBjb25zdCBtdWx0aXBsZVNoYXJlVHlwZXNFbmFibGVkID0gZW5hYmxlZFNoYXJlVHlwZXMubGVuZ3RoID4gMTtcblxuICAgIGNvbnN0IFtzaGFyZVR5cGUsIHNldFNoYXJlVHlwZV0gPSB1c2VTdGF0ZTxMb2NhdGlvblNoYXJlVHlwZSB8IHVuZGVmaW5lZD4oXG4gICAgICAgIG11bHRpcGxlU2hhcmVUeXBlc0VuYWJsZWQgPyB1bmRlZmluZWQgOiBMb2NhdGlvblNoYXJlVHlwZS5Pd24sXG4gICAgKTtcblxuICAgIGNvbnN0IGRpc3BsYXlOYW1lID0gT3duUHJvZmlsZVN0b3JlLmluc3RhbmNlLmRpc3BsYXlOYW1lO1xuXG4gICAgY29uc3Qgb25Mb2NhdGlvblN1Ym1pdCA9IHNoYXJlVHlwZSA9PT0gTG9jYXRpb25TaGFyZVR5cGUuTGl2ZSA/XG4gICAgICAgIHNoYXJlTGl2ZUxvY2F0aW9uKG1hdHJpeENsaWVudCwgcm9vbUlkLCBkaXNwbGF5TmFtZSwgb3Blbk1lbnUpIDpcbiAgICAgICAgc2hhcmVMb2NhdGlvbihtYXRyaXhDbGllbnQsIHJvb21JZCwgc2hhcmVUeXBlLCByZWxhdGlvbiwgb3Blbk1lbnUpO1xuXG4gICAgY29uc3Qgb25MaXZlU2hhcmVFbmFibGVTdWJtaXQgPSAoKSA9PiB7XG4gICAgICAgIFNldHRpbmdzU3RvcmUuc2V0VmFsdWUoXCJmZWF0dXJlX2xvY2F0aW9uX3NoYXJlX2xpdmVcIiwgdW5kZWZpbmVkLCBTZXR0aW5nTGV2ZWwuREVWSUNFLCB0cnVlKTtcbiAgICB9O1xuXG4gICAgY29uc3Qgc2hvdWxkQWR2ZXJ0aXNlTGl2ZUxhYnNGbGFnID0gc2hhcmVUeXBlID09PSBMb2NhdGlvblNoYXJlVHlwZS5MaXZlICYmICFpc0xpdmVTaGFyZUVuYWJsZWQ7XG5cbiAgICByZXR1cm4gPENvbnRleHRNZW51XG4gICAgICAgIHsuLi5tZW51UG9zaXRpb259XG4gICAgICAgIG9uRmluaXNoZWQ9e29uRmluaXNoZWR9XG4gICAgICAgIG1hbmFnZWQ9e2ZhbHNlfVxuICAgID5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9Mb2NhdGlvblNoYXJlTWVudVwiPlxuICAgICAgICAgICAgeyBzaG91bGRBZHZlcnRpc2VMaXZlTGFic0ZsYWcgJiZcbiAgICAgICAgICAgICAgICA8RW5hYmxlTGl2ZVNoYXJlXG4gICAgICAgICAgICAgICAgICAgIG9uU3VibWl0PXtvbkxpdmVTaGFyZUVuYWJsZVN1Ym1pdH1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeyAhc2hvdWxkQWR2ZXJ0aXNlTGl2ZUxhYnNGbGFnICYmICEhc2hhcmVUeXBlICYmXG4gICAgICAgICAgICAgICAgPExvY2F0aW9uUGlja2VyXG4gICAgICAgICAgICAgICAgICAgIHNlbmRlcj17c2VuZGVyfVxuICAgICAgICAgICAgICAgICAgICBzaGFyZVR5cGU9e3NoYXJlVHlwZX1cbiAgICAgICAgICAgICAgICAgICAgb25DaG9vc2U9e29uTG9jYXRpb25TdWJtaXR9XG4gICAgICAgICAgICAgICAgICAgIG9uRmluaXNoZWQ9e29uRmluaXNoZWR9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHsgIXNoYXJlVHlwZSAmJlxuICAgICAgICAgICAgICAgIDxTaGFyZVR5cGUgc2V0U2hhcmVUeXBlPXtzZXRTaGFyZVR5cGV9IGVuYWJsZWRTaGFyZVR5cGVzPXtlbmFibGVkU2hhcmVUeXBlc30gLz5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDxTaGFyZURpYWxvZ0J1dHRvbnMgZGlzcGxheUJhY2s9eyEhc2hhcmVUeXBlICYmIG11bHRpcGxlU2hhcmVUeXBlc0VuYWJsZWR9IG9uQmFjaz17KCkgPT4gc2V0U2hhcmVUeXBlKHVuZGVmaW5lZCl9IG9uQ2FuY2VsPXtvbkZpbmlzaGVkfSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L0NvbnRleHRNZW51Pjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IExvY2F0aW9uU2hhcmVNZW51O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWdCQTs7QUFJQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7O0FBOUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQTBCQSxNQUFNQSxvQkFBb0IsR0FBSUMsUUFBRCxJQUFtQztFQUM1RCxNQUFNQyxpQkFBaUIsR0FBRyxDQUN0QkMsZ0NBQUEsQ0FBa0JDLEdBREksQ0FBMUIsQ0FENEQsQ0FLNUQ7RUFDQTs7RUFDQSxJQUFJLENBQUNILFFBQUwsRUFBZTtJQUNYQyxpQkFBaUIsQ0FBQ0csSUFBbEIsQ0FBdUJGLGdDQUFBLENBQWtCRyxJQUF6QztFQUNIOztFQUVESixpQkFBaUIsQ0FB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