"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _InteractiveAuth = _interopRequireWildcard(require("../../structures/InteractiveAuth"));

var _InteractiveAuthEntryComponents = require("../auth/InteractiveAuthEntryComponents");

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2016 OpenMarket Ltd
Copyright 2017 Vector Creations Ltd
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class InteractiveAuthDialog extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onAuthFinished", (success, result) => {
      if (success) {
        this.props.onFinished(true, result);
      } else {
        if (result === _InteractiveAuth.ERROR_USER_CANCELLED) {
          this.props.onFinished(false, null);
        } else {
          this.setState({
            authError: result
          });
        }
      }
    });
    (0, _defineProperty2.default)(this, "onUpdateStagePhase", (newStage, newPhase) => {
      // We copy the stage and stage phase params into state for title selection in render()
      this.setState({
        uiaStage: newStage,
        uiaStagePhase: newPhase
      });
    });
    (0, _defineProperty2.default)(this, "onDismissClick", () => {
      this.props.onFinished(false);
    });
    this.state = {
      authError: null,
      // See _onUpdateStagePhase()
      uiaStage: null,
      uiaStagePhase: null
    };
  }

  getDefaultDialogAesthetics() {
    const ssoAesthetics = {
      [_InteractiveAuthEntryComponents.SSOAuthEntry.PHASE_PREAUTH]: {
        title: (0, _languageHandler._t)("Use Single Sign On to continue"),
        body: (0, _languageHandler._t)("To continue, use Single Sign On to prove your identity."),
        continueText: (0, _languageHandler._t)("Single Sign On"),
        continueKind: "primary"
      },
      [_InteractiveAuthEntryComponents.SSOAuthEntry.PHASE_POSTAUTH]: {
        title: (0, _languageHandler._t)("Confirm to continue"),
        body: (0, _languageHandler._t)("Click the button below to confirm your identity."),
        continueText: (0, _languageHandler._t)("Confirm"),
        continueKind: "primary"
      }
    };
    return {
      [_InteractiveAuthEntryComponents.SSOAuthEntry.LOGIN_TYPE]: ssoAesthetics,
      [_InteractiveAuthEntryComponents.SSOAuthEntry.UNSTABLE_LOGIN_TYPE]: ssoAesthetics
    };
  }

  render() {
    // Let's pick a title, body, and other params text that we'll show to the user. The order
    // is most specific first, so stagePhase > our props > defaults.
    let title = this.state.authError ? 'Error' : this.props.title || (0, _languageHandler._t)('Authentication');
    let body = this.state.authError ? null : this.props.body;
    let continueText = null;
    let continueKind = null;
    const dialogAesthetics = this.props.aestheticsForStagePhases || this.getDefaultDialogAesthetics();

    if (!this.state.authError && dialogAesthetics) {
      if (dialogAesthetics[this.state.uiaStage]) {
        const aesthetics = dialogAesthetics[this.state.uiaStage][this.state.uiaStagePhase];
        if (aesthetics && aesthetics.title) title = aesthetics.title;
        if (aesthetics && aesthetics.body) body = aesthetics.body;
        if (aesthetics && aesthetics.continueText) continueText = aesthetics.continueText;
        if (aesthetics && aesthetics.continueKind) continueKind = aesthetics.continueKind;
      }
    }

    let content;

    if (this.state.authError) {
      content = /*#__PURE__*/_react.default.createElement("div", {
        id: "mx_Dialog_content"
      }, /*#__PURE__*/_react.default.createElement("div", {
        role: "alert"
      }, this.state.authError.message || this.state.authError.toString()), /*#__PURE__*/_react.default.createElement("br", null), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        onClick: this.onDismissClick,
        className: "mx_GeneralButton",
        autoFocus: true
      }, (0, _languageHandler._t)("Dismiss")));
    } else {
      content = /*#__PURE__*/_react.default.createElement("div", {
        id: "mx_Dialog_content"
      }, body, /*#__PURE__*/_react.default.createElement(_InteractiveAuth.default, {
        matrixClient: this.props.matrixClient,
        authData: this.props.authData,
        makeRequest: this.props.makeRequest,
        onAuthFinished: this.onAuthFinished,
        onStagePhaseChange: this.onUpdateStagePhase,
        continueText: continueText,
        continueKind: continueKind
      }));
    }

    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_InteractiveAuthDialog",
      onFinished: this.props.onFinished,
      title: title,
      contentId: "mx_Dialog_content"
    }, content);
  }

}

exports.default = InteractiveAuthDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,