"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _event = require("matrix-js-sdk/src/@types/event");

var _partials = require("matrix-js-sdk/src/@types/partials");

var _languageHandler = require("../../../languageHandler");

var _SdkConfig = _interopRequireDefault(require("../../../SdkConfig"));

var _LabelledToggleSwitch = _interopRequireDefault(require("../elements/LabelledToggleSwitch"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _BugReportDialog = _interopRequireDefault(require("./BugReportDialog"));

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _DialogButtons = _interopRequireDefault(require("../elements/DialogButtons"));

var _ProgressBar = _interopRequireDefault(require("../elements/ProgressBar"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

/*
Copyright 2019 - 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class RoomUpgradeWarningDialog extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "isPrivate", void 0);
    (0, _defineProperty2.default)(this, "currentVersion", void 0);
    (0, _defineProperty2.default)(this, "onProgressCallback", (progressText, progress, total) => {
      this.setState({
        progressText,
        progress,
        total
      });
    });
    (0, _defineProperty2.default)(this, "onContinue", () => {
      const opts = {
        continue: true,
        invite: this.isPrivate && this.state.inviteUsersToNewRoom
      };

      if (this.props.doUpgrade) {
        this.props.doUpgrade(opts, this.onProgressCallback).then(() => {
          this.props.onFinished(opts);
        });
      } else {
        this.props.onFinished(opts);
      }
    });
    (0, _defineProperty2.default)(this, "onCancel", () => {
      this.props.onFinished({
        continue: false,
        invite: false
      });
    });
    (0, _defineProperty2.default)(this, "onInviteUsersToggle", inviteUsersToNewRoom => {
      this.setState({
        inviteUsersToNewRoom
      });
    });
    (0, _defineProperty2.default)(this, "openBugReportDialog", e => {
      e.preventDefault();
      e.stopPropagation();

      _Modal.default.createDialog(_BugReportDialog.default, {});
    });

    const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(this.props.roomId);

    const joinRules = room?.currentState.getStateEvents(_event.EventType.RoomJoinRules, "");
    this.isPrivate = joinRules?.getContent()['join_rule'] !== _partials.JoinRule.Public ?? true;
    this.currentVersion = room?.getVersion();
    this.state = {
      inviteUsersToNewRoom: true
    };
  }

  render() {
    const brand = _SdkConfig.default.get().brand;

    let inviteToggle = null;

    if (this.isPrivate) {
      inviteToggle = /*#__PURE__*/_react.default.createElement(_LabelledToggleSwitch.default, {
        value: this.state.inviteUsersToNewRoom,
        onChange: this.onInviteUsersToggle,
        label: (0, _languageHandler._t)("Automatically invite members from this room to the new one")
      });
    }

    const title = this.isPrivate ? (0, _languageHandler._t)("Upgrade private room") : (0, _languageHandler._t)("Upgrade public room");

    let bugReports = /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("This usually only affects how the room is processed on the server. If you're " + "having problems with your %(brand)s, please report a bug.", {
      brand
    }));

    if (_SdkConfig.default.get().bug_report_endpoint_url) {
      bugReports = /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("This usually only affects how the room is processed on the server. If you're " + "having problems with your %(brand)s, please <a>report a bug</a>.", {
        brand
      }, {
        "a": sub => {
          return /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
            kind: "link_inline",
            onClick: this.openBugReportDialog
          }, sub);
        }
      }));
    }

    let footer;

    if (this.state.progressText) {
      footer = /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_RoomUpgradeWarningDialog_progress"
      }, /*#__PURE__*/_react.default.createElement(_ProgressBar.default, {
        value: this.state.progress,
        max: this.state.total
      }), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_RoomUpgradeWarningDialog_progressText"
      }, this.state.progressText));
    } else {
      footer = /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
        primaryButton: (0, _languageHandler._t)("Upgrade"),
        onPrimaryButtonClick: this.onContinue,
        cancelButton: (0, _languageHandler._t)("Cancel"),
        onCancel: this.onCancel
      });
    }

    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_RoomUpgradeWarningDialog",
      hasCancel: true,
      fixedWidth: false,
      onFinished: this.props.onFinished,
      title: title
    }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, this.props.description || (0, _languageHandler._t)("Upgrading a room is an advanced action and is usually recommended when a room " + "is unstable due to bugs, missing features or security vulnerabilities.")), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("<b>Please note upgrading will make a new version of the room</b>. " + "All current messages will stay in this archived room.", {}, {
      b: sub => /*#__PURE__*/_react.default.createElement("b", null, sub)
    })), bugReports, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("You'll upgrade this room from <oldVersion /> to <newVersion />.", {}, {
      oldVersion: () => /*#__PURE__*/_react.default.createElement("code", null, this.currentVersion),
      newVersion: () => /*#__PURE__*/_react.default.createElement("code", null, this.props.targetVersion)
    })), inviteToggle), footer);
  }

}

exports.default = RoomUpgradeWarningDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,