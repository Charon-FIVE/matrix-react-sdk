"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _languageHandler = require("../../../languageHandler");

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _EncryptionPanel = _interopRequireDefault(require("../right_panel/EncryptionPanel"));

/*
Copyright 2020-2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class VerificationRequestDialog extends _react.default.Component {
  constructor(props) {
    super(props);
    this.state = {
      verificationRequest: this.props.verificationRequest
    };

    if (this.props.verificationRequestPromise) {
      this.props.verificationRequestPromise.then(r => {
        this.setState({
          verificationRequest: r
        });
      });
    }
  }

  render() {
    const request = this.state.verificationRequest;
    const otherUserId = request && request.otherUserId;

    const member = this.props.member || otherUserId && _MatrixClientPeg.MatrixClientPeg.get().getUser(otherUserId);

    const title = request && request.isSelfVerification ? (0, _languageHandler._t)("Verify other device") : (0, _languageHandler._t)("Verification Request");
    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_InfoDialog",
      onFinished: this.props.onFinished,
      contentId: "mx_Dialog_content",
      title: title,
      hasCancel: true
    }, /*#__PURE__*/_react.default.createElement(_EncryptionPanel.default, {
      layout: "dialog",
      verificationRequest: this.props.verificationRequest,
      verificationRequestPromise: this.props.verificationRequestPromise,
      onClose: this.props.onFinished,
      member: member,
      isRoomEncrypted: false
    }));
  }

}

exports.default = VerificationRequestDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZXJpZmljYXRpb25SZXF1ZXN0RGlhbG9nIiwiUmVhY3QiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwic3RhdGUiLCJ2ZXJpZmljYXRpb25SZXF1ZXN0IiwidmVyaWZpY2F0aW9uUmVxdWVzdFByb21pc2UiLCJ0aGVuIiwiciIsInNldFN0YXRlIiwicmVuZGVyIiwicmVxdWVzdCIsIm90aGVyVXNlcklkIiwibWVtYmVyIiwiTWF0cml4Q2xpZW50UGVnIiwiZ2V0IiwiZ2V0VXNlciIsInRpdGxlIiwiaXNTZWxmVmVyaWZpY2F0aW9uIiwiX3QiLCJvbkZpbmlzaGVkIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvdmlld3MvZGlhbG9ncy9WZXJpZmljYXRpb25SZXF1ZXN0RGlhbG9nLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMjAtMjAyMSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBWZXJpZmljYXRpb25SZXF1ZXN0IH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL2NyeXB0by92ZXJpZmljYXRpb24vcmVxdWVzdC9WZXJpZmljYXRpb25SZXF1ZXN0XCI7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnbWF0cml4LWpzLXNkay9zcmMvbW9kZWxzL3VzZXInO1xuXG5pbXBvcnQgeyBNYXRyaXhDbGllbnRQZWcgfSBmcm9tICcuLi8uLi8uLi9NYXRyaXhDbGllbnRQZWcnO1xuaW1wb3J0IHsgX3QgfSBmcm9tICcuLi8uLi8uLi9sYW5ndWFnZUhhbmRsZXInO1xuaW1wb3J0IEJhc2VEaWFsb2cgZnJvbSBcIi4vQmFzZURpYWxvZ1wiO1xuaW1wb3J0IEVuY3J5cHRpb25QYW5lbCBmcm9tIFwiLi4vcmlnaHRfcGFuZWwvRW5jcnlwdGlvblBhbmVsXCI7XG5cbmludGVyZmFjZSBJUHJvcHMge1xuICAgIHZlcmlmaWNhdGlvblJlcXVlc3Q6IFZlcmlmaWNhdGlvblJlcXVlc3Q7XG4gICAgdmVyaWZpY2F0aW9uUmVxdWVzdFByb21pc2U6IFByb21pc2U8VmVyaWZpY2F0aW9uUmVxdWVzdD47XG4gICAgb25GaW5pc2hlZDogKCkgPT4gdm9pZDtcbiAgICBtZW1iZXI6IFVzZXI7XG59XG5cbmludGVyZmFjZSBJU3RhdGUge1xuICAgIHZlcmlmaWNhdGlvblJlcXVlc3Q6IFZlcmlmaWNhdGlvblJlcXVlc3Q7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZlcmlmaWNhdGlvblJlcXVlc3REaWFsb2cgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzLCBJU3RhdGU+IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICB2ZXJpZmljYXRpb25SZXF1ZXN0OiB0aGlzLnByb3BzLnZlcmlmaWNhdGlvblJlcXVlc3QsXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLnByb3BzLnZlcmlmaWNhdGlvblJlcXVlc3RQcm9taXNlKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLnZlcmlmaWNhdGlvblJlcXVlc3RQcm9taXNlLnRoZW4ociA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHZlcmlmaWNhdGlvblJlcXVlc3Q6IHIgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHRoaXMuc3RhdGUudmVyaWZpY2F0aW9uUmVxdWVzdDtcbiAgICAgICAgY29uc3Qgb3RoZXJVc2VySWQgPSByZXF1ZXN0ICYmIHJlcXVlc3Qub3RoZXJVc2VySWQ7XG4gICAgICAgIGNvbnN0IG1lbWJlciA9IHRoaXMucHJvcHMubWVtYmVyIHx8XG4gICAgICAgICAgICBvdGhlclVzZXJJZCAmJiBNYXRyaXhDbGllbnRQZWcuZ2V0KCkuZ2V0VXNlcihvdGhlclVzZXJJZCk7XG4gICAgICAgIGNvbnN0IHRpdGxlID0gcmVxdWVzdCAmJiByZXF1ZXN0LmlzU2VsZlZlcmlmaWNhdGlvbiA/XG4gICAgICAgICAgICBfdChcIlZlcmlmeSBvdGhlciBkZXZpY2VcIikgOiBfdChcIlZlcmlmaWNhdGlvbiBSZXF1ZXN0XCIpO1xuXG4gICAgICAgIHJldHVybiA8QmFzZURpYWxvZ1xuICAgICAgICAgICAgY2xhc3NOYW1lPVwibXhfSW5mb0RpYWxvZ1wiXG4gICAgICAgICAgICBvbkZpbmlzaGVkPXt0aGlzLnByb3BzLm9uRmluaXNoZWR9XG4gICAgICAgICAgICBjb250ZW50SWQ9XCJteF9EaWFsb2dfY29udGVudFwiXG4gICAgICAgICAgICB0aXRsZT17dGl0bGV9XG4gICAgICAgICAgICBoYXNDYW5jZWw9e3RydWV9XG4gICAgICAgID5cbiAgICAgICAgICAgIDxFbmNyeXB0aW9uUGFuZWxcbiAgICAgICAgICAgICAgICBsYXlvdXQ9XCJkaWFsb2dcIlxuICAgICAgICAgICAgICAgIHZlcmlmaWNhdGlvblJlcXVlc3Q9e3RoaXMucHJvcHMudmVyaWZpY2F0aW9uUmVxdWVzdH1cbiAgICAgICAgICAgICAgICB2ZXJpZmljYXRpb25SZXF1ZXN0UHJvbWlzZT17dGhpcy5wcm9wcy52ZXJpZmljYXRpb25SZXF1ZXN0UHJvbWlzZX1cbiAgICAgICAgICAgICAgICBvbkNsb3NlPXt0aGlzLnByb3BzLm9uRmluaXNoZWR9XG4gICAgICAgICAgICAgICAgbWVtYmVyPXttZW1iZXJ9XG4gICAgICAgICAgICAgICAgaXNSb29tRW5jcnlwdGVkPXtmYWxzZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgIDwvQmFzZURpYWxvZz47XG4gICAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFnQkE7O0FBSUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXNCZSxNQUFNQSx5QkFBTixTQUF3Q0MsY0FBQSxDQUFNQyxTQUE5QyxDQUF3RTtFQUNuRkMsV0FBVyxDQUFDQyxLQUFELEVBQVE7SUFDZixNQUFNQSxLQUFOO0lBQ0EsS0FBS0MsS0FBTCxHQUFhO01BQ1RDLG1CQUFtQixFQUFFLEtBQUtGLEtBQUwsQ0FBV0U7SUFEdkIsQ0FBYjs7SUFHQSxJQUFJLEtBQUtGLEtBQUwsQ0FBV0csMEJBQWYsRUFBMkM7TUFDdkMsS0FBS0gsS0FBTCxDQUFXRywwQkFBWCxDQUFzQ0MsSUFBdEMsQ0FBMkNDLENBQUMsSUFBSTtRQUM1QyxLQUFLQyxRQUFMLENBQWM7VUFBRUosbUJBQW1CLEVBQUVHO1FBQXZCLENBQWQ7TUFDSCxDQUZEO0lBR0g7RUFDSjs7RUFFREUsTUFBTSxHQUFHO0lBQ0wsTUFBTUMsT0FBTyxHQUFHLEtBQUtQLEtBQUwsQ0FBV0MsbUJBQTNCO0lBQ0EsTUFBTU8sV0FBVyxHQUFHRCxPQUFPLElBQUlBLE9BQU8sQ0FBQ0MsV0FBdkM7O0lBQ0EsTUFBTUMsTUFBTSxHQUFHLEtBQUtWLEtBQUwsQ0FBV1UsTUFBWCxJQUNYRCxXQUFXLElBQUlFLGdDQUFBLENBQWdCQyxHQUFoQixHQUFzQkMsT0FBdEIsQ0FBOEJKLFdBQTlCLENBRG5COztJQUVBLE1BQU1LLEtBQUssR0FBR04sT0FBTyxJQUFJQSxPQUFPLENBQUNPLGtCQUFuQixHQUNWLElBQUFDLG1CQUFBLEVBQUcscUJBQUgsQ0FEVSxHQUNrQixJQUFBQSxtQkFBQSxFQUFHLHNCQUFILENBRGhDO0lBR0Esb0JBQU8sNkJBQUMsbUJBQUQ7TUFDSCxTQUFTLEVBQUMsZUFEUDtNQUVILFVBQVUsRUFBRSxLQUFLaEIsS0FBTCxDQUFXaUIsVUFGcEI7TUFHSCxTQUFTLEVBQUMsbUJBSFA7TUFJSCxLQUFLLEVBQUVILEtBSko7TUFLSCxTQUFTLEVBQUU7SUFMUixnQkFPSCw2QkFBQyx3QkFBRDtNQUNJLE1BQU0sRUFBQyxRQURYO01BRUksbUJBQW1CLEVBQUUsS0FBS2QsS0FBTCxDQUFXRSxtQkFGcEM7TUFHSSwwQkFBMEIsRUFBRSxLQUFLRixLQUFMLENBQVdHLDBCQUgzQztNQUlJLE9BQU8sRUFBRSxLQUFLSCxLQUFMLENBQVdpQixVQUp4QjtNQUtJLE1BQU0sRUFBRVAsTUFMWjtNQU1JLGVBQWUsRUFBRTtJQU5yQixFQVBHLENBQVA7RUFnQkg7O0FBckNrRiJ9