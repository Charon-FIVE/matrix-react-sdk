"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _languageHandler = require("../../../languageHandler");

var _MemberAvatar = _interopRequireDefault(require("../avatars/MemberAvatar"));

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _DialogButtons = _interopRequireDefault(require("../elements/DialogButtons"));

var _Field = _interopRequireDefault(require("../elements/Field"));

var _UserIdentifier = _interopRequireDefault(require("../../../customisations/UserIdentifier"));

/*
Copyright 2017 Vector Creations Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/*
 * A dialog for confirming an operation on another user.
 * Takes a user ID and a verb, displays the target user prominently
 * such that it should be easy to confirm that the operation is being
 * performed on the right person, and displays the operation prominently
 * to make it obvious what is going to happen.
 * Also tweaks the style for 'dangerous' actions (albeit only with colour)
 */
class ConfirmUserActionDialog extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onOk", ev => {
      ev.preventDefault();
      this.props.onFinished(true, this.state.reason);
    });
    (0, _defineProperty2.default)(this, "onCancel", () => {
      this.props.onFinished(false);
    });
    (0, _defineProperty2.default)(this, "onReasonChange", ev => {
      this.setState({
        reason: ev.target.value
      });
    });
    this.state = {
      reason: ""
    };
  }

  render() {
    const confirmButtonClass = this.props.danger ? 'danger' : '';
    let reasonBox;

    if (this.props.askReason) {
      reasonBox = /*#__PURE__*/_react.default.createElement("form", {
        onSubmit: this.onOk
      }, /*#__PURE__*/_react.default.createElement(_Field.default, {
        type: "text",
        onChange: this.onReasonChange,
        value: this.state.reason,
        className: "mx_ConfirmUserActionDialog_reasonField",
        label: (0, _languageHandler._t)("Reason"),
        autoFocus: true
      }));
    }

    const avatar = /*#__PURE__*/_react.default.createElement(_MemberAvatar.default, {
      member: this.props.member,
      width: 48,
      height: 48
    });

    const name = this.props.member.name;
    const userId = this.props.member.userId;

    const displayUserIdentifier = _UserIdentifier.default.getDisplayUserIdentifier(userId, {
      roomId: this.props.roomId,
      withDisplayName: true
    });

    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: (0, _classnames.default)("mx_ConfirmUserActionDialog", this.props.className),
      onFinished: this.props.onFinished,
      title: this.props.title,
      contentId: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      id: "mx_Dialog_content",
      className: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ConfirmUserActionDialog_user"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ConfirmUserActionDialog_avatar"
    }, avatar), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ConfirmUserActionDialog_name"
    }, name), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ConfirmUserActionDialog_userId"
    }, displayUserIdentifier)), reasonBox, this.props.children), /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
      primaryButton: this.props.action,
      onPrimaryButtonClick: this.onOk,
      primaryButtonClass: confirmButtonClass,
      focus: !this.props.askReason,
      onCancel: this.onCancel
    }));
  }

}

exports.default = ConfirmUserActionDialog;
(0, _defineProperty2.default)(ConfirmUserActionDialog, "defaultProps", {
  danger: false,
  askReason: false
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,