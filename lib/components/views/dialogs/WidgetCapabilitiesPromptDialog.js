"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _matrixWidgetApi = require("matrix-widget-api");

var _utils = require("matrix-js-sdk/src/utils");

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _languageHandler = require("../../../languageHandler");

var _objects = require("../../../utils/objects");

var _StyledCheckbox = _interopRequireDefault(require("../elements/StyledCheckbox"));

var _DialogButtons = _interopRequireDefault(require("../elements/DialogButtons"));

var _LabelledToggleSwitch = _interopRequireDefault(require("../elements/LabelledToggleSwitch"));

var _CapabilityText = require("../../../widgets/CapabilityText");

/*
Copyright 2020 - 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class WidgetCapabilitiesPromptDialog extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "eventPermissionsMap", new Map());
    (0, _defineProperty2.default)(this, "onToggle", capability => {
      const newStates = (0, _objects.objectShallowClone)(this.state.booleanStates);
      newStates[capability] = !newStates[capability];
      this.setState({
        booleanStates: newStates
      });
    });
    (0, _defineProperty2.default)(this, "onRememberSelectionChange", newVal => {
      this.setState({
        rememberSelection: newVal
      });
    });
    (0, _defineProperty2.default)(this, "onSubmit", async ev => {
      this.closeAndTryRemember(Object.entries(this.state.booleanStates).filter(_ref => {
        let [_, isSelected] = _ref;
        return isSelected;
      }).map(_ref2 => {
        let [cap] = _ref2;
        return cap;
      }));
    });
    (0, _defineProperty2.default)(this, "onReject", async ev => {
      this.closeAndTryRemember([]); // nothing was approved
    });

    const parsedEvents = _matrixWidgetApi.WidgetEventCapability.findEventCapabilities(this.props.requestedCapabilities);

    parsedEvents.forEach(e => this.eventPermissionsMap.set(e.raw, e));
    const states = {};
    this.props.requestedCapabilities.forEach(c => states[c] = true);
    this.state = {
      booleanStates: states,
      rememberSelection: true
    };
  }

  closeAndTryRemember(approved) {
    this.props.onFinished({
      approved,
      remember: this.state.rememberSelection
    });
  }

  render() {
    // We specifically order the timeline capabilities down to the bottom. The capability text
    // generation cares strongly about this.
    const orderedCapabilities = Object.entries(this.state.booleanStates).sort((_ref3, _ref4) => {
      let [capA] = _ref3;
      let [capB] = _ref4;
      const isTimelineA = (0, _matrixWidgetApi.isTimelineCapability)(capA);
      const isTimelineB = (0, _matrixWidgetApi.isTimelineCapability)(capB);
      if (!isTimelineA && !isTimelineB) return (0, _utils.lexicographicCompare)(capA, capB);
      if (isTimelineA && !isTimelineB) return 1;
      if (!isTimelineA && isTimelineB) return -1;
      if (isTimelineA && isTimelineB) return (0, _utils.lexicographicCompare)(capA, capB);
      return 0;
    });
    const checkboxRows = orderedCapabilities.map((_ref5, i) => {
      let [cap, isChecked] = _ref5;

      const text = _CapabilityText.CapabilityText.for(cap, this.props.widgetKind);

      const byline = text.byline ? /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_WidgetCapabilitiesPromptDialog_byline"
      }, text.byline) : null;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_WidgetCapabilitiesPromptDialog_cap",
        key: cap + i
      }, /*#__PURE__*/_react.default.createElement(_StyledCheckbox.default, {
        checked: isChecked,
        onChange: () => this.onToggle(cap)
      }, text.primary), byline);
    });
    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_WidgetCapabilitiesPromptDialog",
      onFinished: this.props.onFinished,
      title: (0, _languageHandler._t)("Approve widget permissions")
    }, /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: this.onSubmit
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "text-muted"
    }, (0, _languageHandler._t)("This widget would like to:")), checkboxRows, /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
      primaryButton: (0, _languageHandler._t)("Approve"),
      cancelButton: (0, _languageHandler._t)("Decline All"),
      onPrimaryButtonClick: this.onSubmit,
      onCancel: this.onReject,
      additive: /*#__PURE__*/_react.default.createElement(_LabelledToggleSwitch.default, {
        value: this.state.rememberSelection,
        toggleInFront: true,
        onChange: this.onRememberSelectionChange,
        label: (0, _languageHandler._t)("Remember my selection for this widget")
      })
    }))));
  }

}

exports.default = WidgetCapabilitiesPromptDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,