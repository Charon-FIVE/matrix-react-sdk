"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _DialogButtons = _interopRequireDefault(require("../elements/DialogButtons"));

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class SeshatResetDialog extends _react.default.PureComponent {
  render() {
    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      hasCancel: true,
      onFinished: this.props.onFinished.bind(null, false),
      title: (0, _languageHandler._t)("Reset event store?")
    }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("You most likely do not want to reset your event index store"), /*#__PURE__*/_react.default.createElement("br", null), (0, _languageHandler._t)("If you do, please note that none of your messages will be deleted, " + "but the search experience might be degraded for a few moments " + "whilst the index is recreated"))), /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
      primaryButton: (0, _languageHandler._t)("Reset event store"),
      onPrimaryButtonClick: this.props.onFinished.bind(null, true),
      primaryButtonClass: "danger",
      cancelButton: (0, _languageHandler._t)("Cancel"),
      onCancel: this.props.onFinished.bind(null, false)
    }));
  }

}

exports.default = SeshatResetDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTZXNoYXRSZXNldERpYWxvZyIsIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsInJlbmRlciIsInByb3BzIiwib25GaW5pc2hlZCIsImJpbmQiLCJfdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2RpYWxvZ3MvU2VzaGF0UmVzZXREaWFsb2cudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IF90IH0gZnJvbSBcIi4uLy4uLy4uL2xhbmd1YWdlSGFuZGxlclwiO1xuaW1wb3J0IEJhc2VEaWFsb2cgZnJvbSBcIi4vQmFzZURpYWxvZ1wiO1xuaW1wb3J0IERpYWxvZ0J1dHRvbnMgZnJvbSBcIi4uL2VsZW1lbnRzL0RpYWxvZ0J1dHRvbnNcIjtcbmltcG9ydCB7IElEaWFsb2dQcm9wcyB9IGZyb20gXCIuL0lEaWFsb2dQcm9wc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZXNoYXRSZXNldERpYWxvZyBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8SURpYWxvZ1Byb3BzPiB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPEJhc2VEaWFsb2dcbiAgICAgICAgICAgICAgICBoYXNDYW5jZWw9e3RydWV9XG4gICAgICAgICAgICAgICAgb25GaW5pc2hlZD17dGhpcy5wcm9wcy5vbkZpbmlzaGVkLmJpbmQobnVsbCwgZmFsc2UpfVxuICAgICAgICAgICAgICAgIHRpdGxlPXtfdChcIlJlc2V0IGV2ZW50IHN0b3JlP1wiKX0+XG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgICAgICB7IF90KFwiWW91IG1vc3QgbGlrZWx5IGRvIG5vdCB3YW50IHRvIHJlc2V0IHlvdXIgZXZlbnQgaW5kZXggc3RvcmVcIikgfVxuICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICB7IF90KFwiSWYgeW91IGRvLCBwbGVhc2Ugbm90ZSB0aGF0IG5vbmUgb2YgeW91ciBtZXNzYWdlcyB3aWxsIGJlIGRlbGV0ZWQsIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImJ1dCB0aGUgc2VhcmNoIGV4cGVyaWVuY2UgbWlnaHQgYmUgZGVncmFkZWQgZm9yIGEgZmV3IG1vbWVudHMgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwid2hpbHN0IHRoZSBpbmRleCBpcyByZWNyZWF0ZWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICkgfVxuICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPERpYWxvZ0J1dHRvbnNcbiAgICAgICAgICAgICAgICAgICAgcHJpbWFyeUJ1dHRvbj17X3QoXCJSZXNldCBldmVudCBzdG9yZVwiKX1cbiAgICAgICAgICAgICAgICAgICAgb25QcmltYXJ5QnV0dG9uQ2xpY2s9e3RoaXMucHJvcHMub25GaW5pc2hlZC5iaW5kKG51bGwsIHRydWUpfVxuICAgICAgICAgICAgICAgICAgICBwcmltYXJ5QnV0dG9uQ2xhc3M9XCJkYW5nZXJcIlxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b249e190KFwiQ2FuY2VsXCIpfVxuICAgICAgICAgICAgICAgICAgICBvbkNhbmNlbD17dGhpcy5wcm9wcy5vbkZpbmlzaGVkLmJpbmQobnVsbCwgZmFsc2UpfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0Jhc2VEaWFsb2c+XG4gICAgICAgICk7XG4gICAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFnQkE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVNlLE1BQU1BLGlCQUFOLFNBQWdDQyxjQUFBLENBQU1DLGFBQXRDLENBQWtFO0VBQzdFQyxNQUFNLEdBQUc7SUFDTCxvQkFDSSw2QkFBQyxtQkFBRDtNQUNJLFNBQVMsRUFBRSxJQURmO01BRUksVUFBVSxFQUFFLEtBQUtDLEtBQUwsQ0FBV0MsVUFBWCxDQUFzQkMsSUFBdEIsQ0FBMkIsSUFBM0IsRUFBaUMsS0FBakMsQ0FGaEI7TUFHSSxLQUFLLEVBQUUsSUFBQUMsbUJBQUEsRUFBRyxvQkFBSDtJQUhYLGdCQUlJLHVEQUNJLHdDQUNNLElBQUFBLG1CQUFBLEVBQUcsNkRBQUgsQ0FETixlQUVJLHdDQUZKLEVBR00sSUFBQUEsbUJBQUEsRUFBRyx3RUFDRCxnRUFEQyxHQUVELCtCQUZGLENBSE4sQ0FESixDQUpKLGVBY0ksNkJBQUMsc0JBQUQ7TUFDSSxhQUFhLEVBQUUsSUFBQUEsbUJBQUEsRUFBRyxtQkFBSCxDQURuQjtNQUVJLG9CQUFvQixFQUFFLEtBQUtILEtBQUwsQ0FBV0MsVUFBWCxDQUFzQkMsSUFBdEIsQ0FBMkIsSUFBM0IsRUFBaUMsSUFBakMsQ0FGMUI7TUFHSSxrQkFBa0IsRUFBQyxRQUh2QjtNQUlJLFlBQVksRUFBRSxJQUFBQyxtQkFBQSxFQUFHLFFBQUgsQ0FKbEI7TUFLSSxRQUFRLEVBQUUsS0FBS0gsS0FBTCxDQUFXQyxVQUFYLENBQXNCQyxJQUF0QixDQUEyQixJQUEzQixFQUFpQyxLQUFqQztJQUxkLEVBZEosQ0FESjtFQXdCSDs7QUExQjRFIn0=