"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _reactFocusLock = _interopRequireDefault(require("react-focus-lock"));

var _classnames = _interopRequireDefault(require("classnames"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _languageHandler = require("../../../languageHandler");

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _Heading = _interopRequireDefault(require("../typography/Heading"));

var _PosthogTrackers = require("../../../PosthogTrackers");

var _KeyBindingsManager = require("../../../KeyBindingsManager");

var _KeyboardShortcuts = require("../../../accessibility/KeyboardShortcuts");

/*
Copyright 2017 Vector Creations Ltd
Copyright 2018, 2019 New Vector Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/*
 * Basic container for modal dialogs.
 *
 * Includes a div for the title, and a keypress handler which cancels the
 * dialog on escape.
 */
class BaseDialog extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "matrixClient", void 0);
    (0, _defineProperty2.default)(this, "onKeyDown", e => {
      if (this.props.onKeyDown) {
        this.props.onKeyDown(e);
      }

      const action = (0, _KeyBindingsManager.getKeyBindingsManager)().getAccessibilityAction(e);

      switch (action) {
        case _KeyboardShortcuts.KeyBindingAction.Escape:
          if (!this.props.hasCancel) break;
          e.stopPropagation();
          e.preventDefault();
          this.props.onFinished(false);
          break;
      }
    });
    (0, _defineProperty2.default)(this, "onCancelClick", e => {
      this.props.onFinished(false);
    });
    this.matrixClient = _MatrixClientPeg.MatrixClientPeg.get();
  }

  render() {
    let cancelButton;

    if (this.props.hasCancel) {
      cancelButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        onClick: this.onCancelClick,
        className: "mx_Dialog_cancelButton",
        "aria-label": (0, _languageHandler._t)("Close dialog")
      });
    }

    let headerImage;

    if (this.props.headerImage) {
      headerImage = /*#__PURE__*/_react.default.createElement("img", {
        className: "mx_Dialog_titleImage",
        src: this.props.headerImage,
        alt: ""
      });
    }

    const lockProps = {
      "onKeyDown": this.onKeyDown,
      "role": "dialog",
      // This should point to a node describing the dialog.
      // If we were about to completely follow this recommendation we'd need to
      // make all the components relying on BaseDialog to be aware of it.
      // So instead we will use the whole content as the description.
      // Description comes first and if the content contains more text,
      // AT users can skip its presentation.
      "aria-describedby": this.props.contentId
    };

    if (this.props["aria-label"]) {
      lockProps["aria-label"] = this.props["aria-label"];
    } else {
      lockProps["aria-labelledby"] = "mx_BaseDialog_title";
    }

    return /*#__PURE__*/_react.default.createElement(_MatrixClientContext.default.Provider, {
      value: this.matrixClient
    }, /*#__PURE__*/_react.default.createElement(_PosthogTrackers.PosthogScreenTracker, {
      screenName: this.props.screenName
    }), /*#__PURE__*/_react.default.createElement(_reactFocusLock.default, {
      returnFocus: true,
      lockProps: lockProps,
      className: (0, _classnames.default)({
        [this.props.className]: true,
        'mx_Dialog_fixedWidth': this.props.fixedWidth
      })
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('mx_Dialog_header', {
        'mx_Dialog_headerWithButton': !!this.props.headerButton,
        'mx_Dialog_headerWithCancel': !!cancelButton
      })
    }, /*#__PURE__*/_react.default.createElement(_Heading.default, {
      size: "h2",
      className: (0, _classnames.default)('mx_Dialog_title', this.props.titleClass),
      id: "mx_BaseDialog_title"
    }, headerImage, this.props.title), this.props.headerButton, cancelButton), this.props.children));
  }

}

exports.default = BaseDialog;
(0, _defineProperty2.default)(BaseDialog, "defaultProps", {
  hasCancel: true,
  fixedWidth: true
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,