"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Option = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

var _RovingTabIndex = require("../../../../accessibility/RovingTabIndex");

var _AccessibleButton = _interopRequireDefault(require("../../elements/AccessibleButton"));

const _excluded = ["inputRef", "children", "endAdornment", "className"];

const Option = _ref => {
  let {
    inputRef,
    children,
    endAdornment,
    className
  } = _ref,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  const [onFocus, isActive, ref] = (0, _RovingTabIndex.useRovingTabIndex)(inputRef);
  return /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, (0, _extends2.default)({}, props, {
    className: (0, _classnames.default)(className, "mx_SpotlightDialog_option"),
    onFocus: onFocus,
    inputRef: ref,
    tabIndex: -1,
    "aria-selected": isActive,
    role: "option"
  }), children, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpotlightDialog_option--endAdornment"
  }, /*#__PURE__*/_react.default.createElement("kbd", {
    className: "mx_SpotlightDialog_enterPrompt",
    "aria-hidden": true
  }, "\u21B5"), endAdornment));
};

exports.Option = Option;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPcHRpb24iLCJpbnB1dFJlZiIsImNoaWxkcmVuIiwiZW5kQWRvcm5tZW50IiwiY2xhc3NOYW1lIiwicHJvcHMiLCJvbkZvY3VzIiwiaXNBY3RpdmUiLCJyZWYiLCJ1c2VSb3ZpbmdUYWJJbmRleCIsImNsYXNzTmFtZXMiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy92aWV3cy9kaWFsb2dzL3Nwb3RsaWdodC9PcHRpb24udHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMiBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBjbGFzc05hbWVzIGZyb20gXCJjbGFzc25hbWVzXCI7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50UHJvcHMsIFJlYWN0Tm9kZSB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgeyBSb3ZpbmdBY2Nlc3NpYmxlQnV0dG9uIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2FjY2Vzc2liaWxpdHkvcm92aW5nL1JvdmluZ0FjY2Vzc2libGVCdXR0b25cIjtcbmltcG9ydCB7IHVzZVJvdmluZ1RhYkluZGV4IH0gZnJvbSBcIi4uLy4uLy4uLy4uL2FjY2Vzc2liaWxpdHkvUm92aW5nVGFiSW5kZXhcIjtcbmltcG9ydCBBY2Nlc3NpYmxlQnV0dG9uIGZyb20gXCIuLi8uLi9lbGVtZW50cy9BY2Nlc3NpYmxlQnV0dG9uXCI7XG5cbmludGVyZmFjZSBPcHRpb25Qcm9wcyBleHRlbmRzIENvbXBvbmVudFByb3BzPHR5cGVvZiBSb3ZpbmdBY2Nlc3NpYmxlQnV0dG9uPiB7XG4gICAgZW5kQWRvcm5tZW50PzogUmVhY3ROb2RlO1xufVxuXG5leHBvcnQgY29uc3QgT3B0aW9uOiBSZWFjdC5GQzxPcHRpb25Qcm9wcz4gPSAoeyBpbnB1dFJlZiwgY2hpbGRyZW4sIGVuZEFkb3JubWVudCwgY2xhc3NOYW1lLCAuLi5wcm9wcyB9KSA9PiB7XG4gICAgY29uc3QgW29uRm9jdXMsIGlzQWN0aXZlLCByZWZdID0gdXNlUm92aW5nVGFiSW5kZXgoaW5wdXRSZWYpO1xuICAgIHJldHVybiA8QWNjZXNzaWJsZUJ1dHRvblxuICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyhjbGFzc05hbWUsIFwibXhfU3BvdGxpZ2h0RGlhbG9nX29wdGlvblwiKX1cbiAgICAgICAgb25Gb2N1cz17b25Gb2N1c31cbiAgICAgICAgaW5wdXRSZWY9e3JlZn1cbiAgICAgICAgdGFiSW5kZXg9ey0xfVxuICAgICAgICBhcmlhLXNlbGVjdGVkPXtpc0FjdGl2ZX1cbiAgICAgICAgcm9sZT1cIm9wdGlvblwiXG4gICAgPlxuICAgICAgICB7IGNoaWxkcmVuIH1cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9TcG90bGlnaHREaWFsb2dfb3B0aW9uLS1lbmRBZG9ybm1lbnRcIj5cbiAgICAgICAgICAgIDxrYmQgY2xhc3NOYW1lPVwibXhfU3BvdGxpZ2h0RGlhbG9nX2VudGVyUHJvbXB0XCIgYXJpYS1oaWRkZW4+4oa1PC9rYmQ+XG4gICAgICAgICAgICB7IGVuZEFkb3JubWVudCB9XG4gICAgICAgIDwvZGl2PlxuICAgIDwvQWNjZXNzaWJsZUJ1dHRvbj47XG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBZ0JBOztBQUNBOztBQUdBOztBQUNBOzs7O0FBTU8sTUFBTUEsTUFBNkIsR0FBRyxRQUErRDtFQUFBLElBQTlEO0lBQUVDLFFBQUY7SUFBWUMsUUFBWjtJQUFzQkMsWUFBdEI7SUFBb0NDO0VBQXBDLENBQThEO0VBQUEsSUFBWkMsS0FBWTtFQUN4RyxNQUFNLENBQUNDLE9BQUQsRUFBVUMsUUFBVixFQUFvQkMsR0FBcEIsSUFBMkIsSUFBQUMsaUNBQUEsRUFBa0JSLFFBQWxCLENBQWpDO0VBQ0Esb0JBQU8sNkJBQUMseUJBQUQsNkJBQ0NJLEtBREQ7SUFFSCxTQUFTLEVBQUUsSUFBQUssbUJBQUEsRUFBV04sU0FBWCxFQUFzQiwyQkFBdEIsQ0FGUjtJQUdILE9BQU8sRUFBRUUsT0FITjtJQUlILFFBQVEsRUFBRUUsR0FKUDtJQUtILFFBQVEsRUFBRSxDQUFDLENBTFI7SUFNSCxpQkFBZUQsUUFOWjtJQU9ILElBQUksRUFBQztFQVBGLElBU0RMLFFBVEMsZUFVSDtJQUFLLFNBQVMsRUFBQztFQUFmLGdCQUNJO0lBQUssU0FBUyxFQUFDLGdDQUFmO0lBQWdEO0VBQWhELFlBREosRUFFTUMsWUFGTixDQVZHLENBQVA7QUFlSCxDQWpCTSJ9