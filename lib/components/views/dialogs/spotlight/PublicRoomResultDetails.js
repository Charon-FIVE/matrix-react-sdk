"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PublicRoomResultDetails = PublicRoomResultDetails;

var _react = _interopRequireDefault(require("react"));

var _HtmlUtils = require("../../../../HtmlUtils");

var _languageHandler = require("../../../../languageHandler");

var _RoomDirectory = require("../../../structures/RoomDirectory");

/*
Copyright 2022 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const MAX_NAME_LENGTH = 80;
const MAX_TOPIC_LENGTH = 800;

function PublicRoomResultDetails(_ref) {
  let {
    room,
    labelId,
    descriptionId,
    detailsId
  } = _ref;
  let name = room.name || (0, _RoomDirectory.getDisplayAliasForRoom)(room) || (0, _languageHandler._t)('Unnamed room');

  if (name.length > MAX_NAME_LENGTH) {
    name = `${name.substring(0, MAX_NAME_LENGTH)}...`;
  }

  let topic = room.topic || ''; // Additional truncation based on line numbers is done via CSS,
  // but to ensure that the DOM is not polluted with a huge string
  // we give it a hard limit before rendering.

  if (topic.length > MAX_TOPIC_LENGTH) {
    topic = `${topic.substring(0, MAX_TOPIC_LENGTH)}...`;
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpotlightDialog_result_publicRoomDetails"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SpotlightDialog_result_publicRoomHeader"
  }, /*#__PURE__*/_react.default.createElement("span", {
    id: labelId,
    className: "mx_SpotlightDialog_result_publicRoomName"
  }, name), /*#__PURE__*/_react.default.createElement("span", {
    id: descriptionId,
    className: "mx_SpotlightDialog_result_publicRoomAlias"
  }, room.canonical_alias ?? room.room_id)), /*#__PURE__*/_react.default.createElement("div", {
    id: detailsId,
    className: "mx_SpotlightDialog_result_publicRoomDescription"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_SpotlightDialog_result_publicRoomMemberCount"
  }, (0, _languageHandler._t)("%(count)s Members", {
    count: room.num_joined_members
  })), topic && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "\xA0\xB7\xA0", /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_SpotlightDialog_result_publicRoomTopic",
    dangerouslySetInnerHTML: {
      __html: (0, _HtmlUtils.linkifyAndSanitizeHtml)(topic)
    }
  }))));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNQVhfTkFNRV9MRU5HVEgiLCJNQVhfVE9QSUNfTEVOR1RIIiwiUHVibGljUm9vbVJlc3VsdERldGFpbHMiLCJyb29tIiwibGFiZWxJZCIsImRlc2NyaXB0aW9uSWQiLCJkZXRhaWxzSWQiLCJuYW1lIiwiZ2V0RGlzcGxheUFsaWFzRm9yUm9vbSIsIl90IiwibGVuZ3RoIiwic3Vic3RyaW5nIiwidG9waWMiLCJjYW5vbmljYWxfYWxpYXMiLCJyb29tX2lkIiwiY291bnQiLCJudW1fam9pbmVkX21lbWJlcnMiLCJfX2h0bWwiLCJsaW5raWZ5QW5kU2FuaXRpemVIdG1sIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvdmlld3MvZGlhbG9ncy9zcG90bGlnaHQvUHVibGljUm9vbVJlc3VsdERldGFpbHMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMiBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IElQdWJsaWNSb29tc0NodW5rUm9vbSB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9tYXRyaXhcIjtcblxuaW1wb3J0IHsgbGlua2lmeUFuZFNhbml0aXplSHRtbCB9IGZyb20gXCIuLi8uLi8uLi8uLi9IdG1sVXRpbHNcIjtcbmltcG9ydCB7IF90IH0gZnJvbSBcIi4uLy4uLy4uLy4uL2xhbmd1YWdlSGFuZGxlclwiO1xuaW1wb3J0IHsgZ2V0RGlzcGxheUFsaWFzRm9yUm9vbSB9IGZyb20gXCIuLi8uLi8uLi9zdHJ1Y3R1cmVzL1Jvb21EaXJlY3RvcnlcIjtcblxuY29uc3QgTUFYX05BTUVfTEVOR1RIID0gODA7XG5jb25zdCBNQVhfVE9QSUNfTEVOR1RIID0gODAwO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICAgIHJvb206IElQdWJsaWNSb29tc0NodW5rUm9vbTtcbiAgICBsYWJlbElkOiBzdHJpbmc7XG4gICAgZGVzY3JpcHRpb25JZDogc3RyaW5nO1xuICAgIGRldGFpbHNJZDogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUHVibGljUm9vbVJlc3VsdERldGFpbHMoeyByb29tLCBsYWJlbElkLCBkZXNjcmlwdGlvbklkLCBkZXRhaWxzSWQgfTogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gICAgbGV0IG5hbWUgPSByb29tLm5hbWUgfHwgZ2V0RGlzcGxheUFsaWFzRm9yUm9vbShyb29tKSB8fCBfdCgnVW5uYW1lZCByb29tJyk7XG4gICAgaWYgKG5hbWUubGVuZ3RoID4gTUFYX05BTUVfTEVOR1RIKSB7XG4gICAgICAgIG5hbWUgPSBgJHtuYW1lLnN1YnN0cmluZygwLCBNQVhfTkFNRV9MRU5HVEgpfS4uLmA7XG4gICAgfVxuXG4gICAgbGV0IHRvcGljID0gcm9vbS50b3BpYyB8fCAnJztcbiAgICAvLyBBZGRpdGlvbmFsIHRydW5jYXRpb24gYmFzZWQgb24gbGluZSBudW1iZXJzIGlzIGRvbmUgdmlhIENTUyxcbiAgICAvLyBidXQgdG8gZW5zdXJlIHRoYXQgdGhlIERPTSBpcyBub3QgcG9sbHV0ZWQgd2l0aCBhIGh1Z2Ugc3RyaW5nXG4gICAgLy8gd2UgZ2l2ZSBpdCBhIGhhcmQgbGltaXQgYmVmb3JlIHJlbmRlcmluZy5cbiAgICBpZiAodG9waWMubGVuZ3RoID4gTUFYX1RPUElDX0xFTkdUSCkge1xuICAgICAgICB0b3BpYyA9IGAke3RvcGljLnN1YnN0cmluZygwLCBNQVhfVE9QSUNfTEVOR1RIKX0uLi5gO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfU3BvdGxpZ2h0RGlhbG9nX3Jlc3VsdF9wdWJsaWNSb29tRGV0YWlsc1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9TcG90bGlnaHREaWFsb2dfcmVzdWx0X3B1YmxpY1Jvb21IZWFkZXJcIj5cbiAgICAgICAgICAgICAgICA8c3BhbiBpZD17bGFiZWxJZH0gY2xhc3NOYW1lPVwibXhfU3BvdGxpZ2h0RGlhbG9nX3Jlc3VsdF9wdWJsaWNSb29tTmFtZVwiPnsgbmFtZSB9PC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuIGlkPXtkZXNjcmlwdGlvbklkfSBjbGFzc05hbWU9XCJteF9TcG90bGlnaHREaWFsb2dfcmVzdWx0X3B1YmxpY1Jvb21BbGlhc1wiPlxuICAgICAgICAgICAgICAgICAgICB7IHJvb20uY2Fub25pY2FsX2FsaWFzID8/IHJvb20ucm9vbV9pZCB9XG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGlkPXtkZXRhaWxzSWR9IGNsYXNzTmFtZT1cIm14X1Nwb3RsaWdodERpYWxvZ19yZXN1bHRfcHVibGljUm9vbURlc2NyaXB0aW9uXCI+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibXhfU3BvdGxpZ2h0RGlhbG9nX3Jlc3VsdF9wdWJsaWNSb29tTWVtYmVyQ291bnRcIj5cbiAgICAgICAgICAgICAgICAgICAgeyBfdChcIiUoY291bnQpcyBNZW1iZXJzXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50OiByb29tLm51bV9qb2luZWRfbWVtYmVycyxcbiAgICAgICAgICAgICAgICAgICAgfSkgfVxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICB7IHRvcGljICYmIChcbiAgICAgICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgICAgICZuYnNwO8K3Jm5ic3A7XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm14X1Nwb3RsaWdodERpYWxvZ19yZXN1bHRfcHVibGljUm9vbVRvcGljXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IGxpbmtpZnlBbmRTYW5pdGl6ZUh0bWwodG9waWMpIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgICApIH1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFnQkE7O0FBR0E7O0FBQ0E7O0FBQ0E7O0FBckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVNBLE1BQU1BLGVBQWUsR0FBRyxFQUF4QjtBQUNBLE1BQU1DLGdCQUFnQixHQUFHLEdBQXpCOztBQVNPLFNBQVNDLHVCQUFULE9BQWtHO0VBQUEsSUFBakU7SUFBRUMsSUFBRjtJQUFRQyxPQUFSO0lBQWlCQyxhQUFqQjtJQUFnQ0M7RUFBaEMsQ0FBaUU7RUFDckcsSUFBSUMsSUFBSSxHQUFHSixJQUFJLENBQUNJLElBQUwsSUFBYSxJQUFBQyxxQ0FBQSxFQUF1QkwsSUFBdkIsQ0FBYixJQUE2QyxJQUFBTSxtQkFBQSxFQUFHLGNBQUgsQ0FBeEQ7O0VBQ0EsSUFBSUYsSUFBSSxDQUFDRyxNQUFMLEdBQWNWLGVBQWxCLEVBQW1DO0lBQy9CTyxJQUFJLEdBQUksR0FBRUEsSUFBSSxDQUFDSSxTQUFMLENBQWUsQ0FBZixFQUFrQlgsZUFBbEIsQ0FBbUMsS0FBN0M7RUFDSDs7RUFFRCxJQUFJWSxLQUFLLEdBQUdULElBQUksQ0FBQ1MsS0FBTCxJQUFjLEVBQTFCLENBTnFHLENBT3JHO0VBQ0E7RUFDQTs7RUFDQSxJQUFJQSxLQUFLLENBQUNGLE1BQU4sR0FBZVQsZ0JBQW5CLEVBQXFDO0lBQ2pDVyxLQUFLLEdBQUksR0FBRUEsS0FBSyxDQUFDRCxTQUFOLENBQWdCLENBQWhCLEVBQW1CVixnQkFBbkIsQ0FBcUMsS0FBaEQ7RUFDSDs7RUFFRCxvQkFDSTtJQUFLLFNBQVMsRUFBQztFQUFmLGdCQUNJO0lBQUssU0FBUyxFQUFDO0VBQWYsZ0JBQ0k7SUFBTSxFQUFFLEVBQUVHLE9BQVY7SUFBbUIsU0FBUyxFQUFDO0VBQTdCLEdBQTBFRyxJQUExRSxDQURKLGVBRUk7SUFBTSxFQUFFLEVBQUVGLGFBQVY7SUFBeUIsU0FBUyxFQUFDO0VBQW5DLEdBQ01GLElBQUksQ0FBQ1UsZUFBTCxJQUF3QlYsSUFBSSxDQUFDVyxPQURuQyxDQUZKLENBREosZUFPSTtJQUFLLEVBQUUsRUFBRVIsU0FBVDtJQUFvQixTQUFTLEVBQUM7RUFBOUIsZ0JBQ0k7SUFBTSxTQUFTLEVBQUM7RUFBaEIsR0FDTSxJQUFBRyxtQkFBQSxFQUFHLG1CQUFILEVBQXdCO0lBQ3RCTSxLQUFLLEVBQUVaLElBQUksQ0FBQ2E7RUFEVSxDQUF4QixDQUROLENBREosRUFNTUosS0FBSyxpQkFDSCx5RkFFSTtJQUNJLFNBQVMsRUFBQywyQ0FEZDtJQUVJLHVCQUF1QixFQUFFO01BQUVLLE1BQU0sRUFBRSxJQUFBQyxpQ0FBQSxFQUF1Qk4sS0FBdkI7SUFBVjtFQUY3QixFQUZKLENBUFIsQ0FQSixDQURKO0FBMEJIIn0=