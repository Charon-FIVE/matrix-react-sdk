"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RoomResultContextMenus = RoomResultContextMenus;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _ContextMenuTooltipButton = require("../../../../accessibility/context_menu/ContextMenuTooltipButton");

var _useRoomNotificationState = require("../../../../hooks/useRoomNotificationState");

var _languageHandler = require("../../../../languageHandler");

var _RoomNotifs = require("../../../../RoomNotifs");

var _RoomGeneralContextMenu = require("../../context_menus/RoomGeneralContextMenu");

var _RoomNotificationContextMenu = require("../../context_menus/RoomNotificationContextMenu");

var _SpaceContextMenu = _interopRequireDefault(require("../../context_menus/SpaceContextMenu"));

var _RoomTile = require("../../rooms/RoomTile");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2021-2022 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
function RoomResultContextMenus(_ref) {
  let {
    room
  } = _ref;
  const [notificationState] = (0, _useRoomNotificationState.useNotificationState)(room);
  const [generalMenuPosition, setGeneralMenuPosition] = (0, _react.useState)(null);
  const [notificationMenuPosition, setNotificationMenuPosition] = (0, _react.useState)(null);
  let generalMenu;

  if (generalMenuPosition !== null) {
    if (room.isSpaceRoom()) {
      generalMenu = /*#__PURE__*/_react.default.createElement(_SpaceContextMenu.default, (0, _extends2.default)({}, (0, _RoomTile.contextMenuBelow)(generalMenuPosition), {
        space: room,
        onFinished: () => setGeneralMenuPosition(null)
      }));
    } else {
      generalMenu = /*#__PURE__*/_react.default.createElement(_RoomGeneralContextMenu.RoomGeneralContextMenu, (0, _extends2.default)({}, (0, _RoomTile.contextMenuBelow)(generalMenuPosition), {
        room: room,
        onFinished: () => setGeneralMenuPosition(null)
      }));
    }
  }

  let notificationMenu;

  if (notificationMenuPosition !== null) {
    notificationMenu = /*#__PURE__*/_react.default.createElement(_RoomNotificationContextMenu.RoomNotificationContextMenu, (0, _extends2.default)({}, (0, _RoomTile.contextMenuBelow)(notificationMenuPosition), {
      room: room,
      onFinished: () => setNotificationMenuPosition(null)
    }));
  }

  const notificationMenuClasses = (0, _classnames.default)("mx_SpotlightDialog_option--notifications", {
    // Show bell icon for the default case too.
    mx_RoomNotificationContextMenu_iconBell: notificationState === _RoomNotifs.RoomNotifState.AllMessages,
    mx_RoomNotificationContextMenu_iconBellDot: notificationState === _RoomNotifs.RoomNotifState.AllMessagesLoud,
    mx_RoomNotificationContextMenu_iconBellMentions: notificationState === _RoomNotifs.RoomNotifState.MentionsOnly,
    mx_RoomNotificationContextMenu_iconBellCrossed: notificationState === _RoomNotifs.RoomNotifState.Mute
  });
  return /*#__PURE__*/_react.default.createElement(_react.Fragment, null, /*#__PURE__*/_react.default.createElement(_ContextMenuTooltipButton.ContextMenuTooltipButton, {
    className: "mx_SpotlightDialog_option--menu",
    onClick: ev => {
      ev.preventDefault();
      ev.stopPropagation();
      const target = ev.target;
      setGeneralMenuPosition(target.getBoundingClientRect());
    },
    title: room.isSpaceRoom() ? (0, _languageHandler._t)("Space options") : (0, _languageHandler._t)("Room options"),
    isExpanded: generalMenuPosition !== null
  }), !room.isSpaceRoom() && /*#__PURE__*/_react.default.createElement(_ContextMenuTooltipButton.ContextMenuTooltipButton, {
    className: notificationMenuClasses,
    onClick: ev => {
      ev.preventDefault();
      ev.stopPropagation();
      const target = ev.target;
      setNotificationMenuPosition(target.getBoundingClientRect());
    },
    title: (0, _languageHandler._t)("Notification options"),
    isExpanded: notificationMenuPosition !== null
  }), generalMenu, notificationMenu);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,