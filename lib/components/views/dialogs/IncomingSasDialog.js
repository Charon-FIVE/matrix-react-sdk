"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _SAS = require("matrix-js-sdk/src/crypto/verification/SAS");

var _Base = require("matrix-js-sdk/src/crypto/verification/Base");

var _logger = require("matrix-js-sdk/src/logger");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _languageHandler = require("../../../languageHandler");

var _Media = require("../../../customisations/Media");

var _VerificationComplete = _interopRequireDefault(require("../verification/VerificationComplete"));

var _VerificationCancelled = _interopRequireDefault(require("../verification/VerificationCancelled"));

var _BaseAvatar = _interopRequireDefault(require("../avatars/BaseAvatar"));

var _Spinner = _interopRequireDefault(require("../elements/Spinner"));

var _VerificationShowSas = _interopRequireDefault(require("../verification/VerificationShowSas"));

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _DialogButtons = _interopRequireDefault(require("../elements/DialogButtons"));

/*
Copyright 2019 New Vector Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const PHASE_START = 0;
const PHASE_SHOW_SAS = 1;
const PHASE_WAIT_FOR_PARTNER_TO_CONFIRM = 2;
const PHASE_VERIFIED = 3;
const PHASE_CANCELLED = 4;

class IncomingSasDialog extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "showSasEvent", void 0);
    (0, _defineProperty2.default)(this, "onFinished", () => {
      this.props.onFinished(this.state.phase === PHASE_VERIFIED);
    });
    (0, _defineProperty2.default)(this, "onCancelClick", () => {
      this.props.onFinished(this.state.phase === PHASE_VERIFIED);
    });
    (0, _defineProperty2.default)(this, "onContinueClick", () => {
      this.setState({
        phase: PHASE_WAIT_FOR_PARTNER_TO_CONFIRM
      });
      this.props.verifier.verify().then(() => {
        this.setState({
          phase: PHASE_VERIFIED
        });
      }).catch(e => {
        _logger.logger.log("Verification failed", e);
      });
    });
    (0, _defineProperty2.default)(this, "onVerifierShowSas", e => {
      this.showSasEvent = e;
      this.setState({
        phase: PHASE_SHOW_SAS,
        sas: e.sas
      });
    });
    (0, _defineProperty2.default)(this, "onVerifierCancel", () => {
      this.setState({
        phase: PHASE_CANCELLED
      });
    });
    (0, _defineProperty2.default)(this, "onSasMatchesClick", () => {
      this.showSasEvent.confirm();
      this.setState({
        phase: PHASE_WAIT_FOR_PARTNER_TO_CONFIRM
      });
    });
    (0, _defineProperty2.default)(this, "onVerifiedDoneClick", () => {
      this.props.onFinished(true);
    });
    let phase = PHASE_START;

    if (this.props.verifier.hasBeenCancelled) {
      _logger.logger.log("Verifier was cancelled in the background.");

      phase = PHASE_CANCELLED;
    }

    this.showSasEvent = null;
    this.state = {
      phase: phase,
      sasVerified: false,
      opponentProfile: null,
      opponentProfileError: null,
      sas: null
    };
    this.props.verifier.on(_SAS.SasEvent.ShowSas, this.onVerifierShowSas);
    this.props.verifier.on(_Base.VerificationEvent.Cancel, this.onVerifierCancel);
    this.fetchOpponentProfile();
  }

  componentWillUnmount() {
    if (this.state.phase !== PHASE_CANCELLED && this.state.phase !== PHASE_VERIFIED) {
      this.props.verifier.cancel(new Error('User cancel'));
    }

    this.props.verifier.removeListener(_SAS.SasEvent.ShowSas, this.onVerifierShowSas);
  }

  async fetchOpponentProfile() {
    try {
      const prof = await _MatrixClientPeg.MatrixClientPeg.get().getProfileInfo(this.props.verifier.userId);
      this.setState({
        opponentProfile: prof
      });
    } catch (e) {
      this.setState({
        opponentProfileError: e
      });
    }
  }

  renderPhaseStart() {
    const isSelf = this.props.verifier.userId === _MatrixClientPeg.MatrixClientPeg.get().getUserId();

    let profile;
    const oppProfile = this.state.opponentProfile;

    if (oppProfile) {
      const url = oppProfile.avatar_url ? (0, _Media.mediaFromMxc)(oppProfile.avatar_url).getSquareThumbnailHttp(48) : null;
      profile = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_IncomingSasDialog_opponentProfile"
      }, /*#__PURE__*/_react.default.createElement(_BaseAvatar.default, {
        name: oppProfile.displayname,
        idName: this.props.verifier.userId,
        url: url,
        width: 48,
        height: 48,
        resizeMethod: "crop"
      }), /*#__PURE__*/_react.default.createElement("h2", null, oppProfile.displayname));
    } else if (this.state.opponentProfileError) {
      profile = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_BaseAvatar.default, {
        name: this.props.verifier.userId.slice(1),
        idName: this.props.verifier.userId,
        width: 48,
        height: 48
      }), /*#__PURE__*/_react.default.createElement("h2", null, this.props.verifier.userId));
    } else {
      profile = /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
    }

    const userDetailText = [/*#__PURE__*/_react.default.createElement("p", {
      key: "p1"
    }, (0, _languageHandler._t)("Verify this user to mark them as trusted. " + "Trusting users gives you extra peace of mind when using " + "end-to-end encrypted messages.")), /*#__PURE__*/_react.default.createElement("p", {
      key: "p2"
    }, (0, _languageHandler._t)( // NB. Below wording adjusted to singular 'session' until we have
    // cross-signing
    "Verifying this user will mark their session as trusted, and " + "also mark your session as trusted to them."))];
    const selfDetailText = [/*#__PURE__*/_react.default.createElement("p", {
      key: "p1"
    }, (0, _languageHandler._t)("Verify this device to mark it as trusted. " + "Trusting this device gives you and other users extra peace of mind when using " + "end-to-end encrypted messages.")), /*#__PURE__*/_react.default.createElement("p", {
      key: "p2"
    }, (0, _languageHandler._t)("Verifying this device will mark it as trusted, and users who have verified with " + "you will trust this device."))];
    return /*#__PURE__*/_react.default.createElement("div", null, profile, isSelf ? selfDetailText : userDetailText, /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
      primaryButton: (0, _languageHandler._t)('Continue'),
      hasCancel: true,
      onPrimaryButtonClick: this.onContinueClick,
      onCancel: this.onCancelClick
    }));
  }

  renderPhaseShowSas() {
    return /*#__PURE__*/_react.default.createElement(_VerificationShowSas.default, {
      sas: this.showSasEvent.sas,
      onCancel: this.onCancelClick,
      onDone: this.onSasMatchesClick,
      isSelf: this.props.verifier.userId === _MatrixClientPeg.MatrixClientPeg.get().getUserId(),
      inDialog: true
    });
  }

  renderPhaseWaitForPartnerToConfirm() {
    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_Spinner.default, null), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Waiting for partner to confirm...")));
  }

  renderPhaseVerified() {
    return /*#__PURE__*/_react.default.createElement(_VerificationComplete.default, {
      onDone: this.onVerifiedDoneClick
    });
  }

  renderPhaseCancelled() {
    return /*#__PURE__*/_react.default.createElement(_VerificationCancelled.default, {
      onDone: this.onCancelClick
    });
  }

  render() {
    let body;

    switch (this.state.phase) {
      case PHASE_START:
        body = this.renderPhaseStart();
        break;

      case PHASE_SHOW_SAS:
        body = this.renderPhaseShowSas();
        break;

      case PHASE_WAIT_FOR_PARTNER_TO_CONFIRM:
        body = this.renderPhaseWaitForPartnerToConfirm();
        break;

      case PHASE_VERIFIED:
        body = this.renderPhaseVerified();
        break;

      case PHASE_CANCELLED:
        body = this.renderPhaseCancelled();
        break;
    }

    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      title: (0, _languageHandler._t)("Incoming Verification Request"),
      onFinished: this.onFinished,
      fixedWidth: false
    }, body);
  }

}

exports.default = IncomingSasDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,