"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ROOM_SECURITY_TAB = exports.ROOM_ROLES_TAB = exports.ROOM_NOTIFICATIONS_TAB = exports.ROOM_GENERAL_TAB = exports.ROOM_BRIDGES_TAB = exports.ROOM_ADVANCED_TAB = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _room = require("matrix-js-sdk/src/models/room");

var _TabbedView = _interopRequireWildcard(require("../../structures/TabbedView"));

var _languageHandler = require("../../../languageHandler");

var _AdvancedRoomSettingsTab = _interopRequireDefault(require("../settings/tabs/room/AdvancedRoomSettingsTab"));

var _RolesRoomSettingsTab = _interopRequireDefault(require("../settings/tabs/room/RolesRoomSettingsTab"));

var _GeneralRoomSettingsTab = _interopRequireDefault(require("../settings/tabs/room/GeneralRoomSettingsTab"));

var _SecurityRoomSettingsTab = _interopRequireDefault(require("../settings/tabs/room/SecurityRoomSettingsTab"));

var _NotificationSettingsTab = _interopRequireDefault(require("../settings/tabs/room/NotificationSettingsTab"));

var _BridgeSettingsTab = _interopRequireDefault(require("../settings/tabs/room/BridgeSettingsTab"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _UIFeature = require("../../../settings/UIFeature");

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _actions = require("../../../dispatcher/actions");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2019 New Vector Ltd
Copyright 2019 Michael Telatynski <7t3chguy@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const ROOM_GENERAL_TAB = "ROOM_GENERAL_TAB";
exports.ROOM_GENERAL_TAB = ROOM_GENERAL_TAB;
const ROOM_SECURITY_TAB = "ROOM_SECURITY_TAB";
exports.ROOM_SECURITY_TAB = ROOM_SECURITY_TAB;
const ROOM_ROLES_TAB = "ROOM_ROLES_TAB";
exports.ROOM_ROLES_TAB = ROOM_ROLES_TAB;
const ROOM_NOTIFICATIONS_TAB = "ROOM_NOTIFICATIONS_TAB";
exports.ROOM_NOTIFICATIONS_TAB = ROOM_NOTIFICATIONS_TAB;
const ROOM_BRIDGES_TAB = "ROOM_BRIDGES_TAB";
exports.ROOM_BRIDGES_TAB = ROOM_BRIDGES_TAB;
const ROOM_ADVANCED_TAB = "ROOM_ADVANCED_TAB";
exports.ROOM_ADVANCED_TAB = ROOM_ADVANCED_TAB;

class RoomSettingsDialog extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "dispatcherRef", void 0);
    (0, _defineProperty2.default)(this, "onAction", payload => {
      // When view changes below us, close the room settings
      // whilst the modal is open this can only be triggered when someone hits Leave Room
      if (payload.action === _actions.Action.ViewHomePage) {
        this.props.onFinished(true);
      }
    });
    (0, _defineProperty2.default)(this, "onRoomName", () => {
      this.setState({
        roomName: _MatrixClientPeg.MatrixClientPeg.get().getRoom(this.props.roomId).name
      });
    });
    this.state = {
      roomName: ''
    };
  }

  componentDidMount() {
    this.dispatcherRef = _dispatcher.default.register(this.onAction);

    _MatrixClientPeg.MatrixClientPeg.get().on(_room.RoomEvent.Name, this.onRoomName);

    this.onRoomName();
  }

  componentWillUnmount() {
    if (this.dispatcherRef) {
      _dispatcher.default.unregister(this.dispatcherRef);
    }

    _MatrixClientPeg.MatrixClientPeg.get().removeListener(_room.RoomEvent.Name, this.onRoomName);
  }

  getTabs() {
    const tabs = [];
    tabs.push(new _TabbedView.Tab(ROOM_GENERAL_TAB, (0, _languageHandler._td)("General"), "mx_RoomSettingsDialog_settingsIcon", /*#__PURE__*/_react.default.createElement(_GeneralRoomSettingsTab.default, {
      roomId: this.props.roomId
    }), "RoomSettingsGeneral"));
    tabs.push(new _TabbedView.Tab(ROOM_SECURITY_TAB, (0, _languageHandler._td)("Security & Privacy"), "mx_RoomSettingsDialog_securityIcon", /*#__PURE__*/_react.default.createElement(_SecurityRoomSettingsTab.default, {
      roomId: this.props.roomId,
      closeSettingsFn: () => this.props.onFinished(true)
    }), "RoomSettingsSecurityPrivacy"));
    tabs.push(new _TabbedView.Tab(ROOM_ROLES_TAB, (0, _languageHandler._td)("Roles & Permissions"), "mx_RoomSettingsDialog_rolesIcon", /*#__PURE__*/_react.default.createElement(_RolesRoomSettingsTab.default, {
      roomId: this.props.roomId
    }), "RoomSettingsRolesPermissions"));
    tabs.push(new _TabbedView.Tab(ROOM_NOTIFICATIONS_TAB, (0, _languageHandler._td)("Notifications"), "mx_RoomSettingsDialog_notificationsIcon", /*#__PURE__*/_react.default.createElement(_NotificationSettingsTab.default, {
      roomId: this.props.roomId,
      closeSettingsFn: () => this.props.onFinished(true)
    }), "RoomSettingsNotifications"));

    if (_SettingsStore.default.getValue("feature_bridge_state")) {
      tabs.push(new _TabbedView.Tab(ROOM_BRIDGES_TAB, (0, _languageHandler._td)("Bridges"), "mx_RoomSettingsDialog_bridgesIcon", /*#__PURE__*/_react.default.createElement(_BridgeSettingsTab.default, {
        roomId: this.props.roomId
      }), "RoomSettingsBridges"));
    }

    if (_SettingsStore.default.getValue(_UIFeature.UIFeature.AdvancedSettings)) {
      tabs.push(new _TabbedView.Tab(ROOM_ADVANCED_TAB, (0, _languageHandler._td)("Advanced"), "mx_RoomSettingsDialog_warningIcon", /*#__PURE__*/_react.default.createElement(_AdvancedRoomSettingsTab.default, {
        roomId: this.props.roomId,
        closeSettingsFn: () => this.props.onFinished(true)
      }), "RoomSettingsAdvanced"));
    }

    return tabs;
  }

  render() {
    const roomName = this.state.roomName;
    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_RoomSettingsDialog",
      hasCancel: true,
      onFinished: this.props.onFinished,
      title: (0, _languageHandler._t)("Room Settings - %(roomName)s", {
        roomName
      })
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsDialog_content"
    }, /*#__PURE__*/_react.default.createElement(_TabbedView.default, {
      tabs: this.getTabs(),
      initialTabId: this.props.initialTabId,
      screenName: "RoomSettings"
    })));
  }

}

exports.default = RoomSettingsDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,