"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _logger = require("matrix-js-sdk/src/logger");

var _languageHandler = require("../../../languageHandler");

var _LabelledToggleSwitch = _interopRequireDefault(require("../elements/LabelledToggleSwitch"));

var _WidgetPermissionStore = require("../../../stores/widgets/WidgetPermissionStore");

var _BaseDialog = _interopRequireDefault(require("./BaseDialog"));

var _DialogButtons = _interopRequireDefault(require("../elements/DialogButtons"));

/*
Copyright 2019 Travis Ralston
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class WidgetOpenIDPermissionsDialog extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onAllow", () => {
      this.onPermissionSelection(true);
    });
    (0, _defineProperty2.default)(this, "onDeny", () => {
      this.onPermissionSelection(false);
    });
    (0, _defineProperty2.default)(this, "onRememberSelectionChange", newVal => {
      this.setState({
        rememberSelection: newVal
      });
    });
    this.state = {
      rememberSelection: false
    };
  }

  onPermissionSelection(allowed) {
    if (this.state.rememberSelection) {
      _logger.logger.log(`Remembering ${this.props.widget.id} as allowed=${allowed} for OpenID`);

      _WidgetPermissionStore.WidgetPermissionStore.instance.setOIDCState(this.props.widget, this.props.widgetKind, this.props.inRoomId, allowed ? _WidgetPermissionStore.OIDCState.Allowed : _WidgetPermissionStore.OIDCState.Denied);
    }

    this.props.onFinished(allowed);
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_WidgetOpenIDPermissionsDialog",
      hasCancel: true,
      onFinished: this.props.onFinished,
      title: (0, _languageHandler._t)("Allow this widget to verify your identity")
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_WidgetOpenIDPermissionsDialog_content"
    }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("The widget will verify your user ID, but won't be able to perform actions for you:")), /*#__PURE__*/_react.default.createElement("p", {
      className: "text-muted"
    }, this.props.widget.templateUrl.split("?")[0].split("#")[0])), /*#__PURE__*/_react.default.createElement(_DialogButtons.default, {
      primaryButton: (0, _languageHandler._t)("Continue"),
      onPrimaryButtonClick: this.onAllow,
      onCancel: this.onDeny,
      additive: /*#__PURE__*/_react.default.createElement(_LabelledToggleSwitch.default, {
        value: this.state.rememberSelection,
        toggleInFront: true,
        onChange: this.onRememberSelectionChange,
        label: (0, _languageHandler._t)("Remember this")
      })
    }));
  }

}

exports.default = WidgetOpenIDPermissionsDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJXaWRnZXRPcGVuSURQZXJtaXNzaW9uc0RpYWxvZyIsIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJvblBlcm1pc3Npb25TZWxlY3Rpb24iLCJuZXdWYWwiLCJzZXRTdGF0ZSIsInJlbWVtYmVyU2VsZWN0aW9uIiwic3RhdGUiLCJhbGxvd2VkIiwibG9nZ2VyIiwibG9nIiwid2lkZ2V0IiwiaWQiLCJXaWRnZXRQZXJtaXNzaW9uU3RvcmUiLCJpbnN0YW5jZSIsInNldE9JRENTdGF0ZSIsIndpZGdldEtpbmQiLCJpblJvb21JZCIsIk9JRENTdGF0ZSIsIkFsbG93ZWQiLCJEZW5pZWQiLCJvbkZpbmlzaGVkIiwicmVuZGVyIiwiX3QiLCJ0ZW1wbGF0ZVVybCIsInNwbGl0Iiwib25BbGxvdyIsIm9uRGVueSIsIm9uUmVtZW1iZXJTZWxlY3Rpb25DaGFuZ2UiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy92aWV3cy9kaWFsb2dzL1dpZGdldE9wZW5JRFBlcm1pc3Npb25zRGlhbG9nLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMTkgVHJhdmlzIFJhbHN0b25cbkNvcHlyaWdodCAyMDIxIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFdpZGdldCwgV2lkZ2V0S2luZCB9IGZyb20gXCJtYXRyaXgtd2lkZ2V0LWFwaVwiO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL2xvZ2dlclwiO1xuXG5pbXBvcnQgeyBfdCB9IGZyb20gXCIuLi8uLi8uLi9sYW5ndWFnZUhhbmRsZXJcIjtcbmltcG9ydCBMYWJlbGxlZFRvZ2dsZVN3aXRjaCBmcm9tIFwiLi4vZWxlbWVudHMvTGFiZWxsZWRUb2dnbGVTd2l0Y2hcIjtcbmltcG9ydCB7IE9JRENTdGF0ZSwgV2lkZ2V0UGVybWlzc2lvblN0b3JlIH0gZnJvbSBcIi4uLy4uLy4uL3N0b3Jlcy93aWRnZXRzL1dpZGdldFBlcm1pc3Npb25TdG9yZVwiO1xuaW1wb3J0IHsgSURpYWxvZ1Byb3BzIH0gZnJvbSBcIi4vSURpYWxvZ1Byb3BzXCI7XG5pbXBvcnQgQmFzZURpYWxvZyBmcm9tIFwiLi9CYXNlRGlhbG9nXCI7XG5pbXBvcnQgRGlhbG9nQnV0dG9ucyBmcm9tIFwiLi4vZWxlbWVudHMvRGlhbG9nQnV0dG9uc1wiO1xuXG5pbnRlcmZhY2UgSVByb3BzIGV4dGVuZHMgSURpYWxvZ1Byb3BzIHtcbiAgICB3aWRnZXQ6IFdpZGdldDtcbiAgICB3aWRnZXRLaW5kOiBXaWRnZXRLaW5kO1xuICAgIGluUm9vbUlkPzogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgSVN0YXRlIHtcbiAgICByZW1lbWJlclNlbGVjdGlvbjogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV2lkZ2V0T3BlbklEUGVybWlzc2lvbnNEaWFsb2cgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PElQcm9wcywgSVN0YXRlPiB7XG4gICAgY29uc3RydWN0b3IocHJvcHM6IElQcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHJlbWVtYmVyU2VsZWN0aW9uOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uQWxsb3cgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgIHRoaXMub25QZXJtaXNzaW9uU2VsZWN0aW9uKHRydWUpO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uRGVueSA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5vblBlcm1pc3Npb25TZWxlY3Rpb24oZmFsc2UpO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uUGVybWlzc2lvblNlbGVjdGlvbihhbGxvd2VkOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnJlbWVtYmVyU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICBsb2dnZXIubG9nKGBSZW1lbWJlcmluZyAke3RoaXMucHJvcHMud2lkZ2V0LmlkfSBhcyBhbGxvd2VkPSR7YWxsb3dlZH0gZm9yIE9wZW5JRGApO1xuXG4gICAgICAgICAgICBXaWRnZXRQZXJtaXNzaW9uU3RvcmUuaW5zdGFuY2Uuc2V0T0lEQ1N0YXRlKFxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMud2lkZ2V0LCB0aGlzLnByb3BzLndpZGdldEtpbmQsIHRoaXMucHJvcHMuaW5Sb29tSWQsXG4gICAgICAgICAgICAgICAgYWxsb3dlZCA/IE9JRENTdGF0ZS5BbGxvd2VkIDogT0lEQ1N0YXRlLkRlbmllZCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnByb3BzLm9uRmluaXNoZWQoYWxsb3dlZCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvblJlbWVtYmVyU2VsZWN0aW9uQ2hhbmdlID0gKG5ld1ZhbDogYm9vbGVhbik6IHZvaWQgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgcmVtZW1iZXJTZWxlY3Rpb246IG5ld1ZhbCB9KTtcbiAgICB9O1xuXG4gICAgcHVibGljIHJlbmRlcigpOiBKU1guRWxlbWVudCB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8QmFzZURpYWxvZ1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0nbXhfV2lkZ2V0T3BlbklEUGVybWlzc2lvbnNEaWFsb2cnXG4gICAgICAgICAgICAgICAgaGFzQ2FuY2VsPXt0cnVlfVxuICAgICAgICAgICAgICAgIG9uRmluaXNoZWQ9e3RoaXMucHJvcHMub25GaW5pc2hlZH1cbiAgICAgICAgICAgICAgICB0aXRsZT17X3QoXCJBbGxvdyB0aGlzIHdpZGdldCB0byB2ZXJpZnkgeW91ciBpZGVudGl0eVwiKX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbXhfV2lkZ2V0T3BlbklEUGVybWlzc2lvbnNEaWFsb2dfY29udGVudCc+XG4gICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgeyBfdChcIlRoZSB3aWRnZXQgd2lsbCB2ZXJpZnkgeW91ciB1c2VyIElELCBidXQgd29uJ3QgYmUgYWJsZSB0byBwZXJmb3JtIGFjdGlvbnMgZm9yIHlvdTpcIikgfVxuICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtbXV0ZWRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsgLyogY2hlYXAgdHJpbSB0byBqdXN0IGdldCB0aGUgcGF0aCAqLyB9XG4gICAgICAgICAgICAgICAgICAgICAgICB7IHRoaXMucHJvcHMud2lkZ2V0LnRlbXBsYXRlVXJsLnNwbGl0KFwiP1wiKVswXS5zcGxpdChcIiNcIilbMF0gfVxuICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPERpYWxvZ0J1dHRvbnNcbiAgICAgICAgICAgICAgICAgICAgcHJpbWFyeUJ1dHRvbj17X3QoXCJDb250aW51ZVwiKX1cbiAgICAgICAgICAgICAgICAgICAgb25QcmltYXJ5QnV0dG9uQ2xpY2s9e3RoaXMub25BbGxvd31cbiAgICAgICAgICAgICAgICAgICAgb25DYW5jZWw9e3RoaXMub25EZW55fVxuICAgICAgICAgICAgICAgICAgICBhZGRpdGl2ZT17XG4gICAgICAgICAgICAgICAgICAgICAgICA8TGFiZWxsZWRUb2dnbGVTd2l0Y2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5yZW1lbWJlclNlbGVjdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGVJbkZyb250PXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uUmVtZW1iZXJTZWxlY3Rpb25DaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e190KFwiUmVtZW1iZXIgdGhpc1wiKX0gLz59XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQmFzZURpYWxvZz5cbiAgICAgICAgKTtcbiAgICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBaUJBOztBQUVBOztBQUVBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQTFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXVCZSxNQUFNQSw2QkFBTixTQUE0Q0MsY0FBQSxDQUFNQyxhQUFsRCxDQUFnRjtFQUMzRkMsV0FBVyxDQUFDQyxLQUFELEVBQWdCO0lBQ3ZCLE1BQU1BLEtBQU47SUFEdUIsK0NBUVQsTUFBWTtNQUMxQixLQUFLQyxxQkFBTCxDQUEyQixJQUEzQjtJQUNILENBVjBCO0lBQUEsOENBWVYsTUFBWTtNQUN6QixLQUFLQSxxQkFBTCxDQUEyQixLQUEzQjtJQUNILENBZDBCO0lBQUEsaUVBNkJVQyxNQUFELElBQTJCO01BQzNELEtBQUtDLFFBQUwsQ0FBYztRQUFFQyxpQkFBaUIsRUFBRUY7TUFBckIsQ0FBZDtJQUNILENBL0IwQjtJQUd2QixLQUFLRyxLQUFMLEdBQWE7TUFDVEQsaUJBQWlCLEVBQUU7SUFEVixDQUFiO0VBR0g7O0VBVU9ILHFCQUFxQixDQUFDSyxPQUFELEVBQXlCO0lBQ2xELElBQUksS0FBS0QsS0FBTCxDQUFXRCxpQkFBZixFQUFrQztNQUM5QkcsY0FBQSxDQUFPQyxHQUFQLENBQVksZUFBYyxLQUFLUixLQUFMLENBQVdTLE1BQVgsQ0FBa0JDLEVBQUcsZUFBY0osT0FBUSxhQUFyRTs7TUFFQUssNENBQUEsQ0FBc0JDLFFBQXRCLENBQStCQyxZQUEvQixDQUNJLEtBQUtiLEtBQUwsQ0FBV1MsTUFEZixFQUN1QixLQUFLVCxLQUFMLENBQVdjLFVBRGxDLEVBQzhDLEtBQUtkLEtBQUwsQ0FBV2UsUUFEekQsRUFFSVQsT0FBTyxHQUFHVSxnQ0FBQSxDQUFVQyxPQUFiLEdBQXVCRCxnQ0FBQSxDQUFVRSxNQUY1QztJQUlIOztJQUVELEtBQUtsQixLQUFMLENBQVdtQixVQUFYLENBQXNCYixPQUF0QjtFQUNIOztFQU1NYyxNQUFNLEdBQWdCO0lBQ3pCLG9CQUNJLDZCQUFDLG1CQUFEO01BQ0ksU0FBUyxFQUFDLGtDQURkO01BRUksU0FBUyxFQUFFLElBRmY7TUFHSSxVQUFVLEVBQUUsS0FBS3BCLEtBQUwsQ0FBV21CLFVBSDNCO01BSUksS0FBSyxFQUFFLElBQUFFLG1CQUFBLEVBQUcsMkNBQUg7SUFKWCxnQkFNSTtNQUFLLFNBQVMsRUFBQztJQUFmLGdCQUNJLHdDQUNNLElBQUFBLG1CQUFBLEVBQUcsb0ZBQUgsQ0FETixDQURKLGVBSUk7TUFBRyxTQUFTLEVBQUM7SUFBYixHQUVNLEtBQUtyQixLQUFMLENBQVdTLE1BQVgsQ0FBa0JhLFdBQWxCLENBQThCQyxLQUE5QixDQUFvQyxHQUFwQyxFQUF5QyxDQUF6QyxFQUE0Q0EsS0FBNUMsQ0FBa0QsR0FBbEQsRUFBdUQsQ0FBdkQsQ0FGTixDQUpKLENBTkosZUFlSSw2QkFBQyxzQkFBRDtNQUNJLGFBQWEsRUFBRSxJQUFBRixtQkFBQSxFQUFHLFVBQUgsQ0FEbkI7TUFFSSxvQkFBb0IsRUFBRSxLQUFLRyxPQUYvQjtNQUdJLFFBQVEsRUFBRSxLQUFLQyxNQUhuQjtNQUlJLFFBQVEsZUFDSiw2QkFBQyw2QkFBRDtRQUNJLEtBQUssRUFBRSxLQUFLcEIsS0FBTCxDQUFXRCxpQkFEdEI7UUFFSSxhQUFhLEVBQUUsSUFGbkI7UUFHSSxRQUFRLEVBQUUsS0FBS3NCLHlCQUhuQjtRQUlJLEtBQUssRUFBRSxJQUFBTCxtQkFBQSxFQUFHLGVBQUg7TUFKWDtJQUxSLEVBZkosQ0FESjtFQTZCSDs7QUFoRTBGIn0=