"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _logger = require("matrix-js-sdk/src/logger");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _QuestionDialog = _interopRequireDefault(require("./QuestionDialog"));

var _SdkConfig = _interopRequireDefault(require("../../../SdkConfig"));

var _languageHandler = require("../../../languageHandler");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _HostSignupStore = require("../../../stores/HostSignupStore");

var _OwnProfileStore = require("../../../stores/OwnProfileStore");

var _HostSignupDialogTypes = require("./HostSignupDialogTypes");

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class HostSignupDialog extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "iframeRef", /*#__PURE__*/_react.default.createRef());
    (0, _defineProperty2.default)(this, "config", void 0);
    (0, _defineProperty2.default)(this, "messageHandler", async message => {
      if (!this.config.get("url").startsWith(message.origin)) {
        return;
      }

      switch (message.data.action) {
        case _HostSignupDialogTypes.PostmessageAction.HostSignupAccountDetailsRequest:
          this.onAccountDetailsRequest();
          break;

        case _HostSignupDialogTypes.PostmessageAction.Maximize:
          this.setState({
            minimized: false
          });
          break;

        case _HostSignupDialogTypes.PostmessageAction.Minimize:
          this.setState({
            minimized: true
          });
          break;

        case _HostSignupDialogTypes.PostmessageAction.SetupComplete:
          this.setState({
            completed: true
          });
          break;

        case _HostSignupDialogTypes.PostmessageAction.CloseDialog:
          return this.closeDialog();
      }
    });
    (0, _defineProperty2.default)(this, "maximizeDialog", () => {
      this.setState({
        minimized: false
      }); // Send this action to the iframe so it can act accordingly

      this.sendMessage({
        action: _HostSignupDialogTypes.PostmessageAction.Maximize
      });
    });
    (0, _defineProperty2.default)(this, "minimizeDialog", () => {
      this.setState({
        minimized: true
      }); // Send this action to the iframe so it can act accordingly

      this.sendMessage({
        action: _HostSignupDialogTypes.PostmessageAction.Minimize
      });
    });
    (0, _defineProperty2.default)(this, "closeDialog", async () => {
      window.removeEventListener("message", this.messageHandler); // Finally clear the flag in

      return _HostSignupStore.HostSignupStore.instance.setHostSignupActive(false);
    });
    (0, _defineProperty2.default)(this, "onCloseClick", async () => {
      if (this.state.completed) {
        // We're done, close
        return this.closeDialog();
      } else {
        _Modal.default.createDialog(_QuestionDialog.default, {
          title: (0, _languageHandler._t)("Confirm abort of host creation"),
          description: (0, _languageHandler._t)("Are you sure you wish to abort creation of the host? The process cannot be continued."),
          button: (0, _languageHandler._t)("Abort"),
          onFinished: result => {
            if (result) {
              return this.closeDialog();
            }
          }
        });
      }
    });
    (0, _defineProperty2.default)(this, "sendMessage", message => {
      this.iframeRef.current.contentWindow.postMessage(message, this.config.get("url"));
    });
    (0, _defineProperty2.default)(this, "onAccountDetailsDialogFinished", async result => {
      if (result) {
        return this.sendAccountDetails();
      }

      return this.closeDialog();
    });
    (0, _defineProperty2.default)(this, "onAccountDetailsRequest", () => {
      const cookiePolicyUrl = this.config.get("cookie_policy_url");
      const privacyPolicyUrl = this.config.get("privacy_policy_url");
      const tosUrl = this.config.get("terms_of_service_url");

      const textComponent = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Continuing temporarily allows the %(hostSignupBrand)s setup process to access your " + "account to fetch verified email addresses. This data is not stored.", {
        hostSignupBrand: this.config.get("brand")
      })), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Learn more in our <privacyPolicyLink />, <termsOfServiceLink /> and <cookiePolicyLink />.", {}, {
        cookiePolicyLink: () => /*#__PURE__*/_react.default.createElement("a", {
          href: cookiePolicyUrl,
          target: "_blank",
          rel: "noreferrer noopener"
        }, (0, _languageHandler._t)("Cookie Policy")),
        privacyPolicyLink: () => /*#__PURE__*/_react.default.createElement("a", {
          href: privacyPolicyUrl,
          target: "_blank",
          rel: "noreferrer noopener"
        }, (0, _languageHandler._t)("Privacy Policy")),
        termsOfServiceLink: () => /*#__PURE__*/_react.default.createElement("a", {
          href: tosUrl,
          target: "_blank",
          rel: "noreferrer noopener"
        }, (0, _languageHandler._t)("Terms of Service"))
      })));

      _Modal.default.createDialog(_QuestionDialog.default, {
        title: (0, _languageHandler._t)("You should know"),
        description: textComponent,
        button: (0, _languageHandler._t)("Continue"),
        onFinished: this.onAccountDetailsDialogFinished
      });
    });
    this.state = {
      completed: false,
      error: null,
      minimized: false
    };
    this.config = _SdkConfig.default.getObject("host_signup");
  }

  async sendAccountDetails() {
    const openIdToken = await _MatrixClientPeg.MatrixClientPeg.get().getOpenIdToken();

    if (!openIdToken || !openIdToken.access_token) {
      _logger.logger.warn("Failed to connect to homeserver for OpenID token.");

      this.setState({
        completed: true,
        error: (0, _languageHandler._t)("Failed to connect to your homeserver. Please close this dialog and try again.")
      });
      return;
    }

    this.sendMessage({
      action: _HostSignupDialogTypes.PostmessageAction.HostSignupAccountDetails,
      account: {
        accessToken: await _MatrixClientPeg.MatrixClientPeg.get().getAccessToken(),
        name: _OwnProfileStore.OwnProfileStore.instance.displayName,
        openIdToken: openIdToken.access_token,
        serverName: await _MatrixClientPeg.MatrixClientPeg.get().getDomain(),
        userLocalpart: await _MatrixClientPeg.MatrixClientPeg.get().getUserIdLocalpart(),
        termsAccepted: true
      }
    });
  }

  componentDidMount() {
    window.addEventListener("message", this.messageHandler);
  }

  componentWillUnmount() {
    if (_HostSignupStore.HostSignupStore.instance.isHostSignupActive) {
      // Run the close dialog actions if we're still active, otherwise good to go
      return this.closeDialog();
    }
  }

  render() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)({
        "mx_Dialog_wrapper": !this.state.minimized
      })
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)("mx_Dialog", {
        "mx_HostSignupDialog_minimized": this.state.minimized,
        "mx_HostSignupDialog": !this.state.minimized
      })
    }, this.state.minimized && /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_header mx_Dialog_headerWithButton"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_title"
    }, (0, _languageHandler._t)("%(hostSignupBrand)s Setup", {
      hostSignupBrand: this.config.get("brand")
    })), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_HostSignup_maximize_button",
      onClick: this.maximizeDialog,
      "aria-label": (0, _languageHandler._t)("Maximise dialog"),
      title: (0, _languageHandler._t)("Maximise dialog")
    })), !this.state.minimized && /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_header mx_Dialog_headerWithCancel"
    }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.minimizeDialog,
      className: "mx_HostSignup_minimize_button",
      "aria-label": (0, _languageHandler._t)("Minimise dialog"),
      title: (0, _languageHandler._t)("Minimise dialog")
    }), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onCloseClick,
      className: "mx_Dialog_cancelButton",
      "aria-label": (0, _languageHandler._t)("Close dialog"),
      title: (0, _languageHandler._t)("Close dialog")
    })), this.state.error && /*#__PURE__*/_react.default.createElement("div", null, this.state.error), !this.state.error && /*#__PURE__*/_react.default.createElement("iframe", {
      title: (0, _languageHandler._t)("Upgrade to %(hostSignupBrand)s", {
        hostSignupBrand: this.config.get("brand")
      }),
      src: this.config.get("url"),
      ref: this.iframeRef,
      sandbox: "allow-forms allow-scripts allow-same-origin allow-popups"
    })));
  }

}

exports.default = HostSignupDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,