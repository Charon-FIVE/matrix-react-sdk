"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _arrays = require("../../../utils/arrays");

var _Waveform = _interopRequireDefault(require("./Waveform"));

var _Playback = require("../../../audio/Playback");

var _numbers = require("../../../utils/numbers");

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * A waveform which shows the waveform of a previously recorded recording
 */
class PlaybackWaveform extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onWaveformUpdate", waveform => {
      this.setState({
        heights: this.toHeights(waveform)
      });
    });
    (0, _defineProperty2.default)(this, "onTimeUpdate", time => {
      // Track percentages to a general precision to avoid over-waking the component.
      const progress = Number((0, _numbers.percentageOf)(time[0], 0, time[1]).toFixed(3));
      this.setState({
        progress
      });
    });
    this.state = {
      heights: this.toHeights(this.props.playback.waveform),
      progress: 0 // default no progress

    };
    this.props.playback.waveformData.onUpdate(this.onWaveformUpdate);
    this.props.playback.clockInfo.liveData.onUpdate(this.onTimeUpdate);
  }

  toHeights(waveform) {
    const seed = (0, _arrays.arraySeed)(0, _Playback.PLAYBACK_WAVEFORM_SAMPLES);
    return (0, _arrays.arrayTrimFill)(waveform, _Playback.PLAYBACK_WAVEFORM_SAMPLES, seed);
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_Waveform.default, {
      relHeights: this.state.heights,
      progress: this.state.progress
    });
  }

}

exports.default = PlaybackWaveform;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQbGF5YmFja1dhdmVmb3JtIiwiUmVhY3QiLCJQdXJlQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsIndhdmVmb3JtIiwic2V0U3RhdGUiLCJoZWlnaHRzIiwidG9IZWlnaHRzIiwidGltZSIsInByb2dyZXNzIiwiTnVtYmVyIiwicGVyY2VudGFnZU9mIiwidG9GaXhlZCIsInN0YXRlIiwicGxheWJhY2siLCJ3YXZlZm9ybURhdGEiLCJvblVwZGF0ZSIsIm9uV2F2ZWZvcm1VcGRhdGUiLCJjbG9ja0luZm8iLCJsaXZlRGF0YSIsIm9uVGltZVVwZGF0ZSIsInNlZWQiLCJhcnJheVNlZWQiLCJQTEFZQkFDS19XQVZFRk9STV9TQU1QTEVTIiwiYXJyYXlUcmltRmlsbCIsInJlbmRlciJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2F1ZGlvX21lc3NhZ2VzL1BsYXliYWNrV2F2ZWZvcm0udHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHsgYXJyYXlTZWVkLCBhcnJheVRyaW1GaWxsIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL2FycmF5c1wiO1xuaW1wb3J0IFdhdmVmb3JtIGZyb20gXCIuL1dhdmVmb3JtXCI7XG5pbXBvcnQgeyBQbGF5YmFjaywgUExBWUJBQ0tfV0FWRUZPUk1fU0FNUExFUyB9IGZyb20gXCIuLi8uLi8uLi9hdWRpby9QbGF5YmFja1wiO1xuaW1wb3J0IHsgcGVyY2VudGFnZU9mIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL251bWJlcnNcIjtcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgcGxheWJhY2s6IFBsYXliYWNrO1xufVxuXG5pbnRlcmZhY2UgSVN0YXRlIHtcbiAgICBoZWlnaHRzOiBudW1iZXJbXTtcbiAgICBwcm9ncmVzczogbnVtYmVyO1xufVxuXG4vKipcbiAqIEEgd2F2ZWZvcm0gd2hpY2ggc2hvd3MgdGhlIHdhdmVmb3JtIG9mIGEgcHJldmlvdXNseSByZWNvcmRlZCByZWNvcmRpbmdcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGxheWJhY2tXYXZlZm9ybSBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8SVByb3BzLCBJU3RhdGU+IHtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBoZWlnaHRzOiB0aGlzLnRvSGVpZ2h0cyh0aGlzLnByb3BzLnBsYXliYWNrLndhdmVmb3JtKSxcbiAgICAgICAgICAgIHByb2dyZXNzOiAwLCAvLyBkZWZhdWx0IG5vIHByb2dyZXNzXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5wcm9wcy5wbGF5YmFjay53YXZlZm9ybURhdGEub25VcGRhdGUodGhpcy5vbldhdmVmb3JtVXBkYXRlKTtcbiAgICAgICAgdGhpcy5wcm9wcy5wbGF5YmFjay5jbG9ja0luZm8ubGl2ZURhdGEub25VcGRhdGUodGhpcy5vblRpbWVVcGRhdGUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdG9IZWlnaHRzKHdhdmVmb3JtOiBudW1iZXJbXSkge1xuICAgICAgICBjb25zdCBzZWVkID0gYXJyYXlTZWVkKDAsIFBMQVlCQUNLX1dBVkVGT1JNX1NBTVBMRVMpO1xuICAgICAgICByZXR1cm4gYXJyYXlUcmltRmlsbCh3YXZlZm9ybSwgUExBWUJBQ0tfV0FWRUZPUk1fU0FNUExFUywgc2VlZCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbldhdmVmb3JtVXBkYXRlID0gKHdhdmVmb3JtOiBudW1iZXJbXSkgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgaGVpZ2h0czogdGhpcy50b0hlaWdodHMod2F2ZWZvcm0pIH0pO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uVGltZVVwZGF0ZSA9ICh0aW1lOiBudW1iZXJbXSkgPT4ge1xuICAgICAgICAvLyBUcmFjayBwZXJjZW50YWdlcyB0byBhIGdlbmVyYWwgcHJlY2lzaW9uIHRvIGF2b2lkIG92ZXItd2FraW5nIHRoZSBjb21wb25lbnQuXG4gICAgICAgIGNvbnN0IHByb2dyZXNzID0gTnVtYmVyKHBlcmNlbnRhZ2VPZih0aW1lWzBdLCAwLCB0aW1lWzFdKS50b0ZpeGVkKDMpKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHByb2dyZXNzIH0pO1xuICAgIH07XG5cbiAgICBwdWJsaWMgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gPFdhdmVmb3JtIHJlbEhlaWdodHM9e3RoaXMuc3RhdGUuaGVpZ2h0c30gcHJvZ3Jlc3M9e3RoaXMuc3RhdGUucHJvZ3Jlc3N9IC8+O1xuICAgIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFnQkE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFrQkE7QUFDQTtBQUNBO0FBQ2UsTUFBTUEsZ0JBQU4sU0FBK0JDLGNBQUEsQ0FBTUMsYUFBckMsQ0FBbUU7RUFDdkVDLFdBQVcsQ0FBQ0MsS0FBRCxFQUFRO0lBQ3RCLE1BQU1BLEtBQU47SUFEc0Isd0RBaUJFQyxRQUFELElBQXdCO01BQy9DLEtBQUtDLFFBQUwsQ0FBYztRQUFFQyxPQUFPLEVBQUUsS0FBS0MsU0FBTCxDQUFlSCxRQUFmO01BQVgsQ0FBZDtJQUNILENBbkJ5QjtJQUFBLG9EQXFCRkksSUFBRCxJQUFvQjtNQUN2QztNQUNBLE1BQU1DLFFBQVEsR0FBR0MsTUFBTSxDQUFDLElBQUFDLHFCQUFBLEVBQWFILElBQUksQ0FBQyxDQUFELENBQWpCLEVBQXNCLENBQXRCLEVBQXlCQSxJQUFJLENBQUMsQ0FBRCxDQUE3QixFQUFrQ0ksT0FBbEMsQ0FBMEMsQ0FBMUMsQ0FBRCxDQUF2QjtNQUNBLEtBQUtQLFFBQUwsQ0FBYztRQUFFSTtNQUFGLENBQWQ7SUFDSCxDQXpCeUI7SUFHdEIsS0FBS0ksS0FBTCxHQUFhO01BQ1RQLE9BQU8sRUFBRSxLQUFLQyxTQUFMLENBQWUsS0FBS0osS0FBTCxDQUFXVyxRQUFYLENBQW9CVixRQUFuQyxDQURBO01BRVRLLFFBQVEsRUFBRSxDQUZELENBRUk7O0lBRkosQ0FBYjtJQUtBLEtBQUtOLEtBQUwsQ0FBV1csUUFBWCxDQUFvQkMsWUFBcEIsQ0FBaUNDLFFBQWpDLENBQTBDLEtBQUtDLGdCQUEvQztJQUNBLEtBQUtkLEtBQUwsQ0FBV1csUUFBWCxDQUFvQkksU0FBcEIsQ0FBOEJDLFFBQTlCLENBQXVDSCxRQUF2QyxDQUFnRCxLQUFLSSxZQUFyRDtFQUNIOztFQUVPYixTQUFTLENBQUNILFFBQUQsRUFBcUI7SUFDbEMsTUFBTWlCLElBQUksR0FBRyxJQUFBQyxpQkFBQSxFQUFVLENBQVYsRUFBYUMsbUNBQWIsQ0FBYjtJQUNBLE9BQU8sSUFBQUMscUJBQUEsRUFBY3BCLFFBQWQsRUFBd0JtQixtQ0FBeEIsRUFBbURGLElBQW5ELENBQVA7RUFDSDs7RUFZTUksTUFBTSxHQUFHO0lBQ1osb0JBQU8sNkJBQUMsaUJBQUQ7TUFBVSxVQUFVLEVBQUUsS0FBS1osS0FBTCxDQUFXUCxPQUFqQztNQUEwQyxRQUFRLEVBQUUsS0FBS08sS0FBTCxDQUFXSjtJQUEvRCxFQUFQO0VBQ0g7O0FBOUI2RSJ9