"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _AccessibleTooltipButton = _interopRequireDefault(require("../elements/AccessibleTooltipButton"));

var _languageHandler = require("../../../languageHandler");

var _Playback = require("../../../audio/Playback");

const _excluded = ["playback", "playbackPhase"];

/**
 * Displays a play/pause button (activating the play/pause function of the recorder)
 * to be displayed in reference to a recording.
 */
class PlayPauseButton extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onClick", () => {
      // noinspection JSIgnoredPromiseFromCall
      this.toggleState();
    });
  }

  async toggleState() {
    await this.props.playback.toggle();
  }

  render() {
    const _this$props = this.props,
          {
      playback,
      playbackPhase
    } = _this$props,
          restProps = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
    const isPlaying = playback.isPlaying;
    const isDisabled = playbackPhase === _Playback.PlaybackState.Decoding;
    const classes = (0, _classnames.default)('mx_PlayPauseButton', {
      'mx_PlayPauseButton_play': !isPlaying,
      'mx_PlayPauseButton_pause': isPlaying,
      'mx_PlayPauseButton_disabled': isDisabled
    });
    return /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, (0, _extends2.default)({
      "data-test-id": "play-pause-button",
      className: classes,
      title: isPlaying ? (0, _languageHandler._t)("Pause") : (0, _languageHandler._t)("Play"),
      onClick: this.onClick,
      disabled: isDisabled
    }, restProps));
  }

}

exports.default = PlayPauseButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQbGF5UGF1c2VCdXR0b24iLCJSZWFjdCIsIlB1cmVDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwidG9nZ2xlU3RhdGUiLCJwbGF5YmFjayIsInRvZ2dsZSIsInJlbmRlciIsInBsYXliYWNrUGhhc2UiLCJyZXN0UHJvcHMiLCJpc1BsYXlpbmciLCJpc0Rpc2FibGVkIiwiUGxheWJhY2tTdGF0ZSIsIkRlY29kaW5nIiwiY2xhc3NlcyIsImNsYXNzTmFtZXMiLCJfdCIsIm9uQ2xpY2siXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy92aWV3cy9hdWRpb19tZXNzYWdlcy9QbGF5UGF1c2VCdXR0b24udHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gXCJjbGFzc25hbWVzXCI7XG5cbmltcG9ydCBBY2Nlc3NpYmxlVG9vbHRpcEJ1dHRvbiBmcm9tIFwiLi4vZWxlbWVudHMvQWNjZXNzaWJsZVRvb2x0aXBCdXR0b25cIjtcbmltcG9ydCB7IF90IH0gZnJvbSBcIi4uLy4uLy4uL2xhbmd1YWdlSGFuZGxlclwiO1xuaW1wb3J0IHsgUGxheWJhY2ssIFBsYXliYWNrU3RhdGUgfSBmcm9tIFwiLi4vLi4vLi4vYXVkaW8vUGxheWJhY2tcIjtcblxuLy8gb21pdHRlZCBwcm9wcyBhcmUgaGFuZGxlZCBieSByZW5kZXIgZnVuY3Rpb25cbmludGVyZmFjZSBJUHJvcHMgZXh0ZW5kcyBPbWl0PFJlYWN0LkNvbXBvbmVudFByb3BzPHR5cGVvZiBBY2Nlc3NpYmxlVG9vbHRpcEJ1dHRvbj4sIFwidGl0bGVcIiB8IFwib25DbGlja1wiIHwgXCJkaXNhYmxlZFwiPiB7XG4gICAgLy8gUGxheWJhY2sgaW5zdGFuY2UgdG8gbWFuaXB1bGF0ZS4gQ2Fubm90IGNoYW5nZSBkdXJpbmcgdGhlIGNvbXBvbmVudCBsaWZlY3ljbGUuXG4gICAgcGxheWJhY2s6IFBsYXliYWNrO1xuXG4gICAgLy8gVGhlIHBsYXliYWNrIHBoYXNlIHRvIHJlbmRlci4gQWJsZSB0byBjaGFuZ2UgZHVyaW5nIHRoZSBjb21wb25lbnQgbGlmZWN5Y2xlLlxuICAgIHBsYXliYWNrUGhhc2U6IFBsYXliYWNrU3RhdGU7XG59XG5cbi8qKlxuICogRGlzcGxheXMgYSBwbGF5L3BhdXNlIGJ1dHRvbiAoYWN0aXZhdGluZyB0aGUgcGxheS9wYXVzZSBmdW5jdGlvbiBvZiB0aGUgcmVjb3JkZXIpXG4gKiB0byBiZSBkaXNwbGF5ZWQgaW4gcmVmZXJlbmNlIHRvIGEgcmVjb3JkaW5nLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQbGF5UGF1c2VCdXR0b24gZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PElQcm9wcz4ge1xuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkNsaWNrID0gKCkgPT4ge1xuICAgICAgICAvLyBub2luc3BlY3Rpb24gSlNJZ25vcmVkUHJvbWlzZUZyb21DYWxsXG4gICAgICAgIHRoaXMudG9nZ2xlU3RhdGUoKTtcbiAgICB9O1xuXG4gICAgcHVibGljIGFzeW5jIHRvZ2dsZVN0YXRlKCkge1xuICAgICAgICBhd2FpdCB0aGlzLnByb3BzLnBsYXliYWNrLnRvZ2dsZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW5kZXIoKTogUmVhY3ROb2RlIHtcbiAgICAgICAgY29uc3QgeyBwbGF5YmFjaywgcGxheWJhY2tQaGFzZSwgLi4ucmVzdFByb3BzIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBjb25zdCBpc1BsYXlpbmcgPSBwbGF5YmFjay5pc1BsYXlpbmc7XG4gICAgICAgIGNvbnN0IGlzRGlzYWJsZWQgPSBwbGF5YmFja1BoYXNlID09PSBQbGF5YmFja1N0YXRlLkRlY29kaW5nO1xuICAgICAgICBjb25zdCBjbGFzc2VzID0gY2xhc3NOYW1lcygnbXhfUGxheVBhdXNlQnV0dG9uJywge1xuICAgICAgICAgICAgJ214X1BsYXlQYXVzZUJ1dHRvbl9wbGF5JzogIWlzUGxheWluZyxcbiAgICAgICAgICAgICdteF9QbGF5UGF1c2VCdXR0b25fcGF1c2UnOiBpc1BsYXlpbmcsXG4gICAgICAgICAgICAnbXhfUGxheVBhdXNlQnV0dG9uX2Rpc2FibGVkJzogaXNEaXNhYmxlZCxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIDxBY2Nlc3NpYmxlVG9vbHRpcEJ1dHRvblxuICAgICAgICAgICAgZGF0YS10ZXN0LWlkPSdwbGF5LXBhdXNlLWJ1dHRvbidcbiAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlc31cbiAgICAgICAgICAgIHRpdGxlPXtpc1BsYXlpbmcgPyBfdChcIlBhdXNlXCIpIDogX3QoXCJQbGF5XCIpfVxuICAgICAgICAgICAgb25DbGljaz17dGhpcy5vbkNsaWNrfVxuICAgICAgICAgICAgZGlzYWJsZWQ9e2lzRGlzYWJsZWR9XG4gICAgICAgICAgICB7Li4ucmVzdFByb3BzfVxuICAgICAgICAvPjtcbiAgICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQWdCQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7OztBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ2UsTUFBTUEsZUFBTixTQUE4QkMsY0FBQSxDQUFNQyxhQUFwQyxDQUEwRDtFQUM5REMsV0FBVyxDQUFDQyxLQUFELEVBQVE7SUFDdEIsTUFBTUEsS0FBTjtJQURzQiwrQ0FJUixNQUFNO01BQ3BCO01BQ0EsS0FBS0MsV0FBTDtJQUNILENBUHlCO0VBRXpCOztFQU91QixNQUFYQSxXQUFXLEdBQUc7SUFDdkIsTUFBTSxLQUFLRCxLQUFMLENBQVdFLFFBQVgsQ0FBb0JDLE1BQXBCLEVBQU47RUFDSDs7RUFFTUMsTUFBTSxHQUFjO0lBQ3ZCLG9CQUFrRCxLQUFLSixLQUF2RDtJQUFBLE1BQU07TUFBRUUsUUFBRjtNQUFZRztJQUFaLENBQU47SUFBQSxNQUFvQ0MsU0FBcEM7SUFDQSxNQUFNQyxTQUFTLEdBQUdMLFFBQVEsQ0FBQ0ssU0FBM0I7SUFDQSxNQUFNQyxVQUFVLEdBQUdILGFBQWEsS0FBS0ksdUJBQUEsQ0FBY0MsUUFBbkQ7SUFDQSxNQUFNQyxPQUFPLEdBQUcsSUFBQUMsbUJBQUEsRUFBVyxvQkFBWCxFQUFpQztNQUM3QywyQkFBMkIsQ0FBQ0wsU0FEaUI7TUFFN0MsNEJBQTRCQSxTQUZpQjtNQUc3QywrQkFBK0JDO0lBSGMsQ0FBakMsQ0FBaEI7SUFNQSxvQkFBTyw2QkFBQyxnQ0FBRDtNQUNILGdCQUFhLG1CQURWO01BRUgsU0FBUyxFQUFFRyxPQUZSO01BR0gsS0FBSyxFQUFFSixTQUFTLEdBQUcsSUFBQU0sbUJBQUEsRUFBRyxPQUFILENBQUgsR0FBaUIsSUFBQUEsbUJBQUEsRUFBRyxNQUFILENBSDlCO01BSUgsT0FBTyxFQUFFLEtBQUtDLE9BSlg7TUFLSCxRQUFRLEVBQUVOO0lBTFAsR0FNQ0YsU0FORCxFQUFQO0VBUUg7O0FBaENvRSJ9