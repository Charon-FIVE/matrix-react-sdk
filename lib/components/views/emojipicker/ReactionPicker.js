"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _relations = require("matrix-js-sdk/src/models/relations");

var _event = require("matrix-js-sdk/src/@types/event");

var _EmojiPicker = _interopRequireDefault(require("./EmojiPicker"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _actions = require("../../../dispatcher/actions");

var _RoomContext = _interopRequireDefault(require("../../../contexts/RoomContext"));

/*
Copyright 2019 Tulir Asokan <tulir@maunium.net>
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class ReactionPicker extends _react.default.Component {
  constructor(props, context) {
    super(props, context);
    (0, _defineProperty2.default)(this, "context", void 0);
    (0, _defineProperty2.default)(this, "onReactionsChange", () => {
      this.setState({
        selectedEmojis: new Set(Object.keys(this.getReactions()))
      });
    });
    (0, _defineProperty2.default)(this, "onChoose", reaction => {
      this.componentWillUnmount();
      this.props.onFinished();
      const myReactions = this.getReactions();

      if (myReactions.hasOwnProperty(reaction)) {
        if (this.props.mxEvent.isRedacted() || !this.context.canSelfRedact) return;

        _MatrixClientPeg.MatrixClientPeg.get().redactEvent(this.props.mxEvent.getRoomId(), myReactions[reaction]);

        _dispatcher.default.dispatch({
          action: _actions.Action.FocusAComposer,
          context: this.context.timelineRenderingType
        }); // Tell the emoji picker not to bump this in the more frequently used list.


        return false;
      } else {
        _MatrixClientPeg.MatrixClientPeg.get().sendEvent(this.props.mxEvent.getRoomId(), _event.EventType.Reaction, {
          "m.relates_to": {
            "rel_type": _event.RelationType.Annotation,
            "event_id": this.props.mxEvent.getId(),
            "key": reaction
          }
        });

        _dispatcher.default.dispatch({
          action: "message_sent"
        });

        _dispatcher.default.dispatch({
          action: _actions.Action.FocusAComposer,
          context: this.context.timelineRenderingType
        });

        return true;
      }
    });
    (0, _defineProperty2.default)(this, "isEmojiDisabled", unicode => {
      if (!this.getReactions()[unicode]) return false;
      if (this.context.canSelfRedact) return false;
      return true;
    });
    this.state = {
      selectedEmojis: new Set(Object.keys(this.getReactions()))
    };
    this.addListeners();
  }

  componentDidUpdate(prevProps) {
    if (prevProps.reactions !== this.props.reactions) {
      this.addListeners();
      this.onReactionsChange();
    }
  }

  addListeners() {
    if (this.props.reactions) {
      this.props.reactions.on(_relations.RelationsEvent.Add, this.onReactionsChange);
      this.props.reactions.on(_relations.RelationsEvent.Remove, this.onReactionsChange);
      this.props.reactions.on(_relations.RelationsEvent.Redaction, this.onReactionsChange);
    }
  }

  componentWillUnmount() {
    if (this.props.reactions) {
      this.props.reactions.removeListener(_relations.RelationsEvent.Add, this.onReactionsChange);
      this.props.reactions.removeListener(_relations.RelationsEvent.Remove, this.onReactionsChange);
      this.props.reactions.removeListener(_relations.RelationsEvent.Redaction, this.onReactionsChange);
    }
  }

  getReactions() {
    if (!this.props.reactions) {
      return {};
    }

    const userId = _MatrixClientPeg.MatrixClientPeg.get().getUserId();

    const myAnnotations = this.props.reactions.getAnnotationsBySender()[userId] || [];
    return Object.fromEntries([...myAnnotations].filter(event => !event.isRedacted()).map(event => [event.getRelation().key, event.getId()]));
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_EmojiPicker.default, {
      onChoose: this.onChoose,
      isEmojiDisabled: this.isEmojiDisabled,
      selectedEmojis: this.state.selectedEmojis,
      showQuickReactions: true
    });
  }

}

(0, _defineProperty2.default)(ReactionPicker, "contextType", _RoomContext.default);
var _default = ReactionPicker;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,