"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _emoji = require("../../../emoji");

var _Emoji = _interopRequireDefault(require("./Emoji"));

/*
Copyright 2019 Tulir Asokan <tulir@maunium.net>
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// We use the variation-selector Heart in Quick Reactions for some reason
const QUICK_REACTIONS = ["👍", "👎", "😄", "🎉", "😕", "❤️", "🚀", "👀"].map(emoji => {
  const data = (0, _emoji.getEmojiFromUnicode)(emoji);

  if (!data) {
    throw new Error(`Emoji ${emoji} doesn't exist in emojibase`);
  }

  return data;
});

class QuickReactions extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onMouseEnter", emoji => {
      this.setState({
        hover: emoji
      });
    });
    (0, _defineProperty2.default)(this, "onMouseLeave", () => {
      this.setState({
        hover: null
      });
    });
    this.state = {
      hover: null
    };
  }

  render() {
    return /*#__PURE__*/_react.default.createElement("section", {
      className: "mx_EmojiPicker_footer mx_EmojiPicker_quick mx_EmojiPicker_category"
    }, /*#__PURE__*/_react.default.createElement("h2", {
      className: "mx_EmojiPicker_quick_header mx_EmojiPicker_category_label"
    }, !this.state.hover ? (0, _languageHandler._t)("Quick Reactions") : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_EmojiPicker_name"
    }, this.state.hover.label), /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_EmojiPicker_shortcode"
    }, this.state.hover.shortcodes[0]))), /*#__PURE__*/_react.default.createElement("ul", {
      className: "mx_EmojiPicker_list",
      "aria-label": (0, _languageHandler._t)("Quick Reactions")
    }, QUICK_REACTIONS.map(emoji => /*#__PURE__*/_react.default.createElement(_Emoji.default, {
      key: emoji.hexcode,
      emoji: emoji,
      onClick: this.props.onClick,
      onMouseEnter: this.onMouseEnter,
      onMouseLeave: this.onMouseLeave,
      selectedEmojis: this.props.selectedEmojis
    }))));
  }

}

var _default = QuickReactions;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJRVUlDS19SRUFDVElPTlMiLCJtYXAiLCJlbW9qaSIsImRhdGEiLCJnZXRFbW9qaUZyb21Vbmljb2RlIiwiRXJyb3IiLCJRdWlja1JlYWN0aW9ucyIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsInNldFN0YXRlIiwiaG92ZXIiLCJzdGF0ZSIsInJlbmRlciIsIl90IiwibGFiZWwiLCJzaG9ydGNvZGVzIiwiaGV4Y29kZSIsIm9uQ2xpY2siLCJvbk1vdXNlRW50ZXIiLCJvbk1vdXNlTGVhdmUiLCJzZWxlY3RlZEVtb2ppcyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2Vtb2ppcGlja2VyL1F1aWNrUmVhY3Rpb25zLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMTkgVHVsaXIgQXNva2FuIDx0dWxpckBtYXVuaXVtLm5ldD5cbkNvcHlyaWdodCAyMDIwIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgX3QgfSBmcm9tICcuLi8uLi8uLi9sYW5ndWFnZUhhbmRsZXInO1xuaW1wb3J0IHsgZ2V0RW1vamlGcm9tVW5pY29kZSwgSUVtb2ppIH0gZnJvbSBcIi4uLy4uLy4uL2Vtb2ppXCI7XG5pbXBvcnQgRW1vamkgZnJvbSBcIi4vRW1vamlcIjtcblxuLy8gV2UgdXNlIHRoZSB2YXJpYXRpb24tc2VsZWN0b3IgSGVhcnQgaW4gUXVpY2sgUmVhY3Rpb25zIGZvciBzb21lIHJlYXNvblxuY29uc3QgUVVJQ0tfUkVBQ1RJT05TID0gW1wi8J+RjVwiLCBcIvCfkY5cIiwgXCLwn5iEXCIsIFwi8J+OiVwiLCBcIvCfmJVcIiwgXCLinaTvuI9cIiwgXCLwn5qAXCIsIFwi8J+RgFwiXS5tYXAoZW1vamkgPT4ge1xuICAgIGNvbnN0IGRhdGEgPSBnZXRFbW9qaUZyb21Vbmljb2RlKGVtb2ppKTtcbiAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFbW9qaSAke2Vtb2ppfSBkb2Vzbid0IGV4aXN0IGluIGVtb2ppYmFzZWApO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbn0pO1xuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgICBzZWxlY3RlZEVtb2ppcz86IFNldDxzdHJpbmc+O1xuICAgIG9uQ2xpY2soZW1vamk6IElFbW9qaSk6IHZvaWQ7XG59XG5cbmludGVyZmFjZSBJU3RhdGUge1xuICAgIGhvdmVyPzogSUVtb2ppO1xufVxuXG5jbGFzcyBRdWlja1JlYWN0aW9ucyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxJUHJvcHMsIElTdGF0ZT4ge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGhvdmVyOiBudWxsLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgb25Nb3VzZUVudGVyID0gKGVtb2ppOiBJRW1vamkpID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBob3ZlcjogZW1vamksXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uTW91c2VMZWF2ZSA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBob3ZlcjogbnVsbCxcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cIm14X0Vtb2ppUGlja2VyX2Zvb3RlciBteF9FbW9qaVBpY2tlcl9xdWljayBteF9FbW9qaVBpY2tlcl9jYXRlZ29yeVwiPlxuICAgICAgICAgICAgICAgIDxoMiBjbGFzc05hbWU9XCJteF9FbW9qaVBpY2tlcl9xdWlja19oZWFkZXIgbXhfRW1vamlQaWNrZXJfY2F0ZWdvcnlfbGFiZWxcIj5cbiAgICAgICAgICAgICAgICAgICAgeyAhdGhpcy5zdGF0ZS5ob3ZlclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBfdChcIlF1aWNrIFJlYWN0aW9uc1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibXhfRW1vamlQaWNrZXJfbmFtZVwiPnsgdGhpcy5zdGF0ZS5ob3Zlci5sYWJlbCB9PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm14X0Vtb2ppUGlja2VyX3Nob3J0Y29kZVwiPnsgdGhpcy5zdGF0ZS5ob3Zlci5zaG9ydGNvZGVzWzBdIH08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwibXhfRW1vamlQaWNrZXJfbGlzdFwiIGFyaWEtbGFiZWw9e190KFwiUXVpY2sgUmVhY3Rpb25zXCIpfT5cbiAgICAgICAgICAgICAgICAgICAgeyBRVUlDS19SRUFDVElPTlMubWFwKGVtb2ppID0+IChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxFbW9qaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17ZW1vamkuaGV4Y29kZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbW9qaT17ZW1vaml9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5wcm9wcy5vbkNsaWNrfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uTW91c2VFbnRlcj17dGhpcy5vbk1vdXNlRW50ZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25Nb3VzZUxlYXZlPXt0aGlzLm9uTW91c2VMZWF2ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZEVtb2ppcz17dGhpcy5wcm9wcy5zZWxlY3RlZEVtb2ppc31cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICkpIH1cbiAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUXVpY2tSZWFjdGlvbnM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBaUJBOztBQUVBOztBQUNBOztBQUNBOztBQXJCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQ0EsTUFBTUEsZUFBZSxHQUFHLENBQUMsSUFBRCxFQUFPLElBQVAsRUFBYSxJQUFiLEVBQW1CLElBQW5CLEVBQXlCLElBQXpCLEVBQStCLElBQS9CLEVBQXFDLElBQXJDLEVBQTJDLElBQTNDLEVBQWlEQyxHQUFqRCxDQUFxREMsS0FBSyxJQUFJO0VBQ2xGLE1BQU1DLElBQUksR0FBRyxJQUFBQywwQkFBQSxFQUFvQkYsS0FBcEIsQ0FBYjs7RUFDQSxJQUFJLENBQUNDLElBQUwsRUFBVztJQUNQLE1BQU0sSUFBSUUsS0FBSixDQUFXLFNBQVFILEtBQU0sNkJBQXpCLENBQU47RUFDSDs7RUFDRCxPQUFPQyxJQUFQO0FBQ0gsQ0FOdUIsQ0FBeEI7O0FBaUJBLE1BQU1HLGNBQU4sU0FBNkJDLGNBQUEsQ0FBTUMsU0FBbkMsQ0FBNkQ7RUFDekRDLFdBQVcsQ0FBQ0MsS0FBRCxFQUFRO0lBQ2YsTUFBTUEsS0FBTjtJQURlLG9EQU9LUixLQUFELElBQW1CO01BQ3RDLEtBQUtTLFFBQUwsQ0FBYztRQUNWQyxLQUFLLEVBQUVWO01BREcsQ0FBZDtJQUdILENBWGtCO0lBQUEsb0RBYUksTUFBTTtNQUN6QixLQUFLUyxRQUFMLENBQWM7UUFDVkMsS0FBSyxFQUFFO01BREcsQ0FBZDtJQUdILENBakJrQjtJQUVmLEtBQUtDLEtBQUwsR0FBYTtNQUNURCxLQUFLLEVBQUU7SUFERSxDQUFiO0VBR0g7O0VBY0RFLE1BQU0sR0FBRztJQUNMLG9CQUNJO01BQVMsU0FBUyxFQUFDO0lBQW5CLGdCQUNJO01BQUksU0FBUyxFQUFDO0lBQWQsR0FDTSxDQUFDLEtBQUtELEtBQUwsQ0FBV0QsS0FBWixHQUNJLElBQUFHLG1CQUFBLEVBQUcsaUJBQUgsQ0FESixnQkFFSSw2QkFBQyxjQUFELENBQU8sUUFBUCxxQkFDRTtNQUFNLFNBQVMsRUFBQztJQUFoQixHQUF3QyxLQUFLRixLQUFMLENBQVdELEtBQVgsQ0FBaUJJLEtBQXpELENBREYsZUFFRTtNQUFNLFNBQVMsRUFBQztJQUFoQixHQUE2QyxLQUFLSCxLQUFMLENBQVdELEtBQVgsQ0FBaUJLLFVBQWpCLENBQTRCLENBQTVCLENBQTdDLENBRkYsQ0FIVixDQURKLGVBVUk7TUFBSSxTQUFTLEVBQUMscUJBQWQ7TUFBb0MsY0FBWSxJQUFBRixtQkFBQSxFQUFHLGlCQUFIO0lBQWhELEdBQ01mLGVBQWUsQ0FBQ0MsR0FBaEIsQ0FBb0JDLEtBQUssaUJBQ3ZCLDZCQUFDLGNBQUQ7TUFDSSxHQUFHLEVBQUVBLEtBQUssQ0FBQ2dCLE9BRGY7TUFFSSxLQUFLLEVBQUVoQixLQUZYO01BR0ksT0FBTyxFQUFFLEtBQUtRLEtBQUwsQ0FBV1MsT0FIeEI7TUFJSSxZQUFZLEVBQUUsS0FBS0MsWUFKdkI7TUFLSSxZQUFZLEVBQUUsS0FBS0MsWUFMdkI7TUFNSSxjQUFjLEVBQUUsS0FBS1gsS0FBTCxDQUFXWTtJQU4vQixFQURGLENBRE4sQ0FWSixDQURKO0VBeUJIOztBQTlDd0Q7O2VBaUQ5Q2hCLGMifQ==