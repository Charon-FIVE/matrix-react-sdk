"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _AccessibleButton = _interopRequireDefault(require("./AccessibleButton"));

const _excluded = ["checked", "disabled", "onChange"];

// Controlled Toggle Switch element, written with Accessibility in mind
var _default = _ref => {
  let {
    checked,
    disabled = false,
    onChange
  } = _ref,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  const _onClick = () => {
    if (disabled) return;
    onChange(!checked);
  };

  const classes = (0, _classnames.default)({
    "mx_ToggleSwitch": true,
    "mx_ToggleSwitch_on": checked,
    "mx_ToggleSwitch_enabled": !disabled
  });
  return /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, (0, _extends2.default)({}, props, {
    className: classes,
    onClick: _onClick,
    role: "switch",
    "aria-checked": checked,
    "aria-disabled": disabled
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_ToggleSwitch_ball"
  }));
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjaGVja2VkIiwiZGlzYWJsZWQiLCJvbkNoYW5nZSIsInByb3BzIiwiX29uQ2xpY2siLCJjbGFzc2VzIiwiY2xhc3NOYW1lcyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2VsZW1lbnRzL1RvZ2dsZVN3aXRjaC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE5IE5ldyBWZWN0b3IgTHRkXG5Db3B5cmlnaHQgMjAxOSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gXCJjbGFzc25hbWVzXCI7XG5cbmltcG9ydCBBY2Nlc3NpYmxlQnV0dG9uIGZyb20gXCIuL0FjY2Vzc2libGVCdXR0b25cIjtcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgLy8gV2hldGhlciBvciBub3QgdGhpcyB0b2dnbGUgaXMgaW4gdGhlICdvbicgcG9zaXRpb24uXG4gICAgY2hlY2tlZDogYm9vbGVhbjtcblxuICAgIC8vIFdoZXRoZXIgb3Igbm90IHRoZSB1c2VyIGNhbiBpbnRlcmFjdCB3aXRoIHRoZSBzd2l0Y2hcbiAgICBkaXNhYmxlZD86IGJvb2xlYW47XG5cbiAgICAvLyBDYWxsZWQgd2hlbiB0aGUgY2hlY2tlZCBzdGF0ZSBjaGFuZ2VzLiBGaXJzdCBhcmd1bWVudCB3aWxsIGJlIHRoZSBuZXcgc3RhdGUuXG4gICAgb25DaGFuZ2UoY2hlY2tlZDogYm9vbGVhbik6IHZvaWQ7XG59XG5cbi8vIENvbnRyb2xsZWQgVG9nZ2xlIFN3aXRjaCBlbGVtZW50LCB3cml0dGVuIHdpdGggQWNjZXNzaWJpbGl0eSBpbiBtaW5kXG5leHBvcnQgZGVmYXVsdCAoeyBjaGVja2VkLCBkaXNhYmxlZCA9IGZhbHNlLCBvbkNoYW5nZSwgLi4ucHJvcHMgfTogSVByb3BzKSA9PiB7XG4gICAgY29uc3QgX29uQ2xpY2sgPSAoKSA9PiB7XG4gICAgICAgIGlmIChkaXNhYmxlZCkgcmV0dXJuO1xuICAgICAgICBvbkNoYW5nZSghY2hlY2tlZCk7XG4gICAgfTtcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjbGFzc05hbWVzKHtcbiAgICAgICAgXCJteF9Ub2dnbGVTd2l0Y2hcIjogdHJ1ZSxcbiAgICAgICAgXCJteF9Ub2dnbGVTd2l0Y2hfb25cIjogY2hlY2tlZCxcbiAgICAgICAgXCJteF9Ub2dnbGVTd2l0Y2hfZW5hYmxlZFwiOiAhZGlzYWJsZWQsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8QWNjZXNzaWJsZUJ1dHRvbiB7Li4ucHJvcHN9XG4gICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXN9XG4gICAgICAgICAgICBvbkNsaWNrPXtfb25DbGlja31cbiAgICAgICAgICAgIHJvbGU9XCJzd2l0Y2hcIlxuICAgICAgICAgICAgYXJpYS1jaGVja2VkPXtjaGVja2VkfVxuICAgICAgICAgICAgYXJpYS1kaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgID5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfVG9nZ2xlU3dpdGNoX2JhbGxcIiAvPlxuICAgICAgICA8L0FjY2Vzc2libGVCdXR0b24+XG4gICAgKTtcbn07XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFpQkE7O0FBQ0E7O0FBRUE7Ozs7QUFhQTtlQUNlLFFBQStEO0VBQUEsSUFBOUQ7SUFBRUEsT0FBRjtJQUFXQyxRQUFRLEdBQUcsS0FBdEI7SUFBNkJDO0VBQTdCLENBQThEO0VBQUEsSUFBcEJDLEtBQW9COztFQUMxRSxNQUFNQyxRQUFRLEdBQUcsTUFBTTtJQUNuQixJQUFJSCxRQUFKLEVBQWM7SUFDZEMsUUFBUSxDQUFDLENBQUNGLE9BQUYsQ0FBUjtFQUNILENBSEQ7O0VBS0EsTUFBTUssT0FBTyxHQUFHLElBQUFDLG1CQUFBLEVBQVc7SUFDdkIsbUJBQW1CLElBREk7SUFFdkIsc0JBQXNCTixPQUZDO0lBR3ZCLDJCQUEyQixDQUFDQztFQUhMLENBQVgsQ0FBaEI7RUFNQSxvQkFDSSw2QkFBQyx5QkFBRCw2QkFBc0JFLEtBQXRCO0lBQ0ksU0FBUyxFQUFFRSxPQURmO0lBRUksT0FBTyxFQUFFRCxRQUZiO0lBR0ksSUFBSSxFQUFDLFFBSFQ7SUFJSSxnQkFBY0osT0FKbEI7SUFLSSxpQkFBZUM7RUFMbkIsaUJBT0k7SUFBSyxTQUFTLEVBQUM7RUFBZixFQVBKLENBREo7QUFXSCxDIn0=