"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _AccessibleButton = _interopRequireDefault(require("./AccessibleButton"));

var _Tooltip = _interopRequireDefault(require("./Tooltip"));

const _excluded = ["title", "tooltip", "children", "tooltipClassName", "forceHide", "alignment", "onHideTooltip"];

class AccessibleTooltipButton extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "showTooltip", () => {
      if (this.props.onHover) this.props.onHover(true);
      if (this.props.forceHide) return;
      this.setState({
        hover: true
      });
    });
    (0, _defineProperty2.default)(this, "hideTooltip", ev => {
      if (this.props.onHover) this.props.onHover(false);
      this.setState({
        hover: false
      });
      this.props.onHideTooltip?.(ev);
    });
    (0, _defineProperty2.default)(this, "onFocus", ev => {
      // We only show the tooltip if focus arrived here from some other
      // element, to avoid leaving tooltips hanging around when a modal closes
      if (ev.relatedTarget) this.showTooltip();
    });
    this.state = {
      hover: false
    };
  }

  componentDidUpdate(prevProps) {
    if (!prevProps.forceHide && this.props.forceHide && this.state.hover) {
      this.setState({
        hover: false
      });
    }
  }

  render() {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const _this$props = this.props,
          {
      title,
      tooltip,
      children,
      tooltipClassName,
      forceHide,
      alignment,
      onHideTooltip
    } = _this$props,
          props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);

    const tip = this.state.hover && /*#__PURE__*/_react.default.createElement(_Tooltip.default, {
      tooltipClassName: tooltipClassName,
      label: tooltip || title,
      alignment: alignment
    });

    return /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, (0, _extends2.default)({}, props, {
      onMouseOver: this.showTooltip,
      onMouseLeave: this.hideTooltip,
      onFocus: this.onFocus,
      onBlur: this.hideTooltip,
      "aria-label": title
    }), children, this.props.label, (tooltip || title) && tip);
  }

}

exports.default = AccessibleTooltipButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBY2Nlc3NpYmxlVG9vbHRpcEJ1dHRvbiIsIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJvbkhvdmVyIiwiZm9yY2VIaWRlIiwic2V0U3RhdGUiLCJob3ZlciIsImV2Iiwib25IaWRlVG9vbHRpcCIsInJlbGF0ZWRUYXJnZXQiLCJzaG93VG9vbHRpcCIsInN0YXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwicHJldlByb3BzIiwicmVuZGVyIiwidGl0bGUiLCJ0b29sdGlwIiwiY2hpbGRyZW4iLCJ0b29sdGlwQ2xhc3NOYW1lIiwiYWxpZ25tZW50IiwidGlwIiwiaGlkZVRvb2x0aXAiLCJvbkZvY3VzIiwibGFiZWwiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy92aWV3cy9lbGVtZW50cy9BY2Nlc3NpYmxlVG9vbHRpcEJ1dHRvbi50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE5IE1pY2hhZWwgVGVsYXR5bnNraSA8N3QzY2hndXlAZ21haWwuY29tPlxuQ29weXJpZ2h0IDIwMTkgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgUmVhY3QsIHsgU3ludGhldGljRXZlbnQsIEZvY3VzRXZlbnQgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBBY2Nlc3NpYmxlQnV0dG9uIGZyb20gXCIuL0FjY2Vzc2libGVCdXR0b25cIjtcbmltcG9ydCBUb29sdGlwLCB7IEFsaWdubWVudCB9IGZyb20gJy4vVG9vbHRpcCc7XG5cbmludGVyZmFjZSBJUHJvcHMgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnRQcm9wczx0eXBlb2YgQWNjZXNzaWJsZUJ1dHRvbj4ge1xuICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgdG9vbHRpcD86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgICBsYWJlbD86IHN0cmluZztcbiAgICB0b29sdGlwQ2xhc3NOYW1lPzogc3RyaW5nO1xuICAgIGZvcmNlSGlkZT86IGJvb2xlYW47XG4gICAgYWxpZ25tZW50PzogQWxpZ25tZW50O1xuICAgIG9uSG92ZXI/OiAoaG92ZXJpbmc6IGJvb2xlYW4pID0+IHZvaWQ7XG4gICAgb25IaWRlVG9vbHRpcD8oZXY6IFN5bnRoZXRpY0V2ZW50KTogdm9pZDtcbn1cblxuaW50ZXJmYWNlIElTdGF0ZSB7XG4gICAgaG92ZXI6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFjY2Vzc2libGVUb29sdGlwQnV0dG9uIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxJUHJvcHMsIElTdGF0ZT4ge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBJUHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgaG92ZXI6IGZhbHNlLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHM6IFJlYWRvbmx5PElQcm9wcz4pIHtcbiAgICAgICAgaWYgKCFwcmV2UHJvcHMuZm9yY2VIaWRlICYmIHRoaXMucHJvcHMuZm9yY2VIaWRlICYmIHRoaXMuc3RhdGUuaG92ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIGhvdmVyOiBmYWxzZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzaG93VG9vbHRpcCA9ICgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMub25Ib3ZlcikgdGhpcy5wcm9wcy5vbkhvdmVyKHRydWUpO1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5mb3JjZUhpZGUpIHJldHVybjtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBob3ZlcjogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgaGlkZVRvb2x0aXAgPSAoZXY6IFN5bnRoZXRpY0V2ZW50KSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9uSG92ZXIpIHRoaXMucHJvcHMub25Ib3ZlcihmYWxzZSk7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgaG92ZXI6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkhpZGVUb29sdGlwPy4oZXYpO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uRm9jdXMgPSAoZXY6IEZvY3VzRXZlbnQpID0+IHtcbiAgICAgICAgLy8gV2Ugb25seSBzaG93IHRoZSB0b29sdGlwIGlmIGZvY3VzIGFycml2ZWQgaGVyZSBmcm9tIHNvbWUgb3RoZXJcbiAgICAgICAgLy8gZWxlbWVudCwgdG8gYXZvaWQgbGVhdmluZyB0b29sdGlwcyBoYW5naW5nIGFyb3VuZCB3aGVuIGEgbW9kYWwgY2xvc2VzXG4gICAgICAgIGlmIChldi5yZWxhdGVkVGFyZ2V0KSB0aGlzLnNob3dUb29sdGlwKCk7XG4gICAgfTtcblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgICAgICBjb25zdCB7IHRpdGxlLCB0b29sdGlwLCBjaGlsZHJlbiwgdG9vbHRpcENsYXNzTmFtZSwgZm9yY2VIaWRlLCBhbGlnbm1lbnQsIG9uSGlkZVRvb2x0aXAsXG4gICAgICAgICAgICAuLi5wcm9wcyB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgICBjb25zdCB0aXAgPSB0aGlzLnN0YXRlLmhvdmVyICYmIDxUb29sdGlwXG4gICAgICAgICAgICB0b29sdGlwQ2xhc3NOYW1lPXt0b29sdGlwQ2xhc3NOYW1lfVxuICAgICAgICAgICAgbGFiZWw9e3Rvb2x0aXAgfHwgdGl0bGV9XG4gICAgICAgICAgICBhbGlnbm1lbnQ9e2FsaWdubWVudH1cbiAgICAgICAgLz47XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8QWNjZXNzaWJsZUJ1dHRvblxuICAgICAgICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICAgICAgICBvbk1vdXNlT3Zlcj17dGhpcy5zaG93VG9vbHRpcH1cbiAgICAgICAgICAgICAgICBvbk1vdXNlTGVhdmU9e3RoaXMuaGlkZVRvb2x0aXB9XG4gICAgICAgICAgICAgICAgb25Gb2N1cz17dGhpcy5vbkZvY3VzfVxuICAgICAgICAgICAgICAgIG9uQmx1cj17dGhpcy5oaWRlVG9vbHRpcH1cbiAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPXt0aXRsZX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7IGNoaWxkcmVuIH1cbiAgICAgICAgICAgICAgICB7IHRoaXMucHJvcHMubGFiZWwgfVxuICAgICAgICAgICAgICAgIHsgKHRvb2x0aXAgfHwgdGl0bGUpICYmIHRpcCB9XG4gICAgICAgICAgICA8L0FjY2Vzc2libGVCdXR0b24+XG4gICAgICAgICk7XG4gICAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFpQkE7O0FBRUE7O0FBQ0E7Ozs7QUFpQmUsTUFBTUEsdUJBQU4sU0FBc0NDLGNBQUEsQ0FBTUMsYUFBNUMsQ0FBMEU7RUFDckZDLFdBQVcsQ0FBQ0MsS0FBRCxFQUFnQjtJQUN2QixNQUFNQSxLQUFOO0lBRHVCLG1EQWVMLE1BQU07TUFDeEIsSUFBSSxLQUFLQSxLQUFMLENBQVdDLE9BQWYsRUFBd0IsS0FBS0QsS0FBTCxDQUFXQyxPQUFYLENBQW1CLElBQW5CO01BQ3hCLElBQUksS0FBS0QsS0FBTCxDQUFXRSxTQUFmLEVBQTBCO01BQzFCLEtBQUtDLFFBQUwsQ0FBYztRQUNWQyxLQUFLLEVBQUU7TUFERyxDQUFkO0lBR0gsQ0FyQjBCO0lBQUEsbURBdUJKQyxFQUFELElBQXdCO01BQzFDLElBQUksS0FBS0wsS0FBTCxDQUFXQyxPQUFmLEVBQXdCLEtBQUtELEtBQUwsQ0FBV0MsT0FBWCxDQUFtQixLQUFuQjtNQUN4QixLQUFLRSxRQUFMLENBQWM7UUFDVkMsS0FBSyxFQUFFO01BREcsQ0FBZDtNQUdBLEtBQUtKLEtBQUwsQ0FBV00sYUFBWCxHQUEyQkQsRUFBM0I7SUFDSCxDQTdCMEI7SUFBQSwrQ0ErQlJBLEVBQUQsSUFBb0I7TUFDbEM7TUFDQTtNQUNBLElBQUlBLEVBQUUsQ0FBQ0UsYUFBUCxFQUFzQixLQUFLQyxXQUFMO0lBQ3pCLENBbkMwQjtJQUV2QixLQUFLQyxLQUFMLEdBQWE7TUFDVEwsS0FBSyxFQUFFO0lBREUsQ0FBYjtFQUdIOztFQUVETSxrQkFBa0IsQ0FBQ0MsU0FBRCxFQUE4QjtJQUM1QyxJQUFJLENBQUNBLFNBQVMsQ0FBQ1QsU0FBWCxJQUF3QixLQUFLRixLQUFMLENBQVdFLFNBQW5DLElBQWdELEtBQUtPLEtBQUwsQ0FBV0wsS0FBL0QsRUFBc0U7TUFDbEUsS0FBS0QsUUFBTCxDQUFjO1FBQ1ZDLEtBQUssRUFBRTtNQURHLENBQWQ7SUFHSDtFQUNKOztFQXdCRFEsTUFBTSxHQUFHO0lBQ0w7SUFDQSxvQkFDaUIsS0FBS1osS0FEdEI7SUFBQSxNQUFNO01BQUVhLEtBQUY7TUFBU0MsT0FBVDtNQUFrQkMsUUFBbEI7TUFBNEJDLGdCQUE1QjtNQUE4Q2QsU0FBOUM7TUFBeURlLFNBQXpEO01BQW9FWDtJQUFwRSxDQUFOO0lBQUEsTUFDT04sS0FEUDs7SUFHQSxNQUFNa0IsR0FBRyxHQUFHLEtBQUtULEtBQUwsQ0FBV0wsS0FBWCxpQkFBb0IsNkJBQUMsZ0JBQUQ7TUFDNUIsZ0JBQWdCLEVBQUVZLGdCQURVO01BRTVCLEtBQUssRUFBRUYsT0FBTyxJQUFJRCxLQUZVO01BRzVCLFNBQVMsRUFBRUk7SUFIaUIsRUFBaEM7O0lBS0Esb0JBQ0ksNkJBQUMseUJBQUQsNkJBQ1FqQixLQURSO01BRUksV0FBVyxFQUFFLEtBQUtRLFdBRnRCO01BR0ksWUFBWSxFQUFFLEtBQUtXLFdBSHZCO01BSUksT0FBTyxFQUFFLEtBQUtDLE9BSmxCO01BS0ksTUFBTSxFQUFFLEtBQUtELFdBTGpCO01BTUksY0FBWU47SUFOaEIsSUFRTUUsUUFSTixFQVNNLEtBQUtmLEtBQUwsQ0FBV3FCLEtBVGpCLEVBVU0sQ0FBQ1AsT0FBTyxJQUFJRCxLQUFaLEtBQXNCSyxHQVY1QixDQURKO0VBY0g7O0FBOURvRiJ9