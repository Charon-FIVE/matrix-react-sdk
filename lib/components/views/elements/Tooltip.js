"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Alignment = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _classnames = _interopRequireDefault(require("classnames"));

var _UIStore = _interopRequireDefault(require("../../../stores/UIStore"));

var _objects = require("../../../utils/objects");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

let Alignment;
exports.Alignment = Alignment;

(function (Alignment) {
  Alignment[Alignment["Natural"] = 0] = "Natural";
  Alignment[Alignment["Left"] = 1] = "Left";
  Alignment[Alignment["Right"] = 2] = "Right";
  Alignment[Alignment["Top"] = 3] = "Top";
  Alignment[Alignment["Bottom"] = 4] = "Bottom";
  Alignment[Alignment["InnerBottom"] = 5] = "InnerBottom";
  Alignment[Alignment["TopRight"] = 6] = "TopRight";
})(Alignment || (exports.Alignment = Alignment = {}));

class Tooltip extends _react.default.PureComponent {
  // XXX: This is because some components (Field) are unable to `import` the Tooltip class,
  // so we expose the Alignment options off of us statically.
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "parent", void 0);
    (0, _defineProperty2.default)(this, "updatePosition", () => {
      // When the tooltip is hidden, no need to thrash the DOM with `style` attribute updates (performance)
      if (!this.props.visible) return;
      const parentBox = this.parent.getBoundingClientRect();
      const width = _UIStore.default.instance.windowWidth;
      const spacing = 6;
      const parentWidth = this.props.maxParentWidth ? Math.min(parentBox.width, this.props.maxParentWidth) : parentBox.width;
      const baseTop = parentBox.top + window.scrollY;
      const centerTop = parentBox.top + window.scrollY + parentBox.height / 2;
      const right = width - parentBox.left - window.scrollX;
      const left = parentBox.right + window.scrollX;
      const horizontalCenter = parentBox.left - window.scrollX + parentWidth / 2;
      const style = {};

      switch (this.props.alignment) {
        case Alignment.Natural:
          if (parentBox.right > width / 2) {
            style.right = right + spacing;
            style.top = centerTop;
            style.transform = "translateY(-50%)";
            break;
          }

        // fall through to Right

        case Alignment.Right:
          style.left = left + spacing;
          style.top = centerTop;
          style.transform = "translateY(-50%)";
          break;

        case Alignment.Left:
          style.right = right + spacing;
          style.top = centerTop;
          style.transform = "translateY(-50%)";
          break;

        case Alignment.Top:
          style.top = baseTop - spacing;
          style.left = horizontalCenter;
          style.transform = "translate(-50%, -100%)";
          break;

        case Alignment.Bottom:
          style.top = baseTop + parentBox.height + spacing;
          style.left = horizontalCenter;
          style.transform = "translate(-50%)";
          break;

        case Alignment.InnerBottom:
          style.top = baseTop + parentBox.height - 50;
          style.left = horizontalCenter;
          style.transform = "translate(-50%)";
          break;

        case Alignment.TopRight:
          style.top = baseTop - spacing;
          style.right = width - parentBox.right - window.scrollX;
          style.transform = "translateY(-100%)";
          break;
      }

      this.setState(style);
    });
    this.state = {}; // Create a wrapper for the tooltips and attach it to the body element

    if (!Tooltip.container) {
      Tooltip.container = document.createElement("div");
      Tooltip.container.className = "mx_Tooltip_wrapper";
      document.body.appendChild(Tooltip.container);
    }
  }

  componentDidMount() {
    window.addEventListener('scroll', this.updatePosition, {
      passive: true,
      capture: true
    });
    this.parent = _reactDom.default.findDOMNode(this).parentNode;
    this.updatePosition();
  }

  componentDidUpdate(prevProps) {
    if ((0, _objects.objectHasDiff)(prevProps, this.props)) {
      this.updatePosition();
    }
  } // Remove the wrapper element, as the tooltip has finished using it


  componentWillUnmount() {
    window.removeEventListener('scroll', this.updatePosition, {
      capture: true
    });
  } // Add the parent's position to the tooltips, so it's correctly
  // positioned, also taking into account any window zoom


  render() {
    const tooltipClasses = (0, _classnames.default)("mx_Tooltip", this.props.tooltipClassName, {
      "mx_Tooltip_visible": this.props.visible,
      "mx_Tooltip_invisible": !this.props.visible
    });

    const style = _objectSpread({}, this.state); // Hide the entire container when not visible.
    // This prevents flashing of the tooltip if it is not meant to be visible on first mount.


    style.display = this.props.visible ? "block" : "none";

    const tooltip = /*#__PURE__*/_react.default.createElement("div", {
      role: "tooltip",
      className: tooltipClasses,
      style: style
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Tooltip_chevron"
    }), this.props.label);

    return /*#__PURE__*/_react.default.createElement("div", {
      className: this.props.className
    }, /*#__PURE__*/_reactDom.default.createPortal(tooltip, Tooltip.container));
  }

}

exports.default = Tooltip;
(0, _defineProperty2.default)(Tooltip, "container", void 0);
(0, _defineProperty2.default)(Tooltip, "Alignment", Alignment);
(0, _defineProperty2.default)(Tooltip, "defaultProps", {
  visible: true,
  alignment: Alignment.Natural
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,