"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _useFocus = _interopRequireDefault(require("../../../hooks/useFocus"));

var _useHover = _interopRequireDefault(require("../../../hooks/useHover"));

var _Tooltip = _interopRequireDefault(require("./Tooltip"));

const _excluded = ["children", "tooltipTargetClassName", "className", "id", "label", "alignment", "tooltipClassName", "maxParentWidth", "ignoreHover"];

/**
 * Generic tooltip target element that handles tooltip visibility state
 * and displays children
 */
const TooltipTarget = _ref => {
  let {
    children,
    tooltipTargetClassName,
    // tooltip pass through props
    className,
    id,
    label,
    alignment,
    tooltipClassName,
    maxParentWidth,
    ignoreHover
  } = _ref,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  const [isFocused, focusProps] = (0, _useFocus.default)();
  const [isHovering, hoverProps] = (0, _useHover.default)(ignoreHover || (() => false)); // No need to fill up the DOM with hidden tooltip elements. Only add the
  // tooltip when we're hovering over the item (performance)

  const tooltip = (isFocused || isHovering) && /*#__PURE__*/_react.default.createElement(_Tooltip.default, {
    id: id,
    className: className,
    tooltipClassName: tooltipClassName,
    label: label,
    alignment: alignment,
    visible: isFocused || isHovering,
    maxParentWidth: maxParentWidth
  });

  return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({}, hoverProps, focusProps, {
    tabIndex: 0,
    "aria-describedby": id,
    className: tooltipTargetClassName
  }, rest), children, tooltip);
};

var _default = TooltipTarget;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUb29sdGlwVGFyZ2V0IiwiY2hpbGRyZW4iLCJ0b29sdGlwVGFyZ2V0Q2xhc3NOYW1lIiwiY2xhc3NOYW1lIiwiaWQiLCJsYWJlbCIsImFsaWdubWVudCIsInRvb2x0aXBDbGFzc05hbWUiLCJtYXhQYXJlbnRXaWR0aCIsImlnbm9yZUhvdmVyIiwicmVzdCIsImlzRm9jdXNlZCIsImZvY3VzUHJvcHMiLCJ1c2VGb2N1cyIsImlzSG92ZXJpbmciLCJob3ZlclByb3BzIiwidXNlSG92ZXIiLCJ0b29sdGlwIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvdmlld3MvZWxlbWVudHMvVG9vbHRpcFRhcmdldC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDIxIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0LCB7IEhUTUxBdHRyaWJ1dGVzIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgdXNlRm9jdXMgZnJvbSBcIi4uLy4uLy4uL2hvb2tzL3VzZUZvY3VzXCI7XG5pbXBvcnQgdXNlSG92ZXIgZnJvbSBcIi4uLy4uLy4uL2hvb2tzL3VzZUhvdmVyXCI7XG5pbXBvcnQgVG9vbHRpcCwgeyBJVG9vbHRpcFByb3BzIH0gZnJvbSAnLi9Ub29sdGlwJztcblxuaW50ZXJmYWNlIElQcm9wcyBleHRlbmRzIEhUTUxBdHRyaWJ1dGVzPEhUTUxTcGFuRWxlbWVudD4sIE9taXQ8SVRvb2x0aXBQcm9wcywgJ3Zpc2libGUnPiB7XG4gICAgdG9vbHRpcFRhcmdldENsYXNzTmFtZT86IHN0cmluZztcbiAgICBpZ25vcmVIb3Zlcj86IChldjogUmVhY3QuTW91c2VFdmVudCkgPT4gYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBHZW5lcmljIHRvb2x0aXAgdGFyZ2V0IGVsZW1lbnQgdGhhdCBoYW5kbGVzIHRvb2x0aXAgdmlzaWJpbGl0eSBzdGF0ZVxuICogYW5kIGRpc3BsYXlzIGNoaWxkcmVuXG4gKi9cbmNvbnN0IFRvb2x0aXBUYXJnZXQ6IFJlYWN0LkZDPElQcm9wcz4gPSAoe1xuICAgIGNoaWxkcmVuLFxuICAgIHRvb2x0aXBUYXJnZXRDbGFzc05hbWUsXG4gICAgLy8gdG9vbHRpcCBwYXNzIHRocm91Z2ggcHJvcHNcbiAgICBjbGFzc05hbWUsXG4gICAgaWQsXG4gICAgbGFiZWwsXG4gICAgYWxpZ25tZW50LFxuICAgIHRvb2x0aXBDbGFzc05hbWUsXG4gICAgbWF4UGFyZW50V2lkdGgsXG4gICAgaWdub3JlSG92ZXIsXG4gICAgLi4ucmVzdFxufSkgPT4ge1xuICAgIGNvbnN0IFtpc0ZvY3VzZWQsIGZvY3VzUHJvcHNdID0gdXNlRm9jdXMoKTtcbiAgICBjb25zdCBbaXNIb3ZlcmluZywgaG92ZXJQcm9wc10gPSB1c2VIb3ZlcihpZ25vcmVIb3ZlciB8fCAoKCkgPT4gZmFsc2UpKTtcblxuICAgIC8vIE5vIG5lZWQgdG8gZmlsbCB1cCB0aGUgRE9NIHdpdGggaGlkZGVuIHRvb2x0aXAgZWxlbWVudHMuIE9ubHkgYWRkIHRoZVxuICAgIC8vIHRvb2x0aXAgd2hlbiB3ZSdyZSBob3ZlcmluZyBvdmVyIHRoZSBpdGVtIChwZXJmb3JtYW5jZSlcbiAgICBjb25zdCB0b29sdGlwID0gKGlzRm9jdXNlZCB8fCBpc0hvdmVyaW5nKSAmJiA8VG9vbHRpcFxuICAgICAgICBpZD17aWR9XG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgICB0b29sdGlwQ2xhc3NOYW1lPXt0b29sdGlwQ2xhc3NOYW1lfVxuICAgICAgICBsYWJlbD17bGFiZWx9XG4gICAgICAgIGFsaWdubWVudD17YWxpZ25tZW50fVxuICAgICAgICB2aXNpYmxlPXtpc0ZvY3VzZWQgfHwgaXNIb3ZlcmluZ31cbiAgICAgICAgbWF4UGFyZW50V2lkdGg9e21heFBhcmVudFdpZHRofVxuICAgIC8+O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdlxuICAgICAgICAgICAgey4uLmhvdmVyUHJvcHN9XG4gICAgICAgICAgICB7Li4uZm9jdXNQcm9wc31cbiAgICAgICAgICAgIHRhYkluZGV4PXswfVxuICAgICAgICAgICAgYXJpYS1kZXNjcmliZWRieT17aWR9XG4gICAgICAgICAgICBjbGFzc05hbWU9e3Rvb2x0aXBUYXJnZXRDbGFzc05hbWV9XG4gICAgICAgICAgICB7Li4ucmVzdH1cbiAgICAgICAgPlxuICAgICAgICAgICAgeyBjaGlsZHJlbiB9XG4gICAgICAgICAgICB7IHRvb2x0aXAgfVxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVG9vbHRpcFRhcmdldDtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQWdCQTs7QUFFQTs7QUFDQTs7QUFDQTs7OztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUEsYUFBK0IsR0FBRyxRQVlsQztFQUFBLElBWm1DO0lBQ3JDQyxRQURxQztJQUVyQ0Msc0JBRnFDO0lBR3JDO0lBQ0FDLFNBSnFDO0lBS3JDQyxFQUxxQztJQU1yQ0MsS0FOcUM7SUFPckNDLFNBUHFDO0lBUXJDQyxnQkFScUM7SUFTckNDLGNBVHFDO0lBVXJDQztFQVZxQyxDQVluQztFQUFBLElBRENDLElBQ0Q7RUFDRixNQUFNLENBQUNDLFNBQUQsRUFBWUMsVUFBWixJQUEwQixJQUFBQyxpQkFBQSxHQUFoQztFQUNBLE1BQU0sQ0FBQ0MsVUFBRCxFQUFhQyxVQUFiLElBQTJCLElBQUFDLGlCQUFBLEVBQVNQLFdBQVcsS0FBSyxNQUFNLEtBQVgsQ0FBcEIsQ0FBakMsQ0FGRSxDQUlGO0VBQ0E7O0VBQ0EsTUFBTVEsT0FBTyxHQUFHLENBQUNOLFNBQVMsSUFBSUcsVUFBZCxrQkFBNkIsNkJBQUMsZ0JBQUQ7SUFDekMsRUFBRSxFQUFFVixFQURxQztJQUV6QyxTQUFTLEVBQUVELFNBRjhCO0lBR3pDLGdCQUFnQixFQUFFSSxnQkFIdUI7SUFJekMsS0FBSyxFQUFFRixLQUprQztJQUt6QyxTQUFTLEVBQUVDLFNBTDhCO0lBTXpDLE9BQU8sRUFBRUssU0FBUyxJQUFJRyxVQU5tQjtJQU96QyxjQUFjLEVBQUVOO0VBUHlCLEVBQTdDOztFQVVBLG9CQUNJLCtEQUNRTyxVQURSLEVBRVFILFVBRlI7SUFHSSxRQUFRLEVBQUUsQ0FIZDtJQUlJLG9CQUFrQlIsRUFKdEI7SUFLSSxTQUFTLEVBQUVGO0VBTGYsR0FNUVEsSUFOUixHQVFNVCxRQVJOLEVBU01nQixPQVROLENBREo7QUFhSCxDQXpDRDs7ZUEyQ2VqQixhIn0=