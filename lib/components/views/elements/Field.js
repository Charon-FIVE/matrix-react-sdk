"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = require("lodash");

var _Tooltip = _interopRequireDefault(require("./Tooltip"));

const _excluded = ["element", "inputRef", "prefixComponent", "postfixComponent", "className", "onValidate", "children", "tooltipContent", "forceValidity", "tooltipClassName", "list", "validateOnBlur", "validateOnChange", "validateOnFocus", "usePlaceholderAsHint", "forceTooltipVisible"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

// Invoke validation from user input (when typing, etc.) at most once every N ms.
const VALIDATION_THROTTLE_MS = 200;
const BASE_ID = "mx_Field";
let count = 1;

function getId() {
  return `${BASE_ID}_${count++}`;
}

class Field extends _react.default.PureComponent {
  /*
   * This was changed from throttle to debounce: this is more traditional for
   * form validation since it means that the validation doesn't happen at all
   * until the user stops typing for a bit (debounce defaults to not running on
   * the leading edge). If we're doing an HTTP hit on each validation, we have more
   * incentive to prevent validating input that's very unlikely to be valid.
   * We may find that we actually want different behaviour for registration
   * fields, in which case we can add some options to control it.
   */
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "id", void 0);
    (0, _defineProperty2.default)(this, "inputRef", void 0);
    (0, _defineProperty2.default)(this, "validateOnChange", (0, _lodash.debounce)(() => {
      this.validate({
        focused: true
      });
    }, VALIDATION_THROTTLE_MS));
    (0, _defineProperty2.default)(this, "onFocus", ev => {
      this.setState({
        focused: true
      });

      if (this.props.validateOnFocus) {
        this.validate({
          focused: true
        });
      } // Parent component may have supplied its own `onFocus` as well


      if (this.props.onFocus) {
        this.props.onFocus(ev);
      }
    });
    (0, _defineProperty2.default)(this, "onChange", ev => {
      if (this.props.validateOnChange) {
        this.validateOnChange();
      } // Parent component may have supplied its own `onChange` as well


      if (this.props.onChange) {
        this.props.onChange(ev);
      }
    });
    (0, _defineProperty2.default)(this, "onBlur", ev => {
      this.setState({
        focused: false
      });

      if (this.props.validateOnBlur) {
        this.validate({
          focused: false
        });
      } // Parent component may have supplied its own `onBlur` as well


      if (this.props.onBlur) {
        this.props.onBlur(ev);
      }
    });
    this.state = {
      valid: undefined,
      feedback: undefined,
      feedbackVisible: false,
      focused: false
    };
    this.id = this.props.id || getId();
  }

  focus() {
    this.inputRef.current?.focus(); // programmatic does not fire onFocus handler

    this.setState({
      focused: true
    });
  }

  async validate(_ref) {
    let {
      focused,
      allowEmpty = true
    } = _ref;

    if (!this.props.onValidate) {
      return;
    }

    const value = this.inputRef.current?.value ?? null;
    const {
      valid,
      feedback
    } = await this.props.onValidate({
      value,
      focused,
      allowEmpty
    }); // this method is async and so we may have been blurred since the method was called
    // if we have then hide the feedback as withValidation does

    if (this.state.focused && feedback) {
      this.setState({
        valid,
        feedback,
        feedbackVisible: true
      });
    } else {
      // When we receive null `feedback`, we want to hide the tooltip.
      // We leave the previous `feedback` content in state without updating it,
      // so that we can hide the tooltip containing the most recent feedback
      // via CSS animation.
      this.setState({
        valid,
        feedbackVisible: false
      });
    }

    return valid;
  }

  render() {
    /* eslint @typescript-eslint/no-unused-vars: ["error", { "ignoreRestSiblings": true }] */
    const _this$props = this.props,
          {
      element,
      inputRef,
      prefixComponent,
      postfixComponent,
      className,
      onValidate,
      children,
      tooltipContent,
      forceValidity,
      tooltipClassName,
      list,
      validateOnBlur,
      validateOnChange,
      validateOnFocus,
      usePlaceholderAsHint,
      forceTooltipVisible
    } = _this$props,
          inputProps = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
    this.inputRef = inputRef || /*#__PURE__*/_react.default.createRef();
    inputProps.placeholder = inputProps.placeholder || inputProps.label;
    inputProps.id = this.id; // this overwrites the id from props

    inputProps.onFocus = this.onFocus;
    inputProps.onChange = this.onChange;
    inputProps.onBlur = this.onBlur; // Appease typescript's inference

    const inputProps_ = _objectSpread(_objectSpread({}, inputProps), {}, {
      ref: this.inputRef,
      list
    });

    const fieldInput = /*#__PURE__*/_react.default.createElement(this.props.element, inputProps_, children);

    let prefixContainer = null;

    if (prefixComponent) {
      prefixContainer = /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_Field_prefix"
      }, prefixComponent);
    }

    let postfixContainer = null;

    if (postfixComponent) {
      postfixContainer = /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_Field_postfix"
      }, postfixComponent);
    }

    const hasValidationFlag = forceValidity !== null && forceValidity !== undefined;
    const fieldClasses = (0, _classnames.default)("mx_Field", `mx_Field_${this.props.element}`, className, {
      // If we have a prefix element, leave the label always at the top left and
      // don't animate it, as it looks a bit clunky and would add complexity to do
      // properly.
      mx_Field_labelAlwaysTopLeft: prefixComponent || usePlaceholderAsHint,
      mx_Field_placeholderIsHint: usePlaceholderAsHint,
      mx_Field_valid: hasValidationFlag ? forceValidity : onValidate && this.state.valid === true,
      mx_Field_invalid: hasValidationFlag ? !forceValidity : onValidate && this.state.valid === false
    }); // Handle displaying feedback on validity

    let fieldTooltip;

    if (tooltipContent || this.state.feedback) {
      fieldTooltip = /*#__PURE__*/_react.default.createElement(_Tooltip.default, {
        tooltipClassName: (0, _classnames.default)("mx_Field_tooltip", tooltipClassName),
        visible: this.state.focused && forceTooltipVisible || this.state.feedbackVisible,
        label: tooltipContent || this.state.feedback,
        alignment: _Tooltip.default.Alignment.Right
      });
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: fieldClasses
    }, prefixContainer, fieldInput, /*#__PURE__*/_react.default.createElement("label", {
      htmlFor: this.id
    }, this.props.label), postfixContainer, fieldTooltip);
  }

}

exports.default = Field;
(0, _defineProperty2.default)(Field, "defaultProps", {
  element: "input",
  type: "text",
  validateOnFocus: true,
  validateOnBlur: true,
  validateOnChange: true
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,