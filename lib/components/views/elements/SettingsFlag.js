"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _languageHandler = require("../../../languageHandler");

var _ToggleSwitch = _interopRequireDefault(require("./ToggleSwitch"));

var _StyledCheckbox = _interopRequireDefault(require("./StyledCheckbox"));

/*
Copyright 2017 Travis Ralston
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class SettingsFlag extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onChange", async checked => {
      await this.save(checked);
      this.setState({
        value: checked
      });
      if (this.props.onChange) this.props.onChange(checked);
    });
    (0, _defineProperty2.default)(this, "checkBoxOnChange", e => {
      this.onChange(e.target.checked);
    });
    (0, _defineProperty2.default)(this, "save", async val => {
      await _SettingsStore.default.setValue(this.props.name, this.props.roomId, this.props.level, val !== undefined ? val : this.state.value);
    });
    this.state = {
      value: _SettingsStore.default.getValueAt(this.props.level, this.props.name, this.props.roomId, this.props.isExplicit)
    };
  }

  render() {
    const canChange = _SettingsStore.default.canSetValue(this.props.name, this.props.roomId, this.props.level);

    if (!canChange && this.props.hideIfCannotSet) return null;
    const label = this.props.label ? (0, _languageHandler._t)(this.props.label) : _SettingsStore.default.getDisplayName(this.props.name, this.props.level);

    const description = _SettingsStore.default.getDescription(this.props.name);

    let disabledDescription;

    if (this.props.disabled && this.props.disabledDescription) {
      disabledDescription = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_SettingsFlag_microcopy"
      }, this.props.disabledDescription);
    }

    if (this.props.useCheckbox) {
      return /*#__PURE__*/_react.default.createElement(_StyledCheckbox.default, {
        checked: this.state.value,
        onChange: this.checkBoxOnChange,
        disabled: this.props.disabled || !canChange
      }, label);
    } else {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_SettingsFlag"
      }, /*#__PURE__*/_react.default.createElement("label", {
        className: "mx_SettingsFlag_label"
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_SettingsFlag_labelText"
      }, label), description && /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_SettingsFlag_microcopy"
      }, description), disabledDescription), /*#__PURE__*/_react.default.createElement(_ToggleSwitch.default, {
        checked: this.state.value,
        onChange: this.onChange,
        disabled: this.props.disabled || !canChange,
        "aria-label": label
      }));
    }
  }

}

exports.default = SettingsFlag;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,