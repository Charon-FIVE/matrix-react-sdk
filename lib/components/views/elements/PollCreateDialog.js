"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _matrixEventsSdk = require("matrix-events-sdk");

var _ScrollableBaseModal = _interopRequireDefault(require("../dialogs/ScrollableBaseModal"));

var _QuestionDialog = _interopRequireDefault(require("../dialogs/QuestionDialog"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _languageHandler = require("../../../languageHandler");

var _arrays = require("../../../utils/arrays");

var _Field = _interopRequireDefault(require("./Field"));

var _AccessibleButton = _interopRequireDefault(require("./AccessibleButton"));

var _Spinner = _interopRequireDefault(require("./Spinner"));

var _localRoom = require("../../../utils/local-room");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2021 - 2022 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var FocusTarget;

(function (FocusTarget) {
  FocusTarget[FocusTarget["Topic"] = 0] = "Topic";
  FocusTarget[FocusTarget["NewOption"] = 1] = "NewOption";
})(FocusTarget || (FocusTarget = {}));

const MIN_OPTIONS = 2;
const MAX_OPTIONS = 20;
const DEFAULT_NUM_OPTIONS = 2;
const MAX_QUESTION_LENGTH = 340;
const MAX_OPTION_LENGTH = 340;

function creatingInitialState() {
  return {
    title: (0, _languageHandler._t)("Create poll"),
    actionLabel: (0, _languageHandler._t)("Create Poll"),
    canSubmit: false,
    // need to add a question and at least one option first
    question: "",
    options: (0, _arrays.arraySeed)("", DEFAULT_NUM_OPTIONS),
    busy: false,
    kind: _matrixEventsSdk.M_POLL_KIND_DISCLOSED,
    autoFocusTarget: FocusTarget.Topic
  };
}

function editingInitialState(editingMxEvent) {
  const poll = editingMxEvent.unstableExtensibleEvent;
  if (!poll?.isEquivalentTo(_matrixEventsSdk.M_POLL_START)) return creatingInitialState();
  return {
    title: (0, _languageHandler._t)("Edit poll"),
    actionLabel: (0, _languageHandler._t)("Done"),
    canSubmit: true,
    question: poll.question.text,
    options: poll.answers.map(ans => ans.text),
    busy: false,
    kind: poll.kind,
    autoFocusTarget: FocusTarget.Topic
  };
}

class PollCreateDialog extends _ScrollableBaseModal.default {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "addOptionRef", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "onQuestionChange", e => {
      this.setState({
        question: e.target.value
      }, () => this.checkCanSubmit());
    });
    (0, _defineProperty2.default)(this, "onOptionChange", (i, e) => {
      const newOptions = (0, _arrays.arrayFastClone)(this.state.options);
      newOptions[i] = e.target.value;
      this.setState({
        options: newOptions
      }, () => this.checkCanSubmit());
    });
    (0, _defineProperty2.default)(this, "onOptionRemove", i => {
      const newOptions = (0, _arrays.arrayFastClone)(this.state.options);
      newOptions.splice(i, 1);
      this.setState({
        options: newOptions
      }, () => this.checkCanSubmit());
    });
    (0, _defineProperty2.default)(this, "onOptionAdd", () => {
      const newOptions = (0, _arrays.arrayFastClone)(this.state.options);
      newOptions.push("");
      this.setState({
        options: newOptions,
        autoFocusTarget: FocusTarget.NewOption
      }, () => {
        // Scroll the button into view after the state update to ensure we don't experience
        // a pop-in effect, and to avoid the button getting cut off due to a mid-scroll render.
        this.addOptionRef.current?.scrollIntoView?.();
      });
    });
    (0, _defineProperty2.default)(this, "onPollTypeChange", e => {
      this.setState({
        kind: _matrixEventsSdk.M_POLL_KIND_DISCLOSED.matches(e.target.value) ? _matrixEventsSdk.M_POLL_KIND_DISCLOSED : _matrixEventsSdk.M_POLL_KIND_UNDISCLOSED
      });
    });
    this.state = props.editingMxEvent ? editingInitialState(props.editingMxEvent) : creatingInitialState();
  }

  checkCanSubmit() {
    this.setState({
      canSubmit: !this.state.busy && this.state.question.trim().length > 0 && this.state.options.filter(op => op.trim().length > 0).length >= MIN_OPTIONS
    });
  }

  createEvent() {
    const pollStart = _matrixEventsSdk.PollStartEvent.from(this.state.question.trim(), this.state.options.map(a => a.trim()).filter(a => !!a), this.state.kind).serialize();

    if (!this.props.editingMxEvent) {
      return pollStart;
    } else {
      return {
        "content": {
          "m.new_content": pollStart.content,
          "m.relates_to": {
            "rel_type": "m.replace",
            "event_id": this.props.editingMxEvent.getId()
          }
        },
        "type": pollStart.type
      };
    }
  }

  submit() {
    this.setState({
      busy: true,
      canSubmit: false
    });
    const pollEvent = this.createEvent();
    (0, _localRoom.doMaybeLocalRoomAction)(this.props.room.roomId, actualRoomId => this.matrixClient.sendEvent(actualRoomId, this.props.threadId, pollEvent.type, pollEvent.content), this.matrixClient).then(() => this.props.onFinished(true)).catch(e => {
      console.error("Failed to post poll:", e);

      _Modal.default.createDialog(_QuestionDialog.default, {
        title: (0, _languageHandler._t)("Failed to post poll"),
        description: (0, _languageHandler._t)("Sorry, the poll you tried to create was not posted."),
        button: (0, _languageHandler._t)('Try again'),
        cancelButton: (0, _languageHandler._t)('Cancel'),
        onFinished: tryAgain => {
          if (!tryAgain) {
            this.cancel();
          } else {
            this.setState({
              busy: false,
              canSubmit: true
            });
          }
        }
      });
    });
  }

  cancel() {
    this.props.onFinished(false);
  }

  renderContent() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_PollCreateDialog"
    }, /*#__PURE__*/_react.default.createElement("h2", null, (0, _languageHandler._t)("Poll type")), /*#__PURE__*/_react.default.createElement(_Field.default, {
      element: "select",
      value: this.state.kind.name,
      onChange: this.onPollTypeChange
    }, /*#__PURE__*/_react.default.createElement("option", {
      key: _matrixEventsSdk.M_POLL_KIND_DISCLOSED.name,
      value: _matrixEventsSdk.M_POLL_KIND_DISCLOSED.name
    }, (0, _languageHandler._t)("Open poll")), /*#__PURE__*/_react.default.createElement("option", {
      key: _matrixEventsSdk.M_POLL_KIND_UNDISCLOSED.name,
      value: _matrixEventsSdk.M_POLL_KIND_UNDISCLOSED.name
    }, (0, _languageHandler._t)("Closed poll"))), /*#__PURE__*/_react.default.createElement("p", null, pollTypeNotes(this.state.kind)), /*#__PURE__*/_react.default.createElement("h2", null, (0, _languageHandler._t)("What is your poll question or topic?")), /*#__PURE__*/_react.default.createElement(_Field.default, {
      id: "poll-topic-input",
      value: this.state.question,
      maxLength: MAX_QUESTION_LENGTH,
      label: (0, _languageHandler._t)("Question or topic"),
      placeholder: (0, _languageHandler._t)("Write something..."),
      onChange: this.onQuestionChange,
      usePlaceholderAsHint: true,
      disabled: this.state.busy,
      autoFocus: this.state.autoFocusTarget === FocusTarget.Topic
    }), /*#__PURE__*/_react.default.createElement("h2", null, (0, _languageHandler._t)("Create options")), this.state.options.map((op, i) => /*#__PURE__*/_react.default.createElement("div", {
      key: `option_${i}`,
      className: "mx_PollCreateDialog_option"
    }, /*#__PURE__*/_react.default.createElement(_Field.default, {
      id: `pollcreate_option_${i}`,
      value: op,
      maxLength: MAX_OPTION_LENGTH,
      label: (0, _languageHandler._t)("Option %(number)s", {
        number: i + 1
      }),
      placeholder: (0, _languageHandler._t)("Write an option"),
      onChange: e => this.onOptionChange(i, e),
      usePlaceholderAsHint: true,
      disabled: this.state.busy,
      autoFocus: this.state.autoFocusTarget === FocusTarget.NewOption && i === this.state.options.length - 1
    }), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: () => this.onOptionRemove(i),
      className: "mx_PollCreateDialog_removeOption",
      disabled: this.state.busy
    }))), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onOptionAdd,
      disabled: this.state.busy || this.state.options.length >= MAX_OPTIONS,
      kind: "secondary",
      className: "mx_PollCreateDialog_addOption",
      inputRef: this.addOptionRef
    }, (0, _languageHandler._t)("Add option")), this.state.busy && /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_PollCreateDialog_busy"
    }, /*#__PURE__*/_react.default.createElement(_Spinner.default, null)));
  }

}

exports.default = PollCreateDialog;

function pollTypeNotes(kind) {
  if (_matrixEventsSdk.M_POLL_KIND_DISCLOSED.matches(kind.name)) {
    return (0, _languageHandler._t)("Voters see results as soon as they have voted");
  } else {
    return (0, _languageHandler._t)("Results are only revealed when you end the poll");
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,