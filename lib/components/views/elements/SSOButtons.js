"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _lodash = require("lodash");

var _classnames = _interopRequireDefault(require("classnames"));

var _PlatformPeg = _interopRequireDefault(require("../../../PlatformPeg"));

var _AccessibleButton = _interopRequireDefault(require("./AccessibleButton"));

var _languageHandler = require("../../../languageHandler");

var _Login = require("../../../Login");

var _AccessibleTooltipButton = _interopRequireDefault(require("./AccessibleTooltipButton"));

var _Media = require("../../../customisations/Media");

var _PosthogAnalytics = require("../../../PosthogAnalytics");

const _excluded = ["matrixClient", "loginType", "fragmentAfterLogin", "idp", "primary", "mini"];

const getIcon = brand => {
  switch (brand) {
    case _Login.IdentityProviderBrand.Apple:
      return require(`../../../../res/img/element-icons/brands/apple.svg`).default;

    case _Login.IdentityProviderBrand.Facebook:
      return require(`../../../../res/img/element-icons/brands/facebook.svg`).default;

    case _Login.IdentityProviderBrand.Github:
      return require(`../../../../res/img/element-icons/brands/github.svg`).default;

    case _Login.IdentityProviderBrand.Gitlab:
      return require(`../../../../res/img/element-icons/brands/gitlab.svg`).default;

    case _Login.IdentityProviderBrand.Google:
      return require(`../../../../res/img/element-icons/brands/google.svg`).default;

    case _Login.IdentityProviderBrand.Twitter:
      return require(`../../../../res/img/element-icons/brands/twitter.svg`).default;

    default:
      return null;
  }
};

const getAuthenticationType = brand => {
  switch (brand) {
    case _Login.IdentityProviderBrand.Apple:
      return "Apple";

    case _Login.IdentityProviderBrand.Facebook:
      return "Facebook";

    case _Login.IdentityProviderBrand.Github:
      return "GitHub";

    case _Login.IdentityProviderBrand.Gitlab:
      return "GitLab";

    case _Login.IdentityProviderBrand.Google:
      return "Google";
    // Not supported on the analytics SDK at the moment.
    // case IdentityProviderBrand.Twitter:
    //     return "Twitter";

    default:
      return "SSO";
  }
};

const SSOButton = _ref => {
  let {
    matrixClient,
    loginType,
    fragmentAfterLogin,
    idp,
    primary,
    mini
  } = _ref,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  const label = idp ? (0, _languageHandler._t)("Continue with %(provider)s", {
    provider: idp.name
  }) : (0, _languageHandler._t)("Sign in with single sign-on");

  const onClick = () => {
    const authenticationType = getAuthenticationType(idp?.brand ?? "");

    _PosthogAnalytics.PosthogAnalytics.instance.setAuthenticationType(authenticationType);

    _PlatformPeg.default.get().startSingleSignOn(matrixClient, loginType, fragmentAfterLogin, idp?.id);
  };

  let icon;
  let brandClass;
  const brandIcon = idp ? getIcon(idp.brand) : null;

  if (brandIcon) {
    const brandName = idp.brand.split(".").pop();
    brandClass = `mx_SSOButton_brand_${brandName}`;
    icon = /*#__PURE__*/_react.default.createElement("img", {
      src: brandIcon,
      height: "24",
      width: "24",
      alt: brandName
    });
  } else if (typeof idp?.icon === "string" && idp.icon.startsWith("mxc://")) {
    const src = (0, _Media.mediaFromMxc)(idp.icon, matrixClient).getSquareThumbnailHttp(24);
    icon = /*#__PURE__*/_react.default.createElement("img", {
      src: src,
      height: "24",
      width: "24",
      alt: idp.name
    });
  }

  const classes = (0, _classnames.default)("mx_SSOButton", {
    [brandClass]: brandClass,
    mx_SSOButton_mini: mini,
    mx_SSOButton_default: !idp,
    mx_SSOButton_primary: primary
  });

  if (mini) {
    // TODO fallback icon
    return /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, (0, _extends2.default)({}, props, {
      title: label,
      className: classes,
      onClick: onClick
    }), icon);
  }

  return /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, (0, _extends2.default)({}, props, {
    className: classes,
    onClick: onClick
  }), icon, label);
};

const MAX_PER_ROW = 6;

const SSOButtons = _ref2 => {
  let {
    matrixClient,
    flow,
    loginType,
    fragmentAfterLogin,
    primary
  } = _ref2;
  const providers = flow.identity_providers || [];

  if (providers.length < 2) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SSOButtons"
    }, /*#__PURE__*/_react.default.createElement(SSOButton, {
      matrixClient: matrixClient,
      loginType: loginType,
      fragmentAfterLogin: fragmentAfterLogin,
      idp: providers[0],
      primary: primary
    }));
  }

  const rows = Math.ceil(providers.length / MAX_PER_ROW);
  const size = Math.ceil(providers.length / rows);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SSOButtons"
  }, (0, _lodash.chunk)(providers, size).map(chunk => /*#__PURE__*/_react.default.createElement("div", {
    key: chunk[0].id,
    className: "mx_SSOButtons_row"
  }, chunk.map(idp => /*#__PURE__*/_react.default.createElement(SSOButton, {
    key: idp.id,
    matrixClient: matrixClient,
    loginType: loginType,
    fragmentAfterLogin: fragmentAfterLogin,
    idp: idp,
    mini: true,
    primary: primary
  })))));
};

var _default = SSOButtons;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,