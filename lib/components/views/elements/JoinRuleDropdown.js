"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _partials = require("matrix-js-sdk/src/@types/partials");

var _Dropdown = _interopRequireDefault(require("./Dropdown"));

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const JoinRuleDropdown = _ref => {
  let {
    label,
    labelInvite,
    labelPublic,
    labelRestricted,
    value,
    width = 448,
    onChange
  } = _ref;
  const options = [/*#__PURE__*/_react.default.createElement("div", {
    key: _partials.JoinRule.Invite,
    className: "mx_JoinRuleDropdown_invite"
  }, labelInvite), /*#__PURE__*/_react.default.createElement("div", {
    key: _partials.JoinRule.Public,
    className: "mx_JoinRuleDropdown_public"
  }, labelPublic)];

  if (labelRestricted) {
    options.unshift( /*#__PURE__*/_react.default.createElement("div", {
      key: _partials.JoinRule.Restricted,
      className: "mx_JoinRuleDropdown_restricted"
    }, labelRestricted));
  }

  return /*#__PURE__*/_react.default.createElement(_Dropdown.default, {
    id: "mx_JoinRuleDropdown",
    className: "mx_JoinRuleDropdown",
    onOptionChange: onChange,
    menuWidth: width,
    value: value,
    label: label
  }, options);
};

var _default = JoinRuleDropdown;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJKb2luUnVsZURyb3Bkb3duIiwibGFiZWwiLCJsYWJlbEludml0ZSIsImxhYmVsUHVibGljIiwibGFiZWxSZXN0cmljdGVkIiwidmFsdWUiLCJ3aWR0aCIsIm9uQ2hhbmdlIiwib3B0aW9ucyIsIkpvaW5SdWxlIiwiSW52aXRlIiwiUHVibGljIiwidW5zaGlmdCIsIlJlc3RyaWN0ZWQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy92aWV3cy9lbGVtZW50cy9Kb2luUnVsZURyb3Bkb3duLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMjEgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgSm9pblJ1bGUgfSBmcm9tICdtYXRyaXgtanMtc2RrL3NyYy9AdHlwZXMvcGFydGlhbHMnO1xuXG5pbXBvcnQgRHJvcGRvd24gZnJvbSBcIi4vRHJvcGRvd25cIjtcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgdmFsdWU6IEpvaW5SdWxlO1xuICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgd2lkdGg/OiBudW1iZXI7XG4gICAgbGFiZWxJbnZpdGU6IHN0cmluZztcbiAgICBsYWJlbFB1YmxpYzogc3RyaW5nO1xuICAgIGxhYmVsUmVzdHJpY3RlZD86IHN0cmluZzsgLy8gaWYgb21pdHRlZCB0aGVuIHRoaXMgb3B0aW9uIHdpbGwgYmUgaGlkZGVuLCBlLmcgaWYgdW5zdXBwb3J0ZWRcbiAgICBvbkNoYW5nZSh2YWx1ZTogSm9pblJ1bGUpOiB2b2lkO1xufVxuXG5jb25zdCBKb2luUnVsZURyb3Bkb3duID0gKHtcbiAgICBsYWJlbCxcbiAgICBsYWJlbEludml0ZSxcbiAgICBsYWJlbFB1YmxpYyxcbiAgICBsYWJlbFJlc3RyaWN0ZWQsXG4gICAgdmFsdWUsXG4gICAgd2lkdGggPSA0NDgsXG4gICAgb25DaGFuZ2UsXG59OiBJUHJvcHMpID0+IHtcbiAgICBjb25zdCBvcHRpb25zID0gW1xuICAgICAgICA8ZGl2IGtleT17Sm9pblJ1bGUuSW52aXRlfSBjbGFzc05hbWU9XCJteF9Kb2luUnVsZURyb3Bkb3duX2ludml0ZVwiPlxuICAgICAgICAgICAgeyBsYWJlbEludml0ZSB9XG4gICAgICAgIDwvZGl2PixcbiAgICAgICAgPGRpdiBrZXk9e0pvaW5SdWxlLlB1YmxpY30gY2xhc3NOYW1lPVwibXhfSm9pblJ1bGVEcm9wZG93bl9wdWJsaWNcIj5cbiAgICAgICAgICAgIHsgbGFiZWxQdWJsaWMgfVxuICAgICAgICA8L2Rpdj4sXG4gICAgXTtcblxuICAgIGlmIChsYWJlbFJlc3RyaWN0ZWQpIHtcbiAgICAgICAgb3B0aW9ucy51bnNoaWZ0KDxkaXYga2V5PXtKb2luUnVsZS5SZXN0cmljdGVkfSBjbGFzc05hbWU9XCJteF9Kb2luUnVsZURyb3Bkb3duX3Jlc3RyaWN0ZWRcIj5cbiAgICAgICAgICAgIHsgbGFiZWxSZXN0cmljdGVkIH1cbiAgICAgICAgPC9kaXY+KTtcbiAgICB9XG5cbiAgICByZXR1cm4gPERyb3Bkb3duXG4gICAgICAgIGlkPVwibXhfSm9pblJ1bGVEcm9wZG93blwiXG4gICAgICAgIGNsYXNzTmFtZT1cIm14X0pvaW5SdWxlRHJvcGRvd25cIlxuICAgICAgICBvbk9wdGlvbkNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgIG1lbnVXaWR0aD17d2lkdGh9XG4gICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgbGFiZWw9e2xhYmVsfVxuICAgID5cbiAgICAgICAgeyBvcHRpb25zIH1cbiAgICA8L0Ryb3Bkb3duPjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEpvaW5SdWxlRHJvcGRvd247XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQWdCQTs7QUFDQTs7QUFFQTs7QUFuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBaUJBLE1BQU1BLGdCQUFnQixHQUFHLFFBUVg7RUFBQSxJQVJZO0lBQ3RCQyxLQURzQjtJQUV0QkMsV0FGc0I7SUFHdEJDLFdBSHNCO0lBSXRCQyxlQUpzQjtJQUt0QkMsS0FMc0I7SUFNdEJDLEtBQUssR0FBRyxHQU5jO0lBT3RCQztFQVBzQixDQVFaO0VBQ1YsTUFBTUMsT0FBTyxHQUFHLGNBQ1o7SUFBSyxHQUFHLEVBQUVDLGtCQUFBLENBQVNDLE1BQW5CO0lBQTJCLFNBQVMsRUFBQztFQUFyQyxHQUNNUixXQUROLENBRFksZUFJWjtJQUFLLEdBQUcsRUFBRU8sa0JBQUEsQ0FBU0UsTUFBbkI7SUFBMkIsU0FBUyxFQUFDO0VBQXJDLEdBQ01SLFdBRE4sQ0FKWSxDQUFoQjs7RUFTQSxJQUFJQyxlQUFKLEVBQXFCO0lBQ2pCSSxPQUFPLENBQUNJLE9BQVIsZUFBZ0I7TUFBSyxHQUFHLEVBQUVILGtCQUFBLENBQVNJLFVBQW5CO01BQStCLFNBQVMsRUFBQztJQUF6QyxHQUNWVCxlQURVLENBQWhCO0VBR0g7O0VBRUQsb0JBQU8sNkJBQUMsaUJBQUQ7SUFDSCxFQUFFLEVBQUMscUJBREE7SUFFSCxTQUFTLEVBQUMscUJBRlA7SUFHSCxjQUFjLEVBQUVHLFFBSGI7SUFJSCxTQUFTLEVBQUVELEtBSlI7SUFLSCxLQUFLLEVBQUVELEtBTEo7SUFNSCxLQUFLLEVBQUVKO0VBTkosR0FRRE8sT0FSQyxDQUFQO0FBVUgsQ0FsQ0Q7O2VBb0NlUixnQiJ9