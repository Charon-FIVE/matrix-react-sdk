"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

/*
Copyright 2016 OpenMarket Ltd
Copyright 2017 New Vector Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class TruncatedList extends _react.default.Component {
  getChildren(start, end) {
    if (this.props.getChildren && this.props.getChildCount) {
      return this.props.getChildren(start, end);
    } else {
      // XXX: I'm not sure why anything would pass null into this, it seems
      // like a bizarre case to handle, but I'm preserving the behaviour.
      // (see commit 38d5c7d5c5d5a34dc16ef5d46278315f5c57f542)
      return _react.default.Children.toArray(this.props.children).filter(c => {
        return c != null;
      }).slice(start, end);
    }
  }

  getChildCount() {
    if (this.props.getChildren && this.props.getChildCount) {
      return this.props.getChildCount();
    } else {
      return _react.default.Children.toArray(this.props.children).filter(c => {
        return c != null;
      }).length;
    }
  }

  render() {
    let overflowNode = null;
    const totalChildren = this.getChildCount();
    let upperBound = totalChildren;

    if (this.props.truncateAt >= 0) {
      const overflowCount = totalChildren - this.props.truncateAt;

      if (overflowCount > 1) {
        overflowNode = this.props.createOverflowElement(overflowCount, totalChildren);
        upperBound = this.props.truncateAt;
      }
    }

    const childNodes = this.getChildren(0, upperBound);
    return /*#__PURE__*/_react.default.createElement("div", {
      className: this.props.className
    }, childNodes, overflowNode);
  }

}

exports.default = TruncatedList;
(0, _defineProperty2.default)(TruncatedList, "defaultProps", {
  truncateAt: 2,

  createOverflowElement(overflowCount, totalCount) {
    return /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("And %(count)s more...", {
      count: overflowCount
    }));
  }

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUcnVuY2F0ZWRMaXN0IiwiUmVhY3QiLCJDb21wb25lbnQiLCJnZXRDaGlsZHJlbiIsInN0YXJ0IiwiZW5kIiwicHJvcHMiLCJnZXRDaGlsZENvdW50IiwiQ2hpbGRyZW4iLCJ0b0FycmF5IiwiY2hpbGRyZW4iLCJmaWx0ZXIiLCJjIiwic2xpY2UiLCJsZW5ndGgiLCJyZW5kZXIiLCJvdmVyZmxvd05vZGUiLCJ0b3RhbENoaWxkcmVuIiwidXBwZXJCb3VuZCIsInRydW5jYXRlQXQiLCJvdmVyZmxvd0NvdW50IiwiY3JlYXRlT3ZlcmZsb3dFbGVtZW50IiwiY2hpbGROb2RlcyIsImNsYXNzTmFtZSIsInRvdGFsQ291bnQiLCJfdCIsImNvdW50Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvdmlld3MvZWxlbWVudHMvVHJ1bmNhdGVkTGlzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE2IE9wZW5NYXJrZXQgTHRkXG5Db3B5cmlnaHQgMjAxNyBOZXcgVmVjdG9yIEx0ZFxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IF90IH0gZnJvbSAnLi4vLi4vLi4vbGFuZ3VhZ2VIYW5kbGVyJztcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgLy8gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzaG93IGJlZm9yZSB0cnVuY2F0aW5nLiBJZiBuZWdhdGl2ZSwgbm8gdHJ1bmNhdGlvbiBpcyBkb25lLlxuICAgIHRydW5jYXRlQXQ/OiBudW1iZXI7XG4gICAgLy8gVGhlIGNsYXNzTmFtZSB0byBhcHBseSB0byB0aGUgd3JhcHBpbmcgZGl2XG4gICAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICAgIC8vIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBjaGlsZHJlbiB0byBiZSByZW5kZXJlZCBpbnRvIHRoZSBlbGVtZW50LlxuICAgIC8vIFRoZSBzdGFydCBlbGVtZW50IGlzIGluY2x1ZGVkLCB0aGUgZW5kIGlzIG5vdCAoYXMgaW4gYHNsaWNlYCkuXG4gICAgLy8gSWYgb21pdHRlZCwgdGhlIFJlYWN0IGNoaWxkIGVsZW1lbnRzIHdpbGwgYmUgdXNlZC4gVGhpcyBwYXJhbWV0ZXIgY2FuIGJlIHVzZWRcbiAgICAvLyB0byBhdm9pZCBjcmVhdGluZyB1bm5lY2Vzc2FyeSBSZWFjdCBlbGVtZW50cy5cbiAgICBnZXRDaGlsZHJlbj86IChzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlcikgPT4gQXJyYXk8UmVhY3QuUmVhY3ROb2RlPjtcbiAgICAvLyBBIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIHJldHVybiB0aGUgdG90YWwgbnVtYmVyIG9mIGNoaWxkIGVsZW1lbnQgYXZhaWxhYmxlLlxuICAgIC8vIFJlcXVpcmVkIGlmIGdldENoaWxkcmVuIGlzIHN1cHBsaWVkLlxuICAgIGdldENoaWxkQ291bnQ/OiAoKSA9PiBudW1iZXI7XG4gICAgLy8gQSBmdW5jdGlvbiB3aGljaCB3aWxsIGJlIGludm9rZWQgd2hlbiBhbiBvdmVyZmxvdyBlbGVtZW50IGlzIHJlcXVpcmVkLlxuICAgIC8vIFRoaXMgd2lsbCBiZSBpbnNlcnRlZCBhZnRlciB0aGUgY2hpbGRyZW4uXG4gICAgY3JlYXRlT3ZlcmZsb3dFbGVtZW50PzogKG92ZXJmbG93Q291bnQ6IG51bWJlciwgdG90YWxDb3VudDogbnVtYmVyKSA9PiBSZWFjdC5SZWFjdE5vZGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRydW5jYXRlZExpc3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzPiB7XG4gICAgc3RhdGljIGRlZmF1bHRQcm9wcyA9e1xuICAgICAgICB0cnVuY2F0ZUF0OiAyLFxuICAgICAgICBjcmVhdGVPdmVyZmxvd0VsZW1lbnQob3ZlcmZsb3dDb3VudCwgdG90YWxDb3VudCkge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8ZGl2PnsgX3QoXCJBbmQgJShjb3VudClzIG1vcmUuLi5cIiwgeyBjb3VudDogb3ZlcmZsb3dDb3VudCB9KSB9PC9kaXY+XG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgIH07XG5cbiAgICBwcml2YXRlIGdldENoaWxkcmVuKHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKTogQXJyYXk8UmVhY3QuUmVhY3ROb2RlPiB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmdldENoaWxkcmVuICYmIHRoaXMucHJvcHMuZ2V0Q2hpbGRDb3VudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuZ2V0Q2hpbGRyZW4oc3RhcnQsIGVuZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBYWFg6IEknbSBub3Qgc3VyZSB3aHkgYW55dGhpbmcgd291bGQgcGFzcyBudWxsIGludG8gdGhpcywgaXQgc2VlbXNcbiAgICAgICAgICAgIC8vIGxpa2UgYSBiaXphcnJlIGNhc2UgdG8gaGFuZGxlLCBidXQgSSdtIHByZXNlcnZpbmcgdGhlIGJlaGF2aW91ci5cbiAgICAgICAgICAgIC8vIChzZWUgY29tbWl0IDM4ZDVjN2Q1YzVkNWEzNGRjMTZlZjVkNDYyNzgzMTVmNWM1N2Y1NDIpXG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4udG9BcnJheSh0aGlzLnByb3BzLmNoaWxkcmVuKS5maWx0ZXIoKGMpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYyAhPSBudWxsO1xuICAgICAgICAgICAgfSkuc2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGdldENoaWxkQ291bnQoKTogbnVtYmVyIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuZ2V0Q2hpbGRyZW4gJiYgdGhpcy5wcm9wcy5nZXRDaGlsZENvdW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5nZXRDaGlsZENvdW50KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4udG9BcnJheSh0aGlzLnByb3BzLmNoaWxkcmVuKS5maWx0ZXIoKGMpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYyAhPSBudWxsO1xuICAgICAgICAgICAgfSkubGVuZ3RoO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHJlbmRlcigpIHtcbiAgICAgICAgbGV0IG92ZXJmbG93Tm9kZSA9IG51bGw7XG5cbiAgICAgICAgY29uc3QgdG90YWxDaGlsZHJlbiA9IHRoaXMuZ2V0Q2hpbGRDb3VudCgpO1xuICAgICAgICBsZXQgdXBwZXJCb3VuZCA9IHRvdGFsQ2hpbGRyZW47XG4gICAgICAgIGlmICh0aGlzLnByb3BzLnRydW5jYXRlQXQgPj0gMCkge1xuICAgICAgICAgICAgY29uc3Qgb3ZlcmZsb3dDb3VudCA9IHRvdGFsQ2hpbGRyZW4gLSB0aGlzLnByb3BzLnRydW5jYXRlQXQ7XG4gICAgICAgICAgICBpZiAob3ZlcmZsb3dDb3VudCA+IDEpIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvd05vZGUgPSB0aGlzLnByb3BzLmNyZWF0ZU92ZXJmbG93RWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3dDb3VudCwgdG90YWxDaGlsZHJlbixcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHVwcGVyQm91bmQgPSB0aGlzLnByb3BzLnRydW5jYXRlQXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2hpbGROb2RlcyA9IHRoaXMuZ2V0Q2hpbGRyZW4oMCwgdXBwZXJCb3VuZCk7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXt0aGlzLnByb3BzLmNsYXNzTmFtZX0+XG4gICAgICAgICAgICAgICAgeyBjaGlsZE5vZGVzIH1cbiAgICAgICAgICAgICAgICB7IG92ZXJmbG93Tm9kZSB9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBaUJBOztBQUVBOztBQW5CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXdCZSxNQUFNQSxhQUFOLFNBQTRCQyxjQUFBLENBQU1DLFNBQWxDLENBQW9EO0VBVXZEQyxXQUFXLENBQUNDLEtBQUQsRUFBZ0JDLEdBQWhCLEVBQXFEO0lBQ3BFLElBQUksS0FBS0MsS0FBTCxDQUFXSCxXQUFYLElBQTBCLEtBQUtHLEtBQUwsQ0FBV0MsYUFBekMsRUFBd0Q7TUFDcEQsT0FBTyxLQUFLRCxLQUFMLENBQVdILFdBQVgsQ0FBdUJDLEtBQXZCLEVBQThCQyxHQUE5QixDQUFQO0lBQ0gsQ0FGRCxNQUVPO01BQ0g7TUFDQTtNQUNBO01BQ0EsT0FBT0osY0FBQSxDQUFNTyxRQUFOLENBQWVDLE9BQWYsQ0FBdUIsS0FBS0gsS0FBTCxDQUFXSSxRQUFsQyxFQUE0Q0MsTUFBNUMsQ0FBb0RDLENBQUQsSUFBTztRQUM3RCxPQUFPQSxDQUFDLElBQUksSUFBWjtNQUNILENBRk0sRUFFSkMsS0FGSSxDQUVFVCxLQUZGLEVBRVNDLEdBRlQsQ0FBUDtJQUdIO0VBQ0o7O0VBRU9FLGFBQWEsR0FBVztJQUM1QixJQUFJLEtBQUtELEtBQUwsQ0FBV0gsV0FBWCxJQUEwQixLQUFLRyxLQUFMLENBQVdDLGFBQXpDLEVBQXdEO01BQ3BELE9BQU8sS0FBS0QsS0FBTCxDQUFXQyxhQUFYLEVBQVA7SUFDSCxDQUZELE1BRU87TUFDSCxPQUFPTixjQUFBLENBQU1PLFFBQU4sQ0FBZUMsT0FBZixDQUF1QixLQUFLSCxLQUFMLENBQVdJLFFBQWxDLEVBQTRDQyxNQUE1QyxDQUFvREMsQ0FBRCxJQUFPO1FBQzdELE9BQU9BLENBQUMsSUFBSSxJQUFaO01BQ0gsQ0FGTSxFQUVKRSxNQUZIO0lBR0g7RUFDSjs7RUFFTUMsTUFBTSxHQUFHO0lBQ1osSUFBSUMsWUFBWSxHQUFHLElBQW5CO0lBRUEsTUFBTUMsYUFBYSxHQUFHLEtBQUtWLGFBQUwsRUFBdEI7SUFDQSxJQUFJVyxVQUFVLEdBQUdELGFBQWpCOztJQUNBLElBQUksS0FBS1gsS0FBTCxDQUFXYSxVQUFYLElBQXlCLENBQTdCLEVBQWdDO01BQzVCLE1BQU1DLGFBQWEsR0FBR0gsYUFBYSxHQUFHLEtBQUtYLEtBQUwsQ0FBV2EsVUFBakQ7O01BQ0EsSUFBSUMsYUFBYSxHQUFHLENBQXBCLEVBQXVCO1FBQ25CSixZQUFZLEdBQUcsS0FBS1YsS0FBTCxDQUFXZSxxQkFBWCxDQUNYRCxhQURXLEVBQ0lILGFBREosQ0FBZjtRQUdBQyxVQUFVLEdBQUcsS0FBS1osS0FBTCxDQUFXYSxVQUF4QjtNQUNIO0lBQ0o7O0lBQ0QsTUFBTUcsVUFBVSxHQUFHLEtBQUtuQixXQUFMLENBQWlCLENBQWpCLEVBQW9CZSxVQUFwQixDQUFuQjtJQUVBLG9CQUNJO01BQUssU0FBUyxFQUFFLEtBQUtaLEtBQUwsQ0FBV2lCO0lBQTNCLEdBQ01ELFVBRE4sRUFFTU4sWUFGTixDQURKO0VBTUg7O0FBdkQ4RDs7OzhCQUE5Q2hCLGEsa0JBQ0k7RUFDakJtQixVQUFVLEVBQUUsQ0FESzs7RUFFakJFLHFCQUFxQixDQUFDRCxhQUFELEVBQWdCSSxVQUFoQixFQUE0QjtJQUM3QyxvQkFDSSwwQ0FBTyxJQUFBQyxtQkFBQSxFQUFHLHVCQUFILEVBQTRCO01BQUVDLEtBQUssRUFBRU47SUFBVCxDQUE1QixDQUFQLENBREo7RUFHSDs7QUFOZ0IsQyJ9