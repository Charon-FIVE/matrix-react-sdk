"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = AccessibleButton;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _KeyBindingsManager = require("../../../KeyBindingsManager");

var _KeyboardShortcuts = require("../../../accessibility/KeyboardShortcuts");

const _excluded = ["element", "onClick", "children", "kind", "disabled", "inputRef", "className", "onKeyDown", "onKeyUp", "triggerOnMouseDown"];

/**
 * AccessibleButton is a generic wrapper for any element that should be treated
 * as a button.  Identifies the element as a button, setting proper tab
 * indexing and keyboard activation behavior.
 *
 * @param {Object} props  react element properties
 * @returns {Object} rendered react
 */
function AccessibleButton(_ref) {
  let {
    element,
    onClick,
    children,
    kind,
    disabled,
    inputRef,
    className,
    onKeyDown,
    onKeyUp,
    triggerOnMouseDown
  } = _ref,
      restProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  const newProps = restProps;

  if (disabled) {
    newProps["aria-disabled"] = true;
    newProps["disabled"] = true;
  } else {
    if (triggerOnMouseDown) {
      newProps.onMouseDown = onClick;
    } else {
      newProps.onClick = onClick;
    } // We need to consume enter onKeyDown and space onKeyUp
    // otherwise we are risking also activating other keyboard focusable elements
    // that might receive focus as a result of the AccessibleButtonClick action
    // It's because we are using html buttons at a few places e.g. inside dialogs
    // And divs which we report as role button to assistive technologies.
    // Browsers handle space and enter key presses differently and we are only adjusting to the
    // inconsistencies here


    newProps.onKeyDown = e => {
      const action = (0, _KeyBindingsManager.getKeyBindingsManager)().getAccessibilityAction(e);

      switch (action) {
        case _KeyboardShortcuts.KeyBindingAction.Enter:
          e.stopPropagation();
          e.preventDefault();
          return onClick(e);

        case _KeyboardShortcuts.KeyBindingAction.Space:
          e.stopPropagation();
          e.preventDefault();
          break;

        default:
          onKeyDown?.(e);
      }
    };

    newProps.onKeyUp = e => {
      const action = (0, _KeyBindingsManager.getKeyBindingsManager)().getAccessibilityAction(e);

      switch (action) {
        case _KeyboardShortcuts.KeyBindingAction.Enter:
          e.stopPropagation();
          e.preventDefault();
          break;

        case _KeyboardShortcuts.KeyBindingAction.Space:
          e.stopPropagation();
          e.preventDefault();
          return onClick(e);

        default:
          onKeyUp?.(e);
          break;
      }
    };
  } // Pass through the ref - used for keyboard shortcut access to some buttons


  newProps.ref = inputRef;
  newProps.className = (0, _classnames.default)("mx_AccessibleButton", className, {
    "mx_AccessibleButton_hasKind": kind,
    [`mx_AccessibleButton_kind_${kind}`]: kind,
    "mx_AccessibleButton_disabled": disabled
  }); // React.createElement expects InputHTMLAttributes

  return /*#__PURE__*/_react.default.createElement(element, newProps, children);
}

AccessibleButton.defaultProps = {
  element: 'div',
  role: 'button',
  tabIndex: 0
};
AccessibleButton.displayName = "AccessibleButton";
//# sourceMappingURL=data:application/json;charset=utf-8;base64,