"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

/*
Copyright 2017 Aidan Gauland
Copyright 2018 New Vector Ltd.
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * Basic container for buttons in modal dialogs.
 */
class DialogButtons extends _react.default.Component {
  constructor() {
    super(...arguments);
    (0, _defineProperty2.default)(this, "onCancelClick", event => {
      this.props.onCancel(event);
    });
  }

  render() {
    let primaryButtonClassName = "mx_Dialog_primary";

    if (this.props.primaryButtonClass) {
      primaryButtonClassName += " " + this.props.primaryButtonClass;
    }

    let cancelButton;

    if (this.props.cancelButton || this.props.hasCancel) {
      cancelButton = /*#__PURE__*/_react.default.createElement("button", {
        // important: the default type is 'submit' and this button comes before the
        // primary in the DOM so will get form submissions unless we make it not a submit.
        "data-test-id": "dialog-cancel-button",
        type: "button",
        onClick: this.onCancelClick,
        className: this.props.cancelButtonClass,
        disabled: this.props.disabled
      }, this.props.cancelButton || (0, _languageHandler._t)("Cancel"));
    }

    let additive = null;

    if (this.props.additive) {
      additive = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_Dialog_buttons_additive"
      }, this.props.additive);
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_buttons"
    }, additive, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_Dialog_buttons_row"
    }, cancelButton, this.props.children, /*#__PURE__*/_react.default.createElement("button", {
      type: this.props.primaryIsSubmit ? 'submit' : 'button',
      "data-test-id": "dialog-primary-button",
      className: primaryButtonClassName,
      onClick: this.props.onPrimaryButtonClick,
      autoFocus: this.props.focus,
      disabled: this.props.disabled || this.props.primaryDisabled
    }, this.props.primaryButton)));
  }

}

exports.default = DialogButtons;
(0, _defineProperty2.default)(DialogButtons, "defaultProps", {
  hasCancel: true,
  disabled: false
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaWFsb2dCdXR0b25zIiwiUmVhY3QiLCJDb21wb25lbnQiLCJldmVudCIsInByb3BzIiwib25DYW5jZWwiLCJyZW5kZXIiLCJwcmltYXJ5QnV0dG9uQ2xhc3NOYW1lIiwicHJpbWFyeUJ1dHRvbkNsYXNzIiwiY2FuY2VsQnV0dG9uIiwiaGFzQ2FuY2VsIiwib25DYW5jZWxDbGljayIsImNhbmNlbEJ1dHRvbkNsYXNzIiwiZGlzYWJsZWQiLCJfdCIsImFkZGl0aXZlIiwiY2hpbGRyZW4iLCJwcmltYXJ5SXNTdWJtaXQiLCJvblByaW1hcnlCdXR0b25DbGljayIsImZvY3VzIiwicHJpbWFyeURpc2FibGVkIiwicHJpbWFyeUJ1dHRvbiJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2VsZW1lbnRzL0RpYWxvZ0J1dHRvbnMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAxNyBBaWRhbiBHYXVsYW5kXG5Db3B5cmlnaHQgMjAxOCBOZXcgVmVjdG9yIEx0ZC5cbkNvcHlyaWdodCAyMDE5IFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgeyBfdCB9IGZyb20gJy4uLy4uLy4uL2xhbmd1YWdlSGFuZGxlcic7XG5cbmludGVyZmFjZSBJUHJvcHMge1xuICAgIC8vIFRoZSBwcmltYXJ5IGJ1dHRvbiB3aGljaCBpcyBzdHlsZWQgZGlmZmVyZW50bHkgYW5kIGhhcyBkZWZhdWx0IGZvY3VzLlxuICAgIHByaW1hcnlCdXR0b246IFJlYWN0LlJlYWN0Tm9kZTtcblxuICAgIC8vIEEgbm9kZSB0byBpbnNlcnQgaW50byB0aGUgY2FuY2VsIGJ1dHRvbiBpbnN0ZWFkIG9mIGRlZmF1bHQgXCJDYW5jZWxcIlxuICAgIGNhbmNlbEJ1dHRvbj86IFJlYWN0LlJlYWN0Tm9kZTtcblxuICAgIC8vIElmIHRydWUsIG1ha2UgdGhlIHByaW1hcnkgYnV0dG9uIGEgZm9ybSBzdWJtaXQgYnV0dG9uIChpbnB1dCB0eXBlPVwic3VibWl0XCIpXG4gICAgcHJpbWFyeUlzU3VibWl0PzogYm9vbGVhbjtcblxuICAgIC8vIG9uQ2xpY2sgaGFuZGxlciBmb3IgdGhlIHByaW1hcnkgYnV0dG9uLiBOb3RlIHRoYXQgdGhlIHJldHVybmVkIHByb21pc2UsIGlmXG4gICAgLy8gcmV0dXJuaW5nIGEgcHJvbWlzZSwgaXMgbm90IHVzZWQuXG4gICAgb25QcmltYXJ5QnV0dG9uQ2xpY2s/OiAoZXY6IFJlYWN0Lk1vdXNlRXZlbnQpID0+ICh2b2lkIHwgUHJvbWlzZTx2b2lkPik7XG5cbiAgICAvLyBzaG91bGQgdGhlcmUgYmUgYSBjYW5jZWwgYnV0dG9uPyBkZWZhdWx0OiB0cnVlXG4gICAgaGFzQ2FuY2VsPzogYm9vbGVhbjtcblxuICAgIC8vIFRoZSBjbGFzcyBvZiB0aGUgY2FuY2VsIGJ1dHRvbiwgb25seSB1c2VkIGlmIGEgY2FuY2VsIGJ1dHRvbiBpc1xuICAgIC8vIGVuYWJsZWRcbiAgICBjYW5jZWxCdXR0b25DbGFzcz86IHN0cmluZztcblxuICAgIC8vIG9uQ2xpY2sgaGFuZGxlciBmb3IgdGhlIGNhbmNlbCBidXR0b24uXG4gICAgb25DYW5jZWw/OiAoLi4uYXJnczogYW55W10pID0+IHZvaWQ7XG5cbiAgICBmb2N1cz86IGJvb2xlYW47XG5cbiAgICAvLyBkaXNhYmxlcyB0aGUgcHJpbWFyeSBhbmQgY2FuY2VsIGJ1dHRvbnNcbiAgICBkaXNhYmxlZD86IGJvb2xlYW47XG5cbiAgICAvLyBkaXNhYmxlcyBvbmx5IHRoZSBwcmltYXJ5IGJ1dHRvblxuICAgIHByaW1hcnlEaXNhYmxlZD86IGJvb2xlYW47XG5cbiAgICAvLyBzb21ldGhpbmcgdG8gc3RpY2sgbmV4dCB0byB0aGUgYnV0dG9ucywgb3B0aW9uYWxseVxuICAgIGFkZGl0aXZlPzogUmVhY3QuUmVhY3ROb2RlO1xuXG4gICAgcHJpbWFyeUJ1dHRvbkNsYXNzPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEJhc2ljIGNvbnRhaW5lciBmb3IgYnV0dG9ucyBpbiBtb2RhbCBkaWFsb2dzLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEaWFsb2dCdXR0b25zIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElQcm9wcz4ge1xuICAgIHB1YmxpYyBzdGF0aWMgZGVmYXVsdFByb3BzOiBQYXJ0aWFsPElQcm9wcz4gPSB7XG4gICAgICAgIGhhc0NhbmNlbDogdHJ1ZSxcbiAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgIH07XG5cbiAgICBwcml2YXRlIG9uQ2FuY2VsQ2xpY2sgPSAoZXZlbnQ6IFJlYWN0Lk1vdXNlRXZlbnQpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkNhbmNlbChldmVudCk7XG4gICAgfTtcblxuICAgIHB1YmxpYyByZW5kZXIoKTogSlNYLkVsZW1lbnQge1xuICAgICAgICBsZXQgcHJpbWFyeUJ1dHRvbkNsYXNzTmFtZSA9IFwibXhfRGlhbG9nX3ByaW1hcnlcIjtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMucHJpbWFyeUJ1dHRvbkNsYXNzKSB7XG4gICAgICAgICAgICBwcmltYXJ5QnV0dG9uQ2xhc3NOYW1lICs9IFwiIFwiICsgdGhpcy5wcm9wcy5wcmltYXJ5QnV0dG9uQ2xhc3M7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNhbmNlbEJ1dHRvbjtcblxuICAgICAgICBpZiAodGhpcy5wcm9wcy5jYW5jZWxCdXR0b24gfHwgdGhpcy5wcm9wcy5oYXNDYW5jZWwpIHtcbiAgICAgICAgICAgIGNhbmNlbEJ1dHRvbiA9IDxidXR0b25cbiAgICAgICAgICAgICAgICAvLyBpbXBvcnRhbnQ6IHRoZSBkZWZhdWx0IHR5cGUgaXMgJ3N1Ym1pdCcgYW5kIHRoaXMgYnV0dG9uIGNvbWVzIGJlZm9yZSB0aGVcbiAgICAgICAgICAgICAgICAvLyBwcmltYXJ5IGluIHRoZSBET00gc28gd2lsbCBnZXQgZm9ybSBzdWJtaXNzaW9ucyB1bmxlc3Mgd2UgbWFrZSBpdCBub3QgYSBzdWJtaXQuXG4gICAgICAgICAgICAgICAgZGF0YS10ZXN0LWlkPVwiZGlhbG9nLWNhbmNlbC1idXR0b25cIlxuICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25DYW5jZWxDbGlja31cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3RoaXMucHJvcHMuY2FuY2VsQnV0dG9uQ2xhc3N9XG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9e3RoaXMucHJvcHMuZGlzYWJsZWR9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgeyB0aGlzLnByb3BzLmNhbmNlbEJ1dHRvbiB8fCBfdChcIkNhbmNlbFwiKSB9XG4gICAgICAgICAgICA8L2J1dHRvbj47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgYWRkaXRpdmUgPSBudWxsO1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5hZGRpdGl2ZSkge1xuICAgICAgICAgICAgYWRkaXRpdmUgPSA8ZGl2IGNsYXNzTmFtZT1cIm14X0RpYWxvZ19idXR0b25zX2FkZGl0aXZlXCI+eyB0aGlzLnByb3BzLmFkZGl0aXZlIH08L2Rpdj47XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9EaWFsb2dfYnV0dG9uc1wiPlxuICAgICAgICAgICAgICAgIHsgYWRkaXRpdmUgfVxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm14X0RpYWxvZ19idXR0b25zX3Jvd1wiPlxuICAgICAgICAgICAgICAgICAgICB7IGNhbmNlbEJ1dHRvbiB9XG4gICAgICAgICAgICAgICAgICAgIHsgdGhpcy5wcm9wcy5jaGlsZHJlbiB9XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT17dGhpcy5wcm9wcy5wcmltYXJ5SXNTdWJtaXQgPyAnc3VibWl0JyA6ICdidXR0b24nfVxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10ZXN0LWlkPVwiZGlhbG9nLXByaW1hcnktYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17cHJpbWFyeUJ1dHRvbkNsYXNzTmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMucHJvcHMub25QcmltYXJ5QnV0dG9uQ2xpY2t9XG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRvRm9jdXM9e3RoaXMucHJvcHMuZm9jdXN9XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17dGhpcy5wcm9wcy5kaXNhYmxlZCB8fCB0aGlzLnByb3BzLnByaW1hcnlEaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgeyB0aGlzLnByb3BzLnByaW1hcnlCdXR0b24gfVxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBa0JBOztBQUVBOztBQXBCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQTRDQTtBQUNBO0FBQ0E7QUFDZSxNQUFNQSxhQUFOLFNBQTRCQyxjQUFBLENBQU1DLFNBQWxDLENBQW9EO0VBQUE7SUFBQTtJQUFBLHFEQU10Q0MsS0FBRCxJQUFtQztNQUN2RCxLQUFLQyxLQUFMLENBQVdDLFFBQVgsQ0FBb0JGLEtBQXBCO0lBQ0gsQ0FSOEQ7RUFBQTs7RUFVeERHLE1BQU0sR0FBZ0I7SUFDekIsSUFBSUMsc0JBQXNCLEdBQUcsbUJBQTdCOztJQUNBLElBQUksS0FBS0gsS0FBTCxDQUFXSSxrQkFBZixFQUFtQztNQUMvQkQsc0JBQXNCLElBQUksTUFBTSxLQUFLSCxLQUFMLENBQVdJLGtCQUEzQztJQUNIOztJQUNELElBQUlDLFlBQUo7O0lBRUEsSUFBSSxLQUFLTCxLQUFMLENBQVdLLFlBQVgsSUFBMkIsS0FBS0wsS0FBTCxDQUFXTSxTQUExQyxFQUFxRDtNQUNqREQsWUFBWSxnQkFBRztRQUNYO1FBQ0E7UUFDQSxnQkFBYSxzQkFIRjtRQUlYLElBQUksRUFBQyxRQUpNO1FBS1gsT0FBTyxFQUFFLEtBQUtFLGFBTEg7UUFNWCxTQUFTLEVBQUUsS0FBS1AsS0FBTCxDQUFXUSxpQkFOWDtRQU9YLFFBQVEsRUFBRSxLQUFLUixLQUFMLENBQVdTO01BUFYsR0FTVCxLQUFLVCxLQUFMLENBQVdLLFlBQVgsSUFBMkIsSUFBQUssbUJBQUEsRUFBRyxRQUFILENBVGxCLENBQWY7SUFXSDs7SUFFRCxJQUFJQyxRQUFRLEdBQUcsSUFBZjs7SUFDQSxJQUFJLEtBQUtYLEtBQUwsQ0FBV1csUUFBZixFQUF5QjtNQUNyQkEsUUFBUSxnQkFBRztRQUFLLFNBQVMsRUFBQztNQUFmLEdBQThDLEtBQUtYLEtBQUwsQ0FBV1csUUFBekQsQ0FBWDtJQUNIOztJQUVELG9CQUNJO01BQUssU0FBUyxFQUFDO0lBQWYsR0FDTUEsUUFETixlQUVJO01BQU0sU0FBUyxFQUFDO0lBQWhCLEdBQ01OLFlBRE4sRUFFTSxLQUFLTCxLQUFMLENBQVdZLFFBRmpCLGVBR0k7TUFBUSxJQUFJLEVBQUUsS0FBS1osS0FBTCxDQUFXYSxlQUFYLEdBQTZCLFFBQTdCLEdBQXdDLFFBQXREO01BQ0ksZ0JBQWEsdUJBRGpCO01BRUksU0FBUyxFQUFFVixzQkFGZjtNQUdJLE9BQU8sRUFBRSxLQUFLSCxLQUFMLENBQVdjLG9CQUh4QjtNQUlJLFNBQVMsRUFBRSxLQUFLZCxLQUFMLENBQVdlLEtBSjFCO01BS0ksUUFBUSxFQUFFLEtBQUtmLEtBQUwsQ0FBV1MsUUFBWCxJQUF1QixLQUFLVCxLQUFMLENBQVdnQjtJQUxoRCxHQU9NLEtBQUtoQixLQUFMLENBQVdpQixhQVBqQixDQUhKLENBRkosQ0FESjtFQWtCSDs7QUF0RDhEOzs7OEJBQTlDckIsYSxrQkFDNkI7RUFDMUNVLFNBQVMsRUFBRSxJQUQrQjtFQUUxQ0csUUFBUSxFQUFFO0FBRmdDLEMifQ==