"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _Draggable = _interopRequireDefault(require("./Draggable"));

var _SettingLevel = require("../../../settings/SettingLevel");

/*
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class IRCTimelineProfileResizer extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "dragFunc", (location, event) => {
      const offset = event.clientX - location.currentX;
      const newWidth = this.state.width + offset; // If we're trying to go smaller than min width, don't.

      if (newWidth < this.props.minWidth) {
        return location;
      }

      if (newWidth > this.props.maxWidth) {
        return location;
      }

      this.setState({
        width: newWidth
      });
      this.updateCSSWidth.bind(this)(newWidth);
      return {
        currentX: event.clientX,
        currentY: location.currentY
      };
    });
    this.state = {
      width: _SettingsStore.default.getValue("ircDisplayNameWidth", this.props.roomId),
      IRCLayoutRoot: null
    };
  }

  componentDidMount() {
    this.setState({
      IRCLayoutRoot: document.querySelector(".mx_IRCLayout")
    }, () => this.updateCSSWidth(this.state.width));
  }

  updateCSSWidth(newWidth) {
    this.state.IRCLayoutRoot.style.setProperty("--name-width", newWidth + "px");
  }

  onMoueUp(event) {
    if (this.props.roomId) {
      _SettingsStore.default.setValue("ircDisplayNameWidth", this.props.roomId, _SettingLevel.SettingLevel.ROOM_DEVICE, this.state.width);
    }
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_Draggable.default, {
      className: "mx_ProfileResizer",
      dragFunc: this.dragFunc.bind(this),
      onMouseUp: this.onMoueUp.bind(this)
    });
  }

}

exports.default = IRCTimelineProfileResizer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJUkNUaW1lbGluZVByb2ZpbGVSZXNpemVyIiwiUmVhY3QiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwibG9jYXRpb24iLCJldmVudCIsIm9mZnNldCIsImNsaWVudFgiLCJjdXJyZW50WCIsIm5ld1dpZHRoIiwic3RhdGUiLCJ3aWR0aCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJzZXRTdGF0ZSIsInVwZGF0ZUNTU1dpZHRoIiwiYmluZCIsImN1cnJlbnRZIiwiU2V0dGluZ3NTdG9yZSIsImdldFZhbHVlIiwicm9vbUlkIiwiSVJDTGF5b3V0Um9vdCIsImNvbXBvbmVudERpZE1vdW50IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwic3R5bGUiLCJzZXRQcm9wZXJ0eSIsIm9uTW91ZVVwIiwic2V0VmFsdWUiLCJTZXR0aW5nTGV2ZWwiLCJST09NX0RFVklDRSIsInJlbmRlciIsImRyYWdGdW5jIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvdmlld3MvZWxlbWVudHMvSVJDVGltZWxpbmVQcm9maWxlUmVzaXplci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDIwIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IFNldHRpbmdzU3RvcmUgZnJvbSBcIi4uLy4uLy4uL3NldHRpbmdzL1NldHRpbmdzU3RvcmVcIjtcbmltcG9ydCBEcmFnZ2FibGUsIHsgSUxvY2F0aW9uU3RhdGUgfSBmcm9tICcuL0RyYWdnYWJsZSc7XG5pbXBvcnQgeyBTZXR0aW5nTGV2ZWwgfSBmcm9tIFwiLi4vLi4vLi4vc2V0dGluZ3MvU2V0dGluZ0xldmVsXCI7XG5cbmludGVyZmFjZSBJUHJvcHMge1xuICAgIC8vIEN1cnJlbnQgcm9vbVxuICAgIHJvb21JZDogc3RyaW5nO1xuICAgIG1pbldpZHRoOiBudW1iZXI7XG4gICAgbWF4V2lkdGg6IG51bWJlcjtcbn1cblxuaW50ZXJmYWNlIElTdGF0ZSB7XG4gICAgd2lkdGg6IG51bWJlcjtcbiAgICBJUkNMYXlvdXRSb290OiBIVE1MRWxlbWVudDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSVJDVGltZWxpbmVQcm9maWxlUmVzaXplciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxJUHJvcHMsIElTdGF0ZT4ge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBJUHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICB3aWR0aDogU2V0dGluZ3NTdG9yZS5nZXRWYWx1ZShcImlyY0Rpc3BsYXlOYW1lV2lkdGhcIiwgdGhpcy5wcm9wcy5yb29tSWQpLFxuICAgICAgICAgICAgSVJDTGF5b3V0Um9vdDogbnVsbCxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBJUkNMYXlvdXRSb290OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm14X0lSQ0xheW91dFwiKSxcbiAgICAgICAgfSwgKCkgPT4gdGhpcy51cGRhdGVDU1NXaWR0aCh0aGlzLnN0YXRlLndpZHRoKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkcmFnRnVuYyA9IChsb2NhdGlvbjogSUxvY2F0aW9uU3RhdGUsIGV2ZW50OiBSZWFjdC5Nb3VzZUV2ZW50PEVsZW1lbnQsIE1vdXNlRXZlbnQ+KTogSUxvY2F0aW9uU3RhdGUgPT4ge1xuICAgICAgICBjb25zdCBvZmZzZXQgPSBldmVudC5jbGllbnRYIC0gbG9jYXRpb24uY3VycmVudFg7XG4gICAgICAgIGNvbnN0IG5ld1dpZHRoID0gdGhpcy5zdGF0ZS53aWR0aCArIG9mZnNldDtcblxuICAgICAgICAvLyBJZiB3ZSdyZSB0cnlpbmcgdG8gZ28gc21hbGxlciB0aGFuIG1pbiB3aWR0aCwgZG9uJ3QuXG4gICAgICAgIGlmIChuZXdXaWR0aCA8IHRoaXMucHJvcHMubWluV2lkdGgpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXdXaWR0aCA+IHRoaXMucHJvcHMubWF4V2lkdGgpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgd2lkdGg6IG5ld1dpZHRoLFxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnVwZGF0ZUNTU1dpZHRoLmJpbmQodGhpcykobmV3V2lkdGgpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjdXJyZW50WDogZXZlbnQuY2xpZW50WCxcbiAgICAgICAgICAgIGN1cnJlbnRZOiBsb2NhdGlvbi5jdXJyZW50WSxcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSB1cGRhdGVDU1NXaWR0aChuZXdXaWR0aDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuc3RhdGUuSVJDTGF5b3V0Um9vdC5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tbmFtZS13aWR0aFwiLCBuZXdXaWR0aCArIFwicHhcIik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbk1vdWVVcChldmVudDogTW91c2VFdmVudCkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5yb29tSWQpIHtcbiAgICAgICAgICAgIFNldHRpbmdzU3RvcmUuc2V0VmFsdWUoXG4gICAgICAgICAgICAgICAgXCJpcmNEaXNwbGF5TmFtZVdpZHRoXCIsXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5yb29tSWQsXG4gICAgICAgICAgICAgICAgU2V0dGluZ0xldmVsLlJPT01fREVWSUNFLFxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUud2lkdGgsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gPERyYWdnYWJsZVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwibXhfUHJvZmlsZVJlc2l6ZXJcIlxuICAgICAgICAgICAgZHJhZ0Z1bmM9e3RoaXMuZHJhZ0Z1bmMuYmluZCh0aGlzKX1cbiAgICAgICAgICAgIG9uTW91c2VVcD17dGhpcy5vbk1vdWVVcC5iaW5kKHRoaXMpfVxuICAgICAgICAvPjtcbiAgICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBZ0JBOztBQUVBOztBQUNBOztBQUNBOztBQXBCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFvQmUsTUFBTUEseUJBQU4sU0FBd0NDLGNBQUEsQ0FBTUMsU0FBOUMsQ0FBd0U7RUFDbkZDLFdBQVcsQ0FBQ0MsS0FBRCxFQUFnQjtJQUN2QixNQUFNQSxLQUFOO0lBRHVCLGdEQWVSLENBQUNDLFFBQUQsRUFBMkJDLEtBQTNCLEtBQTRGO01BQzNHLE1BQU1DLE1BQU0sR0FBR0QsS0FBSyxDQUFDRSxPQUFOLEdBQWdCSCxRQUFRLENBQUNJLFFBQXhDO01BQ0EsTUFBTUMsUUFBUSxHQUFHLEtBQUtDLEtBQUwsQ0FBV0MsS0FBWCxHQUFtQkwsTUFBcEMsQ0FGMkcsQ0FJM0c7O01BQ0EsSUFBSUcsUUFBUSxHQUFHLEtBQUtOLEtBQUwsQ0FBV1MsUUFBMUIsRUFBb0M7UUFDaEMsT0FBT1IsUUFBUDtNQUNIOztNQUVELElBQUlLLFFBQVEsR0FBRyxLQUFLTixLQUFMLENBQVdVLFFBQTFCLEVBQW9DO1FBQ2hDLE9BQU9ULFFBQVA7TUFDSDs7TUFFRCxLQUFLVSxRQUFMLENBQWM7UUFDVkgsS0FBSyxFQUFFRjtNQURHLENBQWQ7TUFJQSxLQUFLTSxjQUFMLENBQW9CQyxJQUFwQixDQUF5QixJQUF6QixFQUErQlAsUUFBL0I7TUFFQSxPQUFPO1FBQ0hELFFBQVEsRUFBRUgsS0FBSyxDQUFDRSxPQURiO1FBRUhVLFFBQVEsRUFBRWIsUUFBUSxDQUFDYTtNQUZoQixDQUFQO0lBSUgsQ0F0QzBCO0lBR3ZCLEtBQUtQLEtBQUwsR0FBYTtNQUNUQyxLQUFLLEVBQUVPLHNCQUFBLENBQWNDLFFBQWQsQ0FBdUIscUJBQXZCLEVBQThDLEtBQUtoQixLQUFMLENBQVdpQixNQUF6RCxDQURFO01BRVRDLGFBQWEsRUFBRTtJQUZOLENBQWI7RUFJSDs7RUFFREMsaUJBQWlCLEdBQUc7SUFDaEIsS0FBS1IsUUFBTCxDQUFjO01BQ1ZPLGFBQWEsRUFBRUUsUUFBUSxDQUFDQyxhQUFULENBQXVCLGVBQXZCO0lBREwsQ0FBZCxFQUVHLE1BQU0sS0FBS1QsY0FBTCxDQUFvQixLQUFLTCxLQUFMLENBQVdDLEtBQS9CLENBRlQ7RUFHSDs7RUEyQk9JLGNBQWMsQ0FBQ04sUUFBRCxFQUFtQjtJQUNyQyxLQUFLQyxLQUFMLENBQVdXLGFBQVgsQ0FBeUJJLEtBQXpCLENBQStCQyxXQUEvQixDQUEyQyxjQUEzQyxFQUEyRGpCLFFBQVEsR0FBRyxJQUF0RTtFQUNIOztFQUVPa0IsUUFBUSxDQUFDdEIsS0FBRCxFQUFvQjtJQUNoQyxJQUFJLEtBQUtGLEtBQUwsQ0FBV2lCLE1BQWYsRUFBdUI7TUFDbkJGLHNCQUFBLENBQWNVLFFBQWQsQ0FDSSxxQkFESixFQUVJLEtBQUt6QixLQUFMLENBQVdpQixNQUZmLEVBR0lTLDBCQUFBLENBQWFDLFdBSGpCLEVBSUksS0FBS3BCLEtBQUwsQ0FBV0MsS0FKZjtJQU1IO0VBQ0o7O0VBRURvQixNQUFNLEdBQUc7SUFDTCxvQkFBTyw2QkFBQyxrQkFBRDtNQUNILFNBQVMsRUFBQyxtQkFEUDtNQUVILFFBQVEsRUFBRSxLQUFLQyxRQUFMLENBQWNoQixJQUFkLENBQW1CLElBQW5CLENBRlA7TUFHSCxTQUFTLEVBQUUsS0FBS1csUUFBTCxDQUFjWCxJQUFkLENBQW1CLElBQW5CO0lBSFIsRUFBUDtFQUtIOztBQTlEa0YifQ==