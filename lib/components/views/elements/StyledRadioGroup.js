"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _StyledRadioButton = _interopRequireDefault(require("./StyledRadioButton"));

/*
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
function StyledRadioGroup(_ref) {
  let {
    name,
    definitions,
    value,
    className,
    outlined,
    disabled,
    onChange
  } = _ref;

  const _onChange = e => {
    onChange(e.target.value);
  };

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, definitions.map(d => {
    const id = `${name}-${d.value}`;
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, {
      key: d.value
    }, /*#__PURE__*/_react.default.createElement(_StyledRadioButton.default, {
      id: id,
      className: (0, _classnames.default)(className, d.className),
      onChange: _onChange,
      checked: d.checked !== undefined ? d.checked : d.value === value,
      name: name,
      value: d.value,
      disabled: d.disabled ?? disabled,
      outlined: outlined,
      "aria-describedby": d.description ? `${id}-description` : undefined
    }, d.label), d.description ? /*#__PURE__*/_react.default.createElement("span", {
      id: `${id}-description`
    }, d.description) : null);
  }));
}

var _default = StyledRadioGroup;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTdHlsZWRSYWRpb0dyb3VwIiwibmFtZSIsImRlZmluaXRpb25zIiwidmFsdWUiLCJjbGFzc05hbWUiLCJvdXRsaW5lZCIsImRpc2FibGVkIiwib25DaGFuZ2UiLCJfb25DaGFuZ2UiLCJlIiwidGFyZ2V0IiwibWFwIiwiZCIsImlkIiwiY2xhc3NOYW1lcyIsImNoZWNrZWQiLCJ1bmRlZmluZWQiLCJkZXNjcmlwdGlvbiIsImxhYmVsIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvdmlld3MvZWxlbWVudHMvU3R5bGVkUmFkaW9Hcm91cC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDIwIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSBcImNsYXNzbmFtZXNcIjtcblxuaW1wb3J0IFN0eWxlZFJhZGlvQnV0dG9uIGZyb20gXCIuL1N0eWxlZFJhZGlvQnV0dG9uXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSURlZmluaXRpb248VCBleHRlbmRzIHN0cmluZz4ge1xuICAgIHZhbHVlOiBUO1xuICAgIGNsYXNzTmFtZT86IHN0cmluZztcbiAgICBkaXNhYmxlZD86IGJvb2xlYW47XG4gICAgbGFiZWw6IFJlYWN0Tm9kZTtcbiAgICBkZXNjcmlwdGlvbj86IFJlYWN0Tm9kZTtcbiAgICBjaGVja2VkPzogYm9vbGVhbjsgLy8gSWYgcHJvdmlkZWQgaXQgd2lsbCBvdmVycmlkZSB0aGUgdmFsdWUgY29tcGFyaXNvbiBkb25lIGluIHRoZSBncm91cFxufVxuXG5pbnRlcmZhY2UgSVByb3BzPFQgZXh0ZW5kcyBzdHJpbmc+IHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICAgIGRlZmluaXRpb25zOiBJRGVmaW5pdGlvbjxUPltdO1xuICAgIHZhbHVlPzogVDsgLy8gaWYgbm90IHByb3ZpZGVkIG5vIG9wdGlvbnMgd2lsbCBiZSBzZWxlY3RlZFxuICAgIG91dGxpbmVkPzogYm9vbGVhbjtcbiAgICBkaXNhYmxlZD86IGJvb2xlYW47XG4gICAgb25DaGFuZ2UobmV3VmFsdWU6IFQpOiB2b2lkO1xufVxuXG5mdW5jdGlvbiBTdHlsZWRSYWRpb0dyb3VwPFQgZXh0ZW5kcyBzdHJpbmc+KHtcbiAgICBuYW1lLFxuICAgIGRlZmluaXRpb25zLFxuICAgIHZhbHVlLFxuICAgIGNsYXNzTmFtZSxcbiAgICBvdXRsaW5lZCxcbiAgICBkaXNhYmxlZCxcbiAgICBvbkNoYW5nZSxcbn06IElQcm9wczxUPikge1xuICAgIGNvbnN0IF9vbkNoYW5nZSA9IGUgPT4ge1xuICAgICAgICBvbkNoYW5nZShlLnRhcmdldC52YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgIHsgZGVmaW5pdGlvbnMubWFwKGQgPT4ge1xuICAgICAgICAgICAgY29uc3QgaWQgPSBgJHtuYW1lfS0ke2QudmFsdWV9YDtcbiAgICAgICAgICAgIHJldHVybiAoPFJlYWN0LkZyYWdtZW50IGtleT17ZC52YWx1ZX0+XG4gICAgICAgICAgICAgICAgPFN0eWxlZFJhZGlvQnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIGlkPXtpZH1cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKGNsYXNzTmFtZSwgZC5jbGFzc05hbWUpfVxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17X29uQ2hhbmdlfVxuICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXtkLmNoZWNrZWQgIT09IHVuZGVmaW5lZCA/IGQuY2hlY2tlZCA6IGQudmFsdWUgPT09IHZhbHVlfVxuICAgICAgICAgICAgICAgICAgICBuYW1lPXtuYW1lfVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17ZC52YWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2QuZGlzYWJsZWQgPz8gZGlzYWJsZWR9XG4gICAgICAgICAgICAgICAgICAgIG91dGxpbmVkPXtvdXRsaW5lZH1cbiAgICAgICAgICAgICAgICAgICAgYXJpYS1kZXNjcmliZWRieT17ZC5kZXNjcmlwdGlvbiA/IGAke2lkfS1kZXNjcmlwdGlvbmAgOiB1bmRlZmluZWR9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICB7IGQubGFiZWwgfVxuICAgICAgICAgICAgICAgIDwvU3R5bGVkUmFkaW9CdXR0b24+XG4gICAgICAgICAgICAgICAgeyBkLmRlc2NyaXB0aW9uID8gPHNwYW4gaWQ9e2Ake2lkfS1kZXNjcmlwdGlvbmB9PnsgZC5kZXNjcmlwdGlvbiB9PC9zcGFuPiA6IG51bGwgfVxuICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD4pO1xuICAgICAgICB9KSB9XG4gICAgPC9SZWFjdC5GcmFnbWVudD47XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN0eWxlZFJhZGlvR3JvdXA7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQWdCQTs7QUFDQTs7QUFFQTs7QUFuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBMEJBLFNBQVNBLGdCQUFULE9BUWM7RUFBQSxJQVI4QjtJQUN4Q0MsSUFEd0M7SUFFeENDLFdBRndDO0lBR3hDQyxLQUh3QztJQUl4Q0MsU0FKd0M7SUFLeENDLFFBTHdDO0lBTXhDQyxRQU53QztJQU94Q0M7RUFQd0MsQ0FROUI7O0VBQ1YsTUFBTUMsU0FBUyxHQUFHQyxDQUFDLElBQUk7SUFDbkJGLFFBQVEsQ0FBQ0UsQ0FBQyxDQUFDQyxNQUFGLENBQVNQLEtBQVYsQ0FBUjtFQUNILENBRkQ7O0VBSUEsb0JBQU8sNkJBQUMsY0FBRCxDQUFPLFFBQVAsUUFDREQsV0FBVyxDQUFDUyxHQUFaLENBQWdCQyxDQUFDLElBQUk7SUFDbkIsTUFBTUMsRUFBRSxHQUFJLEdBQUVaLElBQUssSUFBR1csQ0FBQyxDQUFDVCxLQUFNLEVBQTlCO0lBQ0Esb0JBQVEsNkJBQUMsY0FBRCxDQUFPLFFBQVA7TUFBZ0IsR0FBRyxFQUFFUyxDQUFDLENBQUNUO0lBQXZCLGdCQUNKLDZCQUFDLDBCQUFEO01BQ0ksRUFBRSxFQUFFVSxFQURSO01BRUksU0FBUyxFQUFFLElBQUFDLG1CQUFBLEVBQVdWLFNBQVgsRUFBc0JRLENBQUMsQ0FBQ1IsU0FBeEIsQ0FGZjtNQUdJLFFBQVEsRUFBRUksU0FIZDtNQUlJLE9BQU8sRUFBRUksQ0FBQyxDQUFDRyxPQUFGLEtBQWNDLFNBQWQsR0FBMEJKLENBQUMsQ0FBQ0csT0FBNUIsR0FBc0NILENBQUMsQ0FBQ1QsS0FBRixLQUFZQSxLQUovRDtNQUtJLElBQUksRUFBRUYsSUFMVjtNQU1JLEtBQUssRUFBRVcsQ0FBQyxDQUFDVCxLQU5iO01BT0ksUUFBUSxFQUFFUyxDQUFDLENBQUNOLFFBQUYsSUFBY0EsUUFQNUI7TUFRSSxRQUFRLEVBQUVELFFBUmQ7TUFTSSxvQkFBa0JPLENBQUMsQ0FBQ0ssV0FBRixHQUFpQixHQUFFSixFQUFHLGNBQXRCLEdBQXNDRztJQVQ1RCxHQVdNSixDQUFDLENBQUNNLEtBWFIsQ0FESSxFQWNGTixDQUFDLENBQUNLLFdBQUYsZ0JBQWdCO01BQU0sRUFBRSxFQUFHLEdBQUVKLEVBQUc7SUFBaEIsR0FBaUNELENBQUMsQ0FBQ0ssV0FBbkMsQ0FBaEIsR0FBMEUsSUFkeEUsQ0FBUjtFQWdCSCxDQWxCQyxDQURDLENBQVA7QUFxQkg7O2VBRWNqQixnQiJ9