"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _logger = require("matrix-js-sdk/src/logger");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _actions = require("../../../dispatcher/actions");

var _BaseAvatar = _interopRequireDefault(require("./BaseAvatar"));

var _Media = require("../../../customisations/Media");

var _context = require("../right_panel/context");

var _UserIdentifier = _interopRequireDefault(require("../../../customisations/UserIdentifier"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

const _excluded = ["member", "fallbackUserId", "onClick", "viewUserOnClick", "forceHistorical", "hideTitle"];

class MemberAvatar extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    this.state = MemberAvatar.getState(props);
  }

  static getDerivedStateFromProps(nextProps) {
    return MemberAvatar.getState(nextProps);
  }

  static getState(props) {
    let member = props.member;

    if (member && !props.forceHistorical && _SettingsStore.default.getValue("useOnlyCurrentProfiles")) {
      const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(member.roomId);

      if (room) {
        member = room.getMember(member.userId);
      }
    }

    if (member?.name) {
      let imageUrl = null;

      const userTitle = _UserIdentifier.default.getDisplayUserIdentifier(member.userId, {
        roomId: member?.roomId
      });

      if (member.getMxcAvatarUrl()) {
        imageUrl = (0, _Media.mediaFromMxc)(member.getMxcAvatarUrl()).getThumbnailOfSourceHttp(props.width, props.height, props.resizeMethod);
      }

      return {
        name: member.name,
        title: props.title || userTitle,
        imageUrl: imageUrl
      };
    } else if (props.fallbackUserId) {
      return {
        name: props.fallbackUserId,
        title: props.fallbackUserId
      };
    } else {
      _logger.logger.error("MemberAvatar called somehow with null member or fallbackUserId");

      return {}; // prevent an explosion
    }
  }

  render() {
    let _this$props = this.props,
        {
      member,
      fallbackUserId,
      onClick,
      viewUserOnClick,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      forceHistorical,
      hideTitle
    } = _this$props,
        otherProps = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
    const userId = member ? member.userId : fallbackUserId;

    if (viewUserOnClick) {
      onClick = () => {
        _dispatcher.default.dispatch({
          action: _actions.Action.ViewUser,
          member: this.props.member,
          push: this.context.isCard
        });
      };
    }

    return /*#__PURE__*/_react.default.createElement(_BaseAvatar.default, (0, _extends2.default)({}, otherProps, {
      name: this.state.name,
      title: hideTitle ? undefined : this.state.title,
      idName: userId,
      url: this.state.imageUrl,
      onClick: onClick
    }));
  }

}

exports.default = MemberAvatar;
(0, _defineProperty2.default)(MemberAvatar, "defaultProps", {
  width: 40,
  height: 40,
  resizeMethod: 'crop',
  viewUserOnClick: false
});
MemberAvatar.contextType = _context.CardContext;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,