"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _room = require("matrix-js-sdk/src/models/room");

var _user = require("matrix-js-sdk/src/models/user");

var _event = require("matrix-js-sdk/src/@types/event");

var _partials = require("matrix-js-sdk/src/@types/partials");

var _NamespacedValue = require("matrix-js-sdk/src/NamespacedValue");

var _RoomAvatar = _interopRequireDefault(require("./RoomAvatar"));

var _NotificationBadge = _interopRequireDefault(require("../rooms/NotificationBadge"));

var _RoomNotificationStateStore = require("../../../stores/notifications/RoomNotificationStateStore");

var _presence = require("../../../utils/presence");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _languageHandler = require("../../../languageHandler");

var _TextWithTooltip = _interopRequireDefault(require("../elements/TextWithTooltip"));

var _DMRoomMap = _interopRequireDefault(require("../../../utils/DMRoomMap"));

/*
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const BUSY_PRESENCE_NAME = new _NamespacedValue.UnstableValue("busy", "org.matrix.msc3026.busy");
var Icon;

(function (Icon) {
  Icon["None"] = "NONE";
  Icon["Globe"] = "GLOBE";
  Icon["PresenceOnline"] = "ONLINE";
  Icon["PresenceAway"] = "AWAY";
  Icon["PresenceOffline"] = "OFFLINE";
  Icon["PresenceBusy"] = "BUSY";
})(Icon || (Icon = {}));

function tooltipText(variant) {
  switch (variant) {
    case Icon.Globe:
      return (0, _languageHandler._t)("This room is public");

    case Icon.PresenceOnline:
      return (0, _languageHandler._t)("Online");

    case Icon.PresenceAway:
      return (0, _languageHandler._t)("Away");

    case Icon.PresenceOffline:
      return (0, _languageHandler._t)("Offline");

    case Icon.PresenceBusy:
      return (0, _languageHandler._t)("Busy");
  }
}

class DecoratedRoomAvatar extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "_dmUser", void 0);
    (0, _defineProperty2.default)(this, "isUnmounted", false);
    (0, _defineProperty2.default)(this, "isWatchingTimeline", false);
    (0, _defineProperty2.default)(this, "onRoomTimeline", (ev, room) => {
      if (this.isUnmounted) return;
      if (this.props.room.roomId !== room?.roomId) return;

      if (ev.getType() === _event.EventType.RoomJoinRules || ev.getType() === _event.EventType.RoomMember) {
        const newIcon = this.calculateIcon();

        if (newIcon !== this.state.icon) {
          this.setState({
            icon: newIcon
          });
        }
      }
    });
    (0, _defineProperty2.default)(this, "onPresenceUpdate", () => {
      if (this.isUnmounted) return;
      const newIcon = this.getPresenceIcon();
      if (newIcon !== this.state.icon) this.setState({
        icon: newIcon
      });
    });
    this.state = {
      notificationState: _RoomNotificationStateStore.RoomNotificationStateStore.instance.getRoomState(this.props.room),
      icon: this.calculateIcon()
    };
  }

  componentWillUnmount() {
    this.isUnmounted = true;
    if (this.isWatchingTimeline) this.props.room.off(_room.RoomEvent.Timeline, this.onRoomTimeline);
    this.dmUser = null; // clear listeners, if any
  }

  get isPublicRoom() {
    const joinRules = this.props.room.currentState.getStateEvents(_event.EventType.RoomJoinRules, "");
    const joinRule = joinRules && joinRules.getContent().join_rule;
    return joinRule === _partials.JoinRule.Public;
  }

  get dmUser() {
    return this._dmUser;
  }

  set dmUser(val) {
    const oldUser = this._dmUser;
    this._dmUser = val;

    if (oldUser && oldUser !== this._dmUser) {
      oldUser.off(_user.UserEvent.CurrentlyActive, this.onPresenceUpdate);
      oldUser.off(_user.UserEvent.Presence, this.onPresenceUpdate);
    }

    if (this._dmUser && oldUser !== this._dmUser) {
      this._dmUser.on(_user.UserEvent.CurrentlyActive, this.onPresenceUpdate);

      this._dmUser.on(_user.UserEvent.Presence, this.onPresenceUpdate);
    }
  }

  getPresenceIcon() {
    if (!this.dmUser) return Icon.None;
    let icon = Icon.None;
    const isOnline = this.dmUser.currentlyActive || this.dmUser.presence === 'online';

    if (BUSY_PRESENCE_NAME.matches(this.dmUser.presence)) {
      icon = Icon.PresenceBusy;
    } else if (isOnline) {
      icon = Icon.PresenceOnline;
    } else if (this.dmUser.presence === 'offline') {
      icon = Icon.PresenceOffline;
    } else if (this.dmUser.presence === 'unavailable') {
      icon = Icon.PresenceAway;
    }

    return icon;
  }

  calculateIcon() {
    let icon = Icon.None; // We look at the DMRoomMap and not the tag here so that we don't exclude DMs in Favourites

    const otherUserId = _DMRoomMap.default.shared().getUserIdForRoomId(this.props.room.roomId);

    if (otherUserId && this.props.room.getJoinedMemberCount() === 2) {
      // Track presence, if available
      if ((0, _presence.isPresenceEnabled)()) {
        if (otherUserId) {
          this.dmUser = _MatrixClientPeg.MatrixClientPeg.get().getUser(otherUserId);
          icon = this.getPresenceIcon();
        }
      }
    } else {
      // Track publicity
      icon = this.isPublicRoom ? Icon.Globe : Icon.None;

      if (!this.isWatchingTimeline) {
        this.props.room.on(_room.RoomEvent.Timeline, this.onRoomTimeline);
        this.isWatchingTimeline = true;
      }
    }

    return icon;
  }

  render() {
    let badge;

    if (this.props.displayBadge) {
      badge = /*#__PURE__*/_react.default.createElement(_NotificationBadge.default, {
        notification: this.state.notificationState,
        forceCount: this.props.forceCount,
        roomId: this.props.room.roomId
      });
    }

    let icon;

    if (this.state.icon !== Icon.None) {
      icon = /*#__PURE__*/_react.default.createElement(_TextWithTooltip.default, {
        tooltip: tooltipText(this.state.icon),
        tooltipProps: this.props.tooltipProps,
        class: `mx_DecoratedRoomAvatar_icon mx_DecoratedRoomAvatar_icon_${this.state.icon.toLowerCase()}`
      });
    }

    const classes = (0, _classnames.default)("mx_DecoratedRoomAvatar", {
      mx_DecoratedRoomAvatar_cutout: icon
    });
    return /*#__PURE__*/_react.default.createElement("div", {
      className: classes
    }, /*#__PURE__*/_react.default.createElement(_RoomAvatar.default, {
      room: this.props.room,
      width: this.props.avatarSize,
      height: this.props.avatarSize,
      oobData: this.props.oobData,
      viewAvatarOnClick: this.props.viewAvatarOnClick
    }), icon, badge);
  }

}

exports.default = DecoratedRoomAvatar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,