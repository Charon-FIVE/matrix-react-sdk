"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _languageHandler = require("../../../languageHandler");

var _HeaderButton = _interopRequireDefault(require("./HeaderButton"));

var _HeaderButtons = _interopRequireWildcard(require("./HeaderButtons"));

var _RightPanelStorePhases = require("../../../stores/right-panel/RightPanelStorePhases");

var _actions = require("../../../dispatcher/actions");

var _RightPanelStore = _interopRequireDefault(require("../../../stores/right-panel/RightPanelStore"));

var _useSettings = require("../../../hooks/useSettings");

var _PinnedMessagesCard = require("./PinnedMessagesCard");

var _threads = require("../../../dispatcher/dispatch-actions/threads");

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _RoomNotificationStateStore = require("../../../stores/notifications/RoomNotificationStateStore");

var _NotificationColor = require("../../../stores/notifications/NotificationColor");

var _NotificationState = require("../../../stores/notifications/NotificationState");

var _PosthogTrackers = _interopRequireDefault(require("../../../PosthogTrackers"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2017 Vector Creations Ltd
Copyright 2017 New Vector Ltd
Copyright 2018 New Vector Ltd
Copyright 2019, 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const ROOM_INFO_PHASES = [_RightPanelStorePhases.RightPanelPhases.RoomSummary, _RightPanelStorePhases.RightPanelPhases.Widget, _RightPanelStorePhases.RightPanelPhases.FilePanel, _RightPanelStorePhases.RightPanelPhases.RoomMemberList, _RightPanelStorePhases.RightPanelPhases.RoomMemberInfo, _RightPanelStorePhases.RightPanelPhases.EncryptionPanel, _RightPanelStorePhases.RightPanelPhases.Room3pidMemberInfo];

const UnreadIndicator = _ref => {
  let {
    color
  } = _ref;

  if (color === _NotificationColor.NotificationColor.None) {
    return null;
  }

  const classes = (0, _classnames.default)({
    "mx_Indicator": true,
    "mx_RightPanel_headerButton_unreadIndicator": true,
    "mx_Indicator_bold": color === _NotificationColor.NotificationColor.Bold,
    "mx_Indicator_gray": color === _NotificationColor.NotificationColor.Grey,
    "mx_Indicator_red": color === _NotificationColor.NotificationColor.Red
  });
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_RightPanel_headerButton_unreadIndicator_bg"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: classes
  }));
};

const PinnedMessagesHeaderButton = _ref2 => {
  let {
    room,
    isHighlighted,
    onClick
  } = _ref2;
  const pinningEnabled = (0, _useSettings.useSettingValue)("feature_pinning");
  const pinnedEvents = (0, _PinnedMessagesCard.usePinnedEvents)(pinningEnabled && room);
  const readPinnedEvents = (0, _PinnedMessagesCard.useReadPinnedEvents)(pinningEnabled && room);
  if (!pinnedEvents?.length) return null;
  let unreadIndicator;

  if (pinnedEvents.some(id => !readPinnedEvents.has(id))) {
    unreadIndicator = /*#__PURE__*/_react.default.createElement(UnreadIndicator, null);
  }

  return /*#__PURE__*/_react.default.createElement(_HeaderButton.default, {
    name: "pinnedMessagesButton",
    title: (0, _languageHandler._t)("Pinned messages"),
    isHighlighted: isHighlighted,
    isUnread: !!unreadIndicator,
    onClick: onClick
  }, unreadIndicator);
};

const TimelineCardHeaderButton = _ref3 => {
  let {
    room,
    isHighlighted,
    onClick
  } = _ref3;
  let unreadIndicator;

  const color = _RoomNotificationStateStore.RoomNotificationStateStore.instance.getRoomState(room).color;

  switch (color) {
    case _NotificationColor.NotificationColor.Bold:
    case _NotificationColor.NotificationColor.Grey:
    case _NotificationColor.NotificationColor.Red:
      unreadIndicator = /*#__PURE__*/_react.default.createElement(UnreadIndicator, {
        color: color
      });
  }

  return /*#__PURE__*/_react.default.createElement(_HeaderButton.default, {
    name: "timelineCardButton",
    title: (0, _languageHandler._t)("Chat"),
    isHighlighted: isHighlighted,
    onClick: onClick
  }, unreadIndicator);
};

class RoomHeaderButtons extends _HeaderButtons.default {
  constructor(props) {
    super(props, _HeaderButtons.HeaderKind.Room);
    (0, _defineProperty2.default)(this, "threadNotificationState", void 0);
    (0, _defineProperty2.default)(this, "onThreadNotification", () => {
      this.setState({
        threadNotificationColor: this.threadNotificationState.color
      });
    });
    (0, _defineProperty2.default)(this, "onRoomSummaryClicked", () => {
      // use roomPanelPhase rather than this.state.phase as it remembers the latest one if we close
      const currentPhase = _RightPanelStore.default.instance.currentCard.phase;

      if (ROOM_INFO_PHASES.includes(currentPhase)) {
        if (this.state.phase === currentPhase) {
          this.setPhase(currentPhase);
        } else {
          this.setPhase(currentPhase, _RightPanelStore.default.instance.currentCard.state);
        }
      } else {
        // This toggles for us, if needed
        this.setPhase(_RightPanelStorePhases.RightPanelPhases.RoomSummary);
      }
    });
    (0, _defineProperty2.default)(this, "onNotificationsClicked", () => {
      // This toggles for us, if needed
      this.setPhase(_RightPanelStorePhases.RightPanelPhases.NotificationPanel);
    });
    (0, _defineProperty2.default)(this, "onPinnedMessagesClicked", () => {
      // This toggles for us, if needed
      this.setPhase(_RightPanelStorePhases.RightPanelPhases.PinnedMessages);
    });
    (0, _defineProperty2.default)(this, "onTimelineCardClicked", () => {
      this.setPhase(_RightPanelStorePhases.RightPanelPhases.Timeline);
    });
    (0, _defineProperty2.default)(this, "onThreadsPanelClicked", ev => {
      if (RoomHeaderButtons.THREAD_PHASES.includes(this.state.phase)) {
        _RightPanelStore.default.instance.togglePanel(this.props.room?.roomId);
      } else {
        (0, _threads.showThreadPanel)();

        _PosthogTrackers.default.trackInteraction("WebRoomHeaderButtonsThreadsButton", ev);
      }
    });
    this.threadNotificationState = _RoomNotificationStateStore.RoomNotificationStateStore.instance.getThreadsRoomState(this.props.room);
  }

  componentDidMount() {
    super.componentDidMount();
    this.threadNotificationState.on(_NotificationState.NotificationStateEvents.Update, this.onThreadNotification);
  }

  componentWillUnmount() {
    super.componentWillUnmount();
    this.threadNotificationState.off(_NotificationState.NotificationStateEvents.Update, this.onThreadNotification);
  }

  onAction(payload) {
    if (payload.action === _actions.Action.ViewUser) {
      if (payload.member) {
        if (payload.push) {
          _RightPanelStore.default.instance.pushCard({
            phase: _RightPanelStorePhases.RightPanelPhases.RoomMemberInfo,
            state: {
              member: payload.member
            }
          });
        } else {
          _RightPanelStore.default.instance.setCards([{
            phase: _RightPanelStorePhases.RightPanelPhases.RoomSummary
          }, {
            phase: _RightPanelStorePhases.RightPanelPhases.RoomMemberList
          }, {
            phase: _RightPanelStorePhases.RightPanelPhases.RoomMemberInfo,
            state: {
              member: payload.member
            }
          }]);
        }
      } else {
        this.setPhase(_RightPanelStorePhases.RightPanelPhases.RoomMemberList);
      }
    } else if (payload.action === "view_3pid_invite") {
      if (payload.event) {
        this.setPhase(_RightPanelStorePhases.RightPanelPhases.Room3pidMemberInfo, {
          memberInfoEvent: payload.event
        });
      } else {
        this.setPhase(_RightPanelStorePhases.RightPanelPhases.RoomMemberList);
      }
    }
  }

  renderButtons() {
    const rightPanelPhaseButtons = new Map();
    rightPanelPhaseButtons.set(_RightPanelStorePhases.RightPanelPhases.PinnedMessages, /*#__PURE__*/_react.default.createElement(PinnedMessagesHeaderButton, {
      key: "pinnedMessagesButton",
      room: this.props.room,
      isHighlighted: this.isPhase(_RightPanelStorePhases.RightPanelPhases.PinnedMessages),
      onClick: this.onPinnedMessagesClicked
    }));
    rightPanelPhaseButtons.set(_RightPanelStorePhases.RightPanelPhases.Timeline, /*#__PURE__*/_react.default.createElement(TimelineCardHeaderButton, {
      key: "timelineButton",
      room: this.props.room,
      isHighlighted: this.isPhase(_RightPanelStorePhases.RightPanelPhases.Timeline),
      onClick: this.onTimelineCardClicked
    }));
    rightPanelPhaseButtons.set(_RightPanelStorePhases.RightPanelPhases.ThreadPanel, _SettingsStore.default.getValue("feature_thread") ? /*#__PURE__*/_react.default.createElement(_HeaderButton.default, {
      key: _RightPanelStorePhases.RightPanelPhases.ThreadPanel,
      name: "threadsButton",
      title: (0, _languageHandler._t)("Threads"),
      onClick: this.onThreadsPanelClicked,
      isHighlighted: this.isPhase(RoomHeaderButtons.THREAD_PHASES),
      isUnread: this.threadNotificationState.color > 0
    }, /*#__PURE__*/_react.default.createElement(UnreadIndicator, {
      color: this.threadNotificationState.color
    })) : null);
    rightPanelPhaseButtons.set(_RightPanelStorePhases.RightPanelPhases.NotificationPanel, /*#__PURE__*/_react.default.createElement(_HeaderButton.default, {
      key: "notifsButton",
      name: "notifsButton",
      title: (0, _languageHandler._t)('Notifications'),
      isHighlighted: this.isPhase(_RightPanelStorePhases.RightPanelPhases.NotificationPanel),
      onClick: this.onNotificationsClicked
    }));
    rightPanelPhaseButtons.set(_RightPanelStorePhases.RightPanelPhases.RoomSummary, /*#__PURE__*/_react.default.createElement(_HeaderButton.default, {
      key: "roomSummaryButton",
      name: "roomSummaryButton",
      title: (0, _languageHandler._t)('Room Info'),
      isHighlighted: this.isPhase(ROOM_INFO_PHASES),
      onClick: this.onRoomSummaryClicked
    }));
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, Array.from(rightPanelPhaseButtons.keys()).map(phase => this.props.excludedRightPanelPhaseButtons.includes(phase) ? null : rightPanelPhaseButtons.get(phase)));
  }

}

exports.default = RoomHeaderButtons;
(0, _defineProperty2.default)(RoomHeaderButtons, "THREAD_PHASES", [_RightPanelStorePhases.RightPanelPhases.ThreadPanel, _RightPanelStorePhases.RightPanelPhases.ThreadView]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJST09NX0lORk9fUEhBU0VTIiwiUmlnaHRQYW5lbFBoYXNlcyIsIlJvb21TdW1tYXJ5IiwiV2lkZ2V0IiwiRmlsZVBhbmVsIiwiUm9vbU1lbWJlckxpc3QiLCJSb29tTWVtYmVySW5mbyIsIkVuY3J5cHRpb25QYW5lbCIsIlJvb20zcGlkTWVtYmVySW5mbyIsIlVucmVhZEluZGljYXRvciIsImNvbG9yIiwiTm90aWZpY2F0aW9uQ29sb3IiLCJOb25lIiwiY2xhc3NlcyIsImNsYXNzTmFtZXMiLCJCb2xkIiwiR3JleSIsIlJlZCIsIlBpbm5lZE1lc3NhZ2VzSGVhZGVyQnV0dG9uIiwicm9vbSIsImlzSGlnaGxpZ2h0ZWQiLCJvbkNsaWNrIiwicGlubmluZ0VuYWJsZWQiLCJ1c2VTZXR0aW5nVmFsdWUiLCJwaW5uZWRFdmVudHMiLCJ1c2VQaW5uZWRFdmVudHMiLCJyZWFkUGlubmVkRXZlbnRzIiwidXNlUmVhZFBpbm5lZEV2ZW50cyIsImxlbmd0aCIsInVucmVhZEluZGljYXRvciIsInNvbWUiLCJpZCIsImhhcyIsIl90IiwiVGltZWxpbmVDYXJkSGVhZGVyQnV0dG9uIiwiUm9vbU5vdGlmaWNhdGlvblN0YXRlU3RvcmUiLCJpbnN0YW5jZSIsImdldFJvb21TdGF0ZSIsIlJvb21IZWFkZXJCdXR0b25zIiwiSGVhZGVyQnV0dG9ucyIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJIZWFkZXJLaW5kIiwiUm9vbSIsInNldFN0YXRlIiwidGhyZWFkTm90aWZpY2F0aW9uQ29sb3IiLCJ0aHJlYWROb3RpZmljYXRpb25TdGF0ZSIsImN1cnJlbnRQaGFzZSIsIlJpZ2h0UGFuZWxTdG9yZSIsImN1cnJlbnRDYXJkIiwicGhhc2UiLCJpbmNsdWRlcyIsInN0YXRlIiwic2V0UGhhc2UiLCJOb3RpZmljYXRpb25QYW5lbCIsIlBpbm5lZE1lc3NhZ2VzIiwiVGltZWxpbmUiLCJldiIsIlRIUkVBRF9QSEFTRVMiLCJ0b2dnbGVQYW5lbCIsInJvb21JZCIsInNob3dUaHJlYWRQYW5lbCIsIlBvc3Rob2dUcmFja2VycyIsInRyYWNrSW50ZXJhY3Rpb24iLCJnZXRUaHJlYWRzUm9vbVN0YXRlIiwiY29tcG9uZW50RGlkTW91bnQiLCJvbiIsIk5vdGlmaWNhdGlvblN0YXRlRXZlbnRzIiwiVXBkYXRlIiwib25UaHJlYWROb3RpZmljYXRpb24iLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIm9mZiIsIm9uQWN0aW9uIiwicGF5bG9hZCIsImFjdGlvbiIsIkFjdGlvbiIsIlZpZXdVc2VyIiwibWVtYmVyIiwicHVzaCIsInB1c2hDYXJkIiwic2V0Q2FyZHMiLCJldmVudCIsIm1lbWJlckluZm9FdmVudCIsInJlbmRlckJ1dHRvbnMiLCJyaWdodFBhbmVsUGhhc2VCdXR0b25zIiwiTWFwIiwic2V0IiwiaXNQaGFzZSIsIm9uUGlubmVkTWVzc2FnZXNDbGlja2VkIiwib25UaW1lbGluZUNhcmRDbGlja2VkIiwiVGhyZWFkUGFuZWwiLCJTZXR0aW5nc1N0b3JlIiwiZ2V0VmFsdWUiLCJvblRocmVhZHNQYW5lbENsaWNrZWQiLCJvbk5vdGlmaWNhdGlvbnNDbGlja2VkIiwib25Sb29tU3VtbWFyeUNsaWNrZWQiLCJBcnJheSIsImZyb20iLCJrZXlzIiwibWFwIiwiZXhjbHVkZWRSaWdodFBhbmVsUGhhc2VCdXR0b25zIiwiZ2V0IiwiVGhyZWFkVmlldyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL3JpZ2h0X3BhbmVsL1Jvb21IZWFkZXJCdXR0b25zLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMTUsIDIwMTYgT3Blbk1hcmtldCBMdGRcbkNvcHlyaWdodCAyMDE3IFZlY3RvciBDcmVhdGlvbnMgTHRkXG5Db3B5cmlnaHQgMjAxNyBOZXcgVmVjdG9yIEx0ZFxuQ29weXJpZ2h0IDIwMTggTmV3IFZlY3RvciBMdGRcbkNvcHlyaWdodCAyMDE5LCAyMDIwIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSBcImNsYXNzbmFtZXNcIjtcbmltcG9ydCB7IFJvb20gfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbW9kZWxzL3Jvb21cIjtcblxuaW1wb3J0IHsgX3QgfSBmcm9tICcuLi8uLi8uLi9sYW5ndWFnZUhhbmRsZXInO1xuaW1wb3J0IEhlYWRlckJ1dHRvbiBmcm9tICcuL0hlYWRlckJ1dHRvbic7XG5pbXBvcnQgSGVhZGVyQnV0dG9ucywgeyBIZWFkZXJLaW5kIH0gZnJvbSAnLi9IZWFkZXJCdXR0b25zJztcbmltcG9ydCB7IFJpZ2h0UGFuZWxQaGFzZXMgfSBmcm9tICcuLi8uLi8uLi9zdG9yZXMvcmlnaHQtcGFuZWwvUmlnaHRQYW5lbFN0b3JlUGhhc2VzJztcbmltcG9ydCB7IEFjdGlvbiB9IGZyb20gXCIuLi8uLi8uLi9kaXNwYXRjaGVyL2FjdGlvbnNcIjtcbmltcG9ydCB7IEFjdGlvblBheWxvYWQgfSBmcm9tIFwiLi4vLi4vLi4vZGlzcGF0Y2hlci9wYXlsb2Fkc1wiO1xuaW1wb3J0IFJpZ2h0UGFuZWxTdG9yZSBmcm9tIFwiLi4vLi4vLi4vc3RvcmVzL3JpZ2h0LXBhbmVsL1JpZ2h0UGFuZWxTdG9yZVwiO1xuaW1wb3J0IHsgdXNlU2V0dGluZ1ZhbHVlIH0gZnJvbSBcIi4uLy4uLy4uL2hvb2tzL3VzZVNldHRpbmdzXCI7XG5pbXBvcnQgeyB1c2VSZWFkUGlubmVkRXZlbnRzLCB1c2VQaW5uZWRFdmVudHMgfSBmcm9tICcuL1Bpbm5lZE1lc3NhZ2VzQ2FyZCc7XG5pbXBvcnQgeyBzaG93VGhyZWFkUGFuZWwgfSBmcm9tIFwiLi4vLi4vLi4vZGlzcGF0Y2hlci9kaXNwYXRjaC1hY3Rpb25zL3RocmVhZHNcIjtcbmltcG9ydCBTZXR0aW5nc1N0b3JlIGZyb20gXCIuLi8uLi8uLi9zZXR0aW5ncy9TZXR0aW5nc1N0b3JlXCI7XG5pbXBvcnQgeyBSb29tTm90aWZpY2F0aW9uU3RhdGVTdG9yZSB9IGZyb20gXCIuLi8uLi8uLi9zdG9yZXMvbm90aWZpY2F0aW9ucy9Sb29tTm90aWZpY2F0aW9uU3RhdGVTdG9yZVwiO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uQ29sb3IgfSBmcm9tIFwiLi4vLi4vLi4vc3RvcmVzL25vdGlmaWNhdGlvbnMvTm90aWZpY2F0aW9uQ29sb3JcIjtcbmltcG9ydCB7IFRocmVhZHNSb29tTm90aWZpY2F0aW9uU3RhdGUgfSBmcm9tIFwiLi4vLi4vLi4vc3RvcmVzL25vdGlmaWNhdGlvbnMvVGhyZWFkc1Jvb21Ob3RpZmljYXRpb25TdGF0ZVwiO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uU3RhdGVFdmVudHMgfSBmcm9tIFwiLi4vLi4vLi4vc3RvcmVzL25vdGlmaWNhdGlvbnMvTm90aWZpY2F0aW9uU3RhdGVcIjtcbmltcG9ydCBQb3N0aG9nVHJhY2tlcnMgZnJvbSBcIi4uLy4uLy4uL1Bvc3Rob2dUcmFja2Vyc1wiO1xuaW1wb3J0IHsgQnV0dG9uRXZlbnQgfSBmcm9tIFwiLi4vZWxlbWVudHMvQWNjZXNzaWJsZUJ1dHRvblwiO1xuXG5jb25zdCBST09NX0lORk9fUEhBU0VTID0gW1xuICAgIFJpZ2h0UGFuZWxQaGFzZXMuUm9vbVN1bW1hcnksXG4gICAgUmlnaHRQYW5lbFBoYXNlcy5XaWRnZXQsXG4gICAgUmlnaHRQYW5lbFBoYXNlcy5GaWxlUGFuZWwsXG4gICAgUmlnaHRQYW5lbFBoYXNlcy5Sb29tTWVtYmVyTGlzdCxcbiAgICBSaWdodFBhbmVsUGhhc2VzLlJvb21NZW1iZXJJbmZvLFxuICAgIFJpZ2h0UGFuZWxQaGFzZXMuRW5jcnlwdGlvblBhbmVsLFxuICAgIFJpZ2h0UGFuZWxQaGFzZXMuUm9vbTNwaWRNZW1iZXJJbmZvLFxuXTtcblxuaW50ZXJmYWNlIElVbnJlYWRJbmRpY2F0b3JQcm9wcyB7XG4gICAgY29sb3I/OiBOb3RpZmljYXRpb25Db2xvcjtcbn1cblxuY29uc3QgVW5yZWFkSW5kaWNhdG9yID0gKHsgY29sb3IgfTogSVVucmVhZEluZGljYXRvclByb3BzKSA9PiB7XG4gICAgaWYgKGNvbG9yID09PSBOb3RpZmljYXRpb25Db2xvci5Ob25lKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjbGFzc05hbWVzKHtcbiAgICAgICAgXCJteF9JbmRpY2F0b3JcIjogdHJ1ZSxcbiAgICAgICAgXCJteF9SaWdodFBhbmVsX2hlYWRlckJ1dHRvbl91bnJlYWRJbmRpY2F0b3JcIjogdHJ1ZSxcbiAgICAgICAgXCJteF9JbmRpY2F0b3JfYm9sZFwiOiBjb2xvciA9PT0gTm90aWZpY2F0aW9uQ29sb3IuQm9sZCxcbiAgICAgICAgXCJteF9JbmRpY2F0b3JfZ3JheVwiOiBjb2xvciA9PT0gTm90aWZpY2F0aW9uQ29sb3IuR3JleSxcbiAgICAgICAgXCJteF9JbmRpY2F0b3JfcmVkXCI6IGNvbG9yID09PSBOb3RpZmljYXRpb25Db2xvci5SZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIDw+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfUmlnaHRQYW5lbF9oZWFkZXJCdXR0b25fdW5yZWFkSW5kaWNhdG9yX2JnXCIgLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXN9IC8+XG4gICAgPC8+O1xufTtcblxuaW50ZXJmYWNlIElIZWFkZXJCdXR0b25Qcm9wcyB7XG4gICAgcm9vbTogUm9vbTtcbiAgICBpc0hpZ2hsaWdodGVkOiBib29sZWFuO1xuICAgIG9uQ2xpY2s6ICgpID0+IHZvaWQ7XG59XG5cbmNvbnN0IFBpbm5lZE1lc3NhZ2VzSGVhZGVyQnV0dG9uID0gKHsgcm9vbSwgaXNIaWdobGlnaHRlZCwgb25DbGljayB9OiBJSGVhZGVyQnV0dG9uUHJvcHMpID0+IHtcbiAgICBjb25zdCBwaW5uaW5nRW5hYmxlZCA9IHVzZVNldHRpbmdWYWx1ZShcImZlYXR1cmVfcGlubmluZ1wiKTtcbiAgICBjb25zdCBwaW5uZWRFdmVudHMgPSB1c2VQaW5uZWRFdmVudHMocGlubmluZ0VuYWJsZWQgJiYgcm9vbSk7XG4gICAgY29uc3QgcmVhZFBpbm5lZEV2ZW50cyA9IHVzZVJlYWRQaW5uZWRFdmVudHMocGlubmluZ0VuYWJsZWQgJiYgcm9vbSk7XG4gICAgaWYgKCFwaW5uZWRFdmVudHM/Lmxlbmd0aCkgcmV0dXJuIG51bGw7XG5cbiAgICBsZXQgdW5yZWFkSW5kaWNhdG9yO1xuICAgIGlmIChwaW5uZWRFdmVudHMuc29tZShpZCA9PiAhcmVhZFBpbm5lZEV2ZW50cy5oYXMoaWQpKSkge1xuICAgICAgICB1bnJlYWRJbmRpY2F0b3IgPSA8VW5yZWFkSW5kaWNhdG9yIC8+O1xuICAgIH1cblxuICAgIHJldHVybiA8SGVhZGVyQnV0dG9uXG4gICAgICAgIG5hbWU9XCJwaW5uZWRNZXNzYWdlc0J1dHRvblwiXG4gICAgICAgIHRpdGxlPXtfdChcIlBpbm5lZCBtZXNzYWdlc1wiKX1cbiAgICAgICAgaXNIaWdobGlnaHRlZD17aXNIaWdobGlnaHRlZH1cbiAgICAgICAgaXNVbnJlYWQ9eyEhdW5yZWFkSW5kaWNhdG9yfVxuICAgICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgID5cbiAgICAgICAgeyB1bnJlYWRJbmRpY2F0b3IgfVxuICAgIDwvSGVhZGVyQnV0dG9uPjtcbn07XG5cbmNvbnN0IFRpbWVsaW5lQ2FyZEhlYWRlckJ1dHRvbiA9ICh7IHJvb20sIGlzSGlnaGxpZ2h0ZWQsIG9uQ2xpY2sgfTogSUhlYWRlckJ1dHRvblByb3BzKSA9PiB7XG4gICAgbGV0IHVucmVhZEluZGljYXRvcjtcbiAgICBjb25zdCBjb2xvciA9IFJvb21Ob3RpZmljYXRpb25TdGF0ZVN0b3JlLmluc3RhbmNlLmdldFJvb21TdGF0ZShyb29tKS5jb2xvcjtcbiAgICBzd2l0Y2ggKGNvbG9yKSB7XG4gICAgICAgIGNhc2UgTm90aWZpY2F0aW9uQ29sb3IuQm9sZDpcbiAgICAgICAgY2FzZSBOb3RpZmljYXRpb25Db2xvci5HcmV5OlxuICAgICAgICBjYXNlIE5vdGlmaWNhdGlvbkNvbG9yLlJlZDpcbiAgICAgICAgICAgIHVucmVhZEluZGljYXRvciA9IDxVbnJlYWRJbmRpY2F0b3IgY29sb3I9e2NvbG9yfSAvPjtcbiAgICB9XG4gICAgcmV0dXJuIDxIZWFkZXJCdXR0b25cbiAgICAgICAgbmFtZT1cInRpbWVsaW5lQ2FyZEJ1dHRvblwiXG4gICAgICAgIHRpdGxlPXtfdChcIkNoYXRcIil9XG4gICAgICAgIGlzSGlnaGxpZ2h0ZWQ9e2lzSGlnaGxpZ2h0ZWR9XG4gICAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgPlxuICAgICAgICB7IHVucmVhZEluZGljYXRvciB9XG4gICAgPC9IZWFkZXJCdXR0b24+O1xufTtcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgcm9vbT86IFJvb207XG4gICAgZXhjbHVkZWRSaWdodFBhbmVsUGhhc2VCdXR0b25zPzogQXJyYXk8UmlnaHRQYW5lbFBoYXNlcz47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvb21IZWFkZXJCdXR0b25zIGV4dGVuZHMgSGVhZGVyQnV0dG9uczxJUHJvcHM+IHtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBUSFJFQURfUEhBU0VTID0gW1xuICAgICAgICBSaWdodFBhbmVsUGhhc2VzLlRocmVhZFBhbmVsLFxuICAgICAgICBSaWdodFBhbmVsUGhhc2VzLlRocmVhZFZpZXcsXG4gICAgXTtcbiAgICBwcml2YXRlIHRocmVhZE5vdGlmaWNhdGlvblN0YXRlOiBUaHJlYWRzUm9vbU5vdGlmaWNhdGlvblN0YXRlO1xuXG4gICAgY29uc3RydWN0b3IocHJvcHM6IElQcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcywgSGVhZGVyS2luZC5Sb29tKTtcblxuICAgICAgICB0aGlzLnRocmVhZE5vdGlmaWNhdGlvblN0YXRlID0gUm9vbU5vdGlmaWNhdGlvblN0YXRlU3RvcmUuaW5zdGFuY2UuZ2V0VGhyZWFkc1Jvb21TdGF0ZSh0aGlzLnByb3BzLnJvb20pO1xuICAgIH1cblxuICAgIHB1YmxpYyBjb21wb25lbnREaWRNb3VudCgpOiB2b2lkIHtcbiAgICAgICAgc3VwZXIuY29tcG9uZW50RGlkTW91bnQoKTtcbiAgICAgICAgdGhpcy50aHJlYWROb3RpZmljYXRpb25TdGF0ZS5vbihOb3RpZmljYXRpb25TdGF0ZUV2ZW50cy5VcGRhdGUsIHRoaXMub25UaHJlYWROb3RpZmljYXRpb24pO1xuICAgIH1cblxuICAgIHB1YmxpYyBjb21wb25lbnRXaWxsVW5tb3VudCgpOiB2b2lkIHtcbiAgICAgICAgc3VwZXIuY29tcG9uZW50V2lsbFVubW91bnQoKTtcbiAgICAgICAgdGhpcy50aHJlYWROb3RpZmljYXRpb25TdGF0ZS5vZmYoTm90aWZpY2F0aW9uU3RhdGVFdmVudHMuVXBkYXRlLCB0aGlzLm9uVGhyZWFkTm90aWZpY2F0aW9uKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uVGhyZWFkTm90aWZpY2F0aW9uID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHRocmVhZE5vdGlmaWNhdGlvbkNvbG9yOiB0aGlzLnRocmVhZE5vdGlmaWNhdGlvblN0YXRlLmNvbG9yLFxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcHJvdGVjdGVkIG9uQWN0aW9uKHBheWxvYWQ6IEFjdGlvblBheWxvYWQpIHtcbiAgICAgICAgaWYgKHBheWxvYWQuYWN0aW9uID09PSBBY3Rpb24uVmlld1VzZXIpIHtcbiAgICAgICAgICAgIGlmIChwYXlsb2FkLm1lbWJlcikge1xuICAgICAgICAgICAgICAgIGlmIChwYXlsb2FkLnB1c2gpIHtcbiAgICAgICAgICAgICAgICAgICAgUmlnaHRQYW5lbFN0b3JlLmluc3RhbmNlLnB1c2hDYXJkKFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBwaGFzZTogUmlnaHRQYW5lbFBoYXNlcy5Sb29tTWVtYmVySW5mbywgc3RhdGU6IHsgbWVtYmVyOiBwYXlsb2FkLm1lbWJlciB9IH0sXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgUmlnaHRQYW5lbFN0b3JlLmluc3RhbmNlLnNldENhcmRzKFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgcGhhc2U6IFJpZ2h0UGFuZWxQaGFzZXMuUm9vbVN1bW1hcnkgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgcGhhc2U6IFJpZ2h0UGFuZWxQaGFzZXMuUm9vbU1lbWJlckxpc3QgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgcGhhc2U6IFJpZ2h0UGFuZWxQaGFzZXMuUm9vbU1lbWJlckluZm8sIHN0YXRlOiB7IG1lbWJlcjogcGF5bG9hZC5tZW1iZXIgfSB9LFxuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0UGhhc2UoUmlnaHRQYW5lbFBoYXNlcy5Sb29tTWVtYmVyTGlzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocGF5bG9hZC5hY3Rpb24gPT09IFwidmlld18zcGlkX2ludml0ZVwiKSB7XG4gICAgICAgICAgICBpZiAocGF5bG9hZC5ldmVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0UGhhc2UoUmlnaHRQYW5lbFBoYXNlcy5Sb29tM3BpZE1lbWJlckluZm8sIHsgbWVtYmVySW5mb0V2ZW50OiBwYXlsb2FkLmV2ZW50IH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFBoYXNlKFJpZ2h0UGFuZWxQaGFzZXMuUm9vbU1lbWJlckxpc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvblJvb21TdW1tYXJ5Q2xpY2tlZCA9ICgpID0+IHtcbiAgICAgICAgLy8gdXNlIHJvb21QYW5lbFBoYXNlIHJhdGhlciB0aGFuIHRoaXMuc3RhdGUucGhhc2UgYXMgaXQgcmVtZW1iZXJzIHRoZSBsYXRlc3Qgb25lIGlmIHdlIGNsb3NlXG4gICAgICAgIGNvbnN0IGN1cnJlbnRQaGFzZSA9IFJpZ2h0UGFuZWxTdG9yZS5pbnN0YW5jZS5jdXJyZW50Q2FyZC5waGFzZTtcbiAgICAgICAgaWYgKFJPT01fSU5GT19QSEFTRVMuaW5jbHVkZXMoY3VycmVudFBoYXNlKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUucGhhc2UgPT09IGN1cnJlbnRQaGFzZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0UGhhc2UoY3VycmVudFBoYXNlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRQaGFzZShjdXJyZW50UGhhc2UsIFJpZ2h0UGFuZWxTdG9yZS5pbnN0YW5jZS5jdXJyZW50Q2FyZC5zdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBUaGlzIHRvZ2dsZXMgZm9yIHVzLCBpZiBuZWVkZWRcbiAgICAgICAgICAgIHRoaXMuc2V0UGhhc2UoUmlnaHRQYW5lbFBoYXNlcy5Sb29tU3VtbWFyeSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBvbk5vdGlmaWNhdGlvbnNDbGlja2VkID0gKCkgPT4ge1xuICAgICAgICAvLyBUaGlzIHRvZ2dsZXMgZm9yIHVzLCBpZiBuZWVkZWRcbiAgICAgICAgdGhpcy5zZXRQaGFzZShSaWdodFBhbmVsUGhhc2VzLk5vdGlmaWNhdGlvblBhbmVsKTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBvblBpbm5lZE1lc3NhZ2VzQ2xpY2tlZCA9ICgpID0+IHtcbiAgICAgICAgLy8gVGhpcyB0b2dnbGVzIGZvciB1cywgaWYgbmVlZGVkXG4gICAgICAgIHRoaXMuc2V0UGhhc2UoUmlnaHRQYW5lbFBoYXNlcy5QaW5uZWRNZXNzYWdlcyk7XG4gICAgfTtcbiAgICBwcml2YXRlIG9uVGltZWxpbmVDYXJkQ2xpY2tlZCA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5zZXRQaGFzZShSaWdodFBhbmVsUGhhc2VzLlRpbWVsaW5lKTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBvblRocmVhZHNQYW5lbENsaWNrZWQgPSAoZXY6IEJ1dHRvbkV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChSb29tSGVhZGVyQnV0dG9ucy5USFJFQURfUEhBU0VTLmluY2x1ZGVzKHRoaXMuc3RhdGUucGhhc2UpKSB7XG4gICAgICAgICAgICBSaWdodFBhbmVsU3RvcmUuaW5zdGFuY2UudG9nZ2xlUGFuZWwodGhpcy5wcm9wcy5yb29tPy5yb29tSWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2hvd1RocmVhZFBhbmVsKCk7XG4gICAgICAgICAgICBQb3N0aG9nVHJhY2tlcnMudHJhY2tJbnRlcmFjdGlvbihcIldlYlJvb21IZWFkZXJCdXR0b25zVGhyZWFkc0J1dHRvblwiLCBldik7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHVibGljIHJlbmRlckJ1dHRvbnMoKSB7XG4gICAgICAgIGNvbnN0IHJpZ2h0UGFuZWxQaGFzZUJ1dHRvbnM6IE1hcDxSaWdodFBhbmVsUGhhc2VzLCBhbnk+ID0gbmV3IE1hcCgpO1xuXG4gICAgICAgIHJpZ2h0UGFuZWxQaGFzZUJ1dHRvbnMuc2V0KFJpZ2h0UGFuZWxQaGFzZXMuUGlubmVkTWVzc2FnZXMsXG4gICAgICAgICAgICA8UGlubmVkTWVzc2FnZXNIZWFkZXJCdXR0b25cbiAgICAgICAgICAgICAgICBrZXk9XCJwaW5uZWRNZXNzYWdlc0J1dHRvblwiXG4gICAgICAgICAgICAgICAgcm9vbT17dGhpcy5wcm9wcy5yb29tfVxuICAgICAgICAgICAgICAgIGlzSGlnaGxpZ2h0ZWQ9e3RoaXMuaXNQaGFzZShSaWdodFBhbmVsUGhhc2VzLlBpbm5lZE1lc3NhZ2VzKX1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9uUGlubmVkTWVzc2FnZXNDbGlja2VkfSAvPixcbiAgICAgICAgKTtcbiAgICAgICAgcmlnaHRQYW5lbFBoYXNlQnV0dG9ucy5zZXQoUmlnaHRQYW5lbFBoYXNlcy5UaW1lbGluZSxcbiAgICAgICAgICAgIDxUaW1lbGluZUNhcmRIZWFkZXJCdXR0b25cbiAgICAgICAgICAgICAgICBrZXk9XCJ0aW1lbGluZUJ1dHRvblwiXG4gICAgICAgICAgICAgICAgcm9vbT17dGhpcy5wcm9wcy5yb29tfVxuICAgICAgICAgICAgICAgIGlzSGlnaGxpZ2h0ZWQ9e3RoaXMuaXNQaGFzZShSaWdodFBhbmVsUGhhc2VzLlRpbWVsaW5lKX1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9uVGltZWxpbmVDYXJkQ2xpY2tlZH0gLz4sXG4gICAgICAgICk7XG4gICAgICAgIHJpZ2h0UGFuZWxQaGFzZUJ1dHRvbnMuc2V0KFJpZ2h0UGFuZWxQaGFzZXMuVGhyZWFkUGFuZWwsXG4gICAgICAgICAgICBTZXR0aW5nc1N0b3JlLmdldFZhbHVlKFwiZmVhdHVyZV90aHJlYWRcIilcbiAgICAgICAgICAgICAgICA/IDxIZWFkZXJCdXR0b25cbiAgICAgICAgICAgICAgICAgICAga2V5PXtSaWdodFBhbmVsUGhhc2VzLlRocmVhZFBhbmVsfVxuICAgICAgICAgICAgICAgICAgICBuYW1lPVwidGhyZWFkc0J1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlPXtfdChcIlRocmVhZHNcIil9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25UaHJlYWRzUGFuZWxDbGlja2VkfVxuICAgICAgICAgICAgICAgICAgICBpc0hpZ2hsaWdodGVkPXt0aGlzLmlzUGhhc2UoUm9vbUhlYWRlckJ1dHRvbnMuVEhSRUFEX1BIQVNFUyl9XG4gICAgICAgICAgICAgICAgICAgIGlzVW5yZWFkPXt0aGlzLnRocmVhZE5vdGlmaWNhdGlvblN0YXRlLmNvbG9yID4gMH1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIDxVbnJlYWRJbmRpY2F0b3IgY29sb3I9e3RoaXMudGhyZWFkTm90aWZpY2F0aW9uU3RhdGUuY29sb3J9IC8+XG4gICAgICAgICAgICAgICAgPC9IZWFkZXJCdXR0b24+XG4gICAgICAgICAgICAgICAgOiBudWxsLFxuICAgICAgICApO1xuICAgICAgICByaWdodFBhbmVsUGhhc2VCdXR0b25zLnNldChSaWdodFBhbmVsUGhhc2VzLk5vdGlmaWNhdGlvblBhbmVsLFxuICAgICAgICAgICAgPEhlYWRlckJ1dHRvblxuICAgICAgICAgICAgICAgIGtleT1cIm5vdGlmc0J1dHRvblwiXG4gICAgICAgICAgICAgICAgbmFtZT1cIm5vdGlmc0J1dHRvblwiXG4gICAgICAgICAgICAgICAgdGl0bGU9e190KCdOb3RpZmljYXRpb25zJyl9XG4gICAgICAgICAgICAgICAgaXNIaWdobGlnaHRlZD17dGhpcy5pc1BoYXNlKFJpZ2h0UGFuZWxQaGFzZXMuTm90aWZpY2F0aW9uUGFuZWwpfVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25Ob3RpZmljYXRpb25zQ2xpY2tlZH1cbiAgICAgICAgICAgIC8+LFxuICAgICAgICApO1xuICAgICAgICByaWdodFBhbmVsUGhhc2VCdXR0b25zLnNldChSaWdodFBhbmVsUGhhc2VzLlJvb21TdW1tYXJ5LFxuICAgICAgICAgICAgPEhlYWRlckJ1dHRvblxuICAgICAgICAgICAgICAgIGtleT1cInJvb21TdW1tYXJ5QnV0dG9uXCJcbiAgICAgICAgICAgICAgICBuYW1lPVwicm9vbVN1bW1hcnlCdXR0b25cIlxuICAgICAgICAgICAgICAgIHRpdGxlPXtfdCgnUm9vbSBJbmZvJyl9XG4gICAgICAgICAgICAgICAgaXNIaWdobGlnaHRlZD17dGhpcy5pc1BoYXNlKFJPT01fSU5GT19QSEFTRVMpfVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25Sb29tU3VtbWFyeUNsaWNrZWR9XG4gICAgICAgICAgICAvPixcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gPD5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBBcnJheS5mcm9tKHJpZ2h0UGFuZWxQaGFzZUJ1dHRvbnMua2V5cygpKS5tYXAoKHBoYXNlKSA9PlxuICAgICAgICAgICAgICAgICAgICAodGhpcy5wcm9wcy5leGNsdWRlZFJpZ2h0UGFuZWxQaGFzZUJ1dHRvbnMuaW5jbHVkZXMocGhhc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgIDogcmlnaHRQYW5lbFBoYXNlQnV0dG9ucy5nZXQocGhhc2UpKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgPC8+O1xuICAgIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFvQkE7O0FBQ0E7O0FBR0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7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