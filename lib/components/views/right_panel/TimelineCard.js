"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _room = require("matrix-js-sdk/src/models/room");

var _BaseCard = _interopRequireDefault(require("./BaseCard"));

var _MessageComposer = _interopRequireDefault(require("../rooms/MessageComposer"));

var _Layout = require("../../../settings/enums/Layout");

var _TimelinePanel = _interopRequireDefault(require("../../structures/TimelinePanel"));

var _EditorStateTransfer = _interopRequireDefault(require("../../../utils/EditorStateTransfer"));

var _RoomContext = _interopRequireDefault(require("../../../contexts/RoomContext"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _languageHandler = require("../../../languageHandler");

var _actions = require("../../../dispatcher/actions");

var _RoomViewStore = require("../../../stores/RoomViewStore");

var _ContentMessages = _interopRequireDefault(require("../../../ContentMessages"));

var _UploadBar = _interopRequireDefault(require("../../structures/UploadBar"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _JumpToBottomButton = _interopRequireDefault(require("../rooms/JumpToBottomButton"));

var _Measured = _interopRequireDefault(require("../elements/Measured"));

var _Heading = _interopRequireDefault(require("../typography/Heading"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

class TimelineCard extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "dispatcherRef", void 0);
    (0, _defineProperty2.default)(this, "layoutWatcherRef", void 0);
    (0, _defineProperty2.default)(this, "timelinePanel", /*#__PURE__*/_react.default.createRef());
    (0, _defineProperty2.default)(this, "card", /*#__PURE__*/_react.default.createRef());
    (0, _defineProperty2.default)(this, "roomStoreToken", void 0);
    (0, _defineProperty2.default)(this, "readReceiptsSettingWatcher", void 0);
    (0, _defineProperty2.default)(this, "onRoomViewStoreUpdate", async initial => {
      const newState = {
        // roomLoading: RoomViewStore.instance.isRoomLoading(),
        // roomLoadError: RoomViewStore.instance.getRoomLoadError(),
        initialEventId: _RoomViewStore.RoomViewStore.instance.getInitialEventId(),
        isInitialEventHighlighted: _RoomViewStore.RoomViewStore.instance.isInitialEventHighlighted(),
        replyToEvent: _RoomViewStore.RoomViewStore.instance.getQuotingEvent()
      };
      this.setState(newState);
    });
    (0, _defineProperty2.default)(this, "onAction", payload => {
      switch (payload.action) {
        case _actions.Action.EditEvent:
          this.setState({
            editState: payload.event ? new _EditorStateTransfer.default(payload.event) : null
          }, () => {
            if (payload.event) {
              this.timelinePanel.current?.scrollToEventIfNeeded(payload.event.getId());
            }
          });
          break;

        default:
          break;
      }
    });
    (0, _defineProperty2.default)(this, "onScroll", () => {
      const timelinePanel = this.timelinePanel.current;
      if (!timelinePanel) return;

      if (timelinePanel.isAtEndOfLiveTimeline()) {
        this.setState({
          atEndOfLiveTimeline: true
        });
      } else {
        this.setState({
          atEndOfLiveTimeline: false
        });
      }

      if (this.state.initialEventId && this.state.isInitialEventHighlighted) {
        _dispatcher.default.dispatch({
          action: _actions.Action.ViewRoom,
          room_id: this.props.room.roomId,
          event_id: this.state.initialEventId,
          highlighted: false,
          replyingToEvent: this.state.replyToEvent,
          metricsTrigger: undefined // room doesn't change

        });
      }
    });
    (0, _defineProperty2.default)(this, "onMeasurement", narrow => {
      this.setState({
        narrow
      });
    });
    (0, _defineProperty2.default)(this, "jumpToLiveTimeline", () => {
      if (this.state.initialEventId && this.state.isInitialEventHighlighted) {
        // If we were viewing a highlighted event, firing view_room without
        // an event will take care of both clearing the URL fragment and
        // jumping to the bottom
        _dispatcher.default.dispatch({
          action: _actions.Action.ViewRoom,
          room_id: this.props.room.roomId
        });
      } else {
        // Otherwise we have to jump manually
        this.timelinePanel.current?.jumpToLiveTimeline();

        _dispatcher.default.fire(_actions.Action.FocusSendMessageComposer);
      }
    });
    (0, _defineProperty2.default)(this, "renderTimelineCardHeader", () => {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_BaseCard_header_title"
      }, /*#__PURE__*/_react.default.createElement(_Heading.default, {
        size: "h4",
        className: "mx_BaseCard_header_title_heading"
      }, (0, _languageHandler._t)("Chat")));
    });
    this.state = {
      showReadReceipts: _SettingsStore.default.getValue("showReadReceipts", props.room.roomId),
      layout: _SettingsStore.default.getValue("layout"),
      atEndOfLiveTimeline: true,
      narrow: false
    };
    this.readReceiptsSettingWatcher = null;
  }

  componentDidMount() {
    var _this = this;

    this.roomStoreToken = _RoomViewStore.RoomViewStore.instance.addListener(this.onRoomViewStoreUpdate);
    this.dispatcherRef = _dispatcher.default.register(this.onAction);
    this.readReceiptsSettingWatcher = _SettingsStore.default.watchSetting("showReadReceipts", null, function () {
      for (var _len = arguments.length, _ref = new Array(_len), _key = 0; _key < _len; _key++) {
        _ref[_key] = arguments[_key];
      }

      let [,,, value] = _ref;
      return _this.setState({
        showReadReceipts: value
      });
    });
    this.layoutWatcherRef = _SettingsStore.default.watchSetting("layout", null, function () {
      for (var _len2 = arguments.length, _ref2 = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        _ref2[_key2] = arguments[_key2];
      }

      let [,,, value] = _ref2;
      return _this.setState({
        layout: value
      });
    });
  }

  componentWillUnmount() {
    // Remove RoomStore listener
    this.roomStoreToken?.remove();

    if (this.readReceiptsSettingWatcher) {
      _SettingsStore.default.unwatchSetting(this.readReceiptsSettingWatcher);
    }

    if (this.layoutWatcherRef) {
      _SettingsStore.default.unwatchSetting(this.layoutWatcherRef);
    }

    _dispatcher.default.unregister(this.dispatcherRef);
  }

  render() {
    const highlightedEventId = this.state.isInitialEventHighlighted ? this.state.initialEventId : null;
    let jumpToBottom;

    if (!this.state.atEndOfLiveTimeline) {
      jumpToBottom = /*#__PURE__*/_react.default.createElement(_JumpToBottomButton.default, {
        highlight: this.props.room.getUnreadNotificationCount(_room.NotificationCountType.Highlight) > 0,
        onScrollToBottomClick: this.jumpToLiveTimeline
      });
    }

    const isUploading = _ContentMessages.default.sharedInstance().getCurrentUploads(this.props.composerRelation).length > 0;
    const myMembership = this.props.room.getMyMembership();
    const showComposer = myMembership === "join";
    return /*#__PURE__*/_react.default.createElement(_RoomContext.default.Provider, {
      value: _objectSpread(_objectSpread({}, this.context), {}, {
        timelineRenderingType: this.props.timelineRenderingType ?? this.context.timelineRenderingType,
        liveTimeline: this.props.timelineSet.getLiveTimeline(),
        narrow: this.state.narrow
      })
    }, /*#__PURE__*/_react.default.createElement(_BaseCard.default, {
      className: this.props.classNames,
      onClose: this.props.onClose,
      withoutScrollContainer: true,
      header: this.renderTimelineCardHeader(),
      ref: this.card
    }, /*#__PURE__*/_react.default.createElement(_Measured.default, {
      sensor: this.card.current,
      onMeasurement: this.onMeasurement
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_TimelineCard_timeline"
    }, jumpToBottom, /*#__PURE__*/_react.default.createElement(_TimelinePanel.default, {
      ref: this.timelinePanel,
      showReadReceipts: this.state.showReadReceipts,
      manageReadReceipts: true,
      manageReadMarkers: false // No RM support in the TimelineCard
      ,
      sendReadReceiptOnLoad: true,
      timelineSet: this.props.timelineSet,
      showUrlPreview: this.context.showUrlPreview // The right panel timeline (and therefore threads) don't support IRC layout at this time
      ,
      layout: this.state.layout === _Layout.Layout.Bubble ? _Layout.Layout.Bubble : _Layout.Layout.Group,
      hideThreadedMessages: false,
      hidden: false,
      showReactions: true,
      className: "mx_RoomView_messagePanel",
      permalinkCreator: this.props.permalinkCreator,
      membersLoaded: true,
      editState: this.state.editState,
      eventId: this.state.initialEventId,
      resizeNotifier: this.props.resizeNotifier,
      highlightedEventId: highlightedEventId,
      onScroll: this.onScroll
    })), isUploading && /*#__PURE__*/_react.default.createElement(_UploadBar.default, {
      room: this.props.room,
      relation: this.props.composerRelation
    }), showComposer && /*#__PURE__*/_react.default.createElement(_MessageComposer.default, {
      room: this.props.room,
      relation: this.props.composerRelation,
      resizeNotifier: this.props.resizeNotifier,
      replyToEvent: this.state.replyToEvent,
      permalinkCreator: this.props.permalinkCreator,
      e2eStatus: this.props.e2eStatus,
      compact: true
    })));
  }

}

exports.default = TimelineCard;
(0, _defineProperty2.default)(TimelineCard, "contextType", _RoomContext.default);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,