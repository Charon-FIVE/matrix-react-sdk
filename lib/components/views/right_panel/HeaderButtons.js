"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.HeaderKind = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _RightPanelStore = _interopRequireDefault(require("../../../stores/right-panel/RightPanelStore"));

var _AsyncStore = require("../../../stores/AsyncStore");

var _NotificationColor = require("../../../stores/notifications/NotificationColor");

/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2017 Vector Creations Ltd
Copyright 2017 New Vector Ltd
Copyright 2018 New Vector Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
let HeaderKind;
exports.HeaderKind = HeaderKind;

(function (HeaderKind) {
  HeaderKind["Room"] = "room";
})(HeaderKind || (exports.HeaderKind = HeaderKind = {}));

class HeaderButtons extends _react.default.Component {
  constructor(props, kind) {
    super(props);
    (0, _defineProperty2.default)(this, "unmounted", false);
    (0, _defineProperty2.default)(this, "dispatcherRef", void 0);
    (0, _defineProperty2.default)(this, "onRightPanelStoreUpdate", () => {
      if (this.unmounted) return;
      this.setState({
        phase: _RightPanelStore.default.instance.currentCard.phase
      });
    });
    const rps = _RightPanelStore.default.instance;
    this.state = {
      headerKind: kind,
      phase: rps.currentCard.phase,
      threadNotificationColor: _NotificationColor.NotificationColor.None
    };
  }

  componentDidMount() {
    _RightPanelStore.default.instance.on(_AsyncStore.UPDATE_EVENT, this.onRightPanelStoreUpdate);

    this.dispatcherRef = _dispatcher.default.register(this.onAction.bind(this)); // used by subclasses
  }

  componentWillUnmount() {
    this.unmounted = true;

    _RightPanelStore.default.instance.off(_AsyncStore.UPDATE_EVENT, this.onRightPanelStoreUpdate);

    if (this.dispatcherRef) _dispatcher.default.unregister(this.dispatcherRef);
  }

  setPhase(phase, cardState) {
    const rps = _RightPanelStore.default.instance;

    if (rps.currentCard.phase == phase && !cardState && rps.isOpen) {
      rps.togglePanel(null);
    } else {
      _RightPanelStore.default.instance.setCard({
        phase,
        state: cardState
      });

      if (!rps.isOpen) rps.togglePanel(null);
    }
  }

  isPhase(phases) {
    if (!_RightPanelStore.default.instance.isOpen) return false;

    if (Array.isArray(phases)) {
      return phases.includes(this.state.phase);
    } else {
      return phases === this.state.phase;
    }
  }

  render() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_HeaderButtons",
      role: "tablist"
    }, this.renderButtons());
  }

}

exports.default = HeaderButtons;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,