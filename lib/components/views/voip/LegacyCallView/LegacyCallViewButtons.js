"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _AccessibleTooltipButton = _interopRequireDefault(require("../../elements/AccessibleTooltipButton"));

var _LegacyCallContextMenu = _interopRequireDefault(require("../../context_menus/LegacyCallContextMenu"));

var _DialpadContextMenu = _interopRequireDefault(require("../../context_menus/DialpadContextMenu"));

var _Tooltip = require("../../elements/Tooltip");

var _ContextMenu = require("../../../structures/ContextMenu");

var _languageHandler = require("../../../../languageHandler");

var _DeviceContextMenu = _interopRequireDefault(require("../../context_menus/DeviceContextMenu"));

var _MediaDeviceHandler = require("../../../../MediaDeviceHandler");

const _excluded = ["children", "state", "className", "onLabel", "offLabel"],
      _excluded2 = ["state", "deviceKinds"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// Height of the header duplicated from CSS because we need to subtract it from our max
// height to get the max height of the video
const CONTEXT_MENU_VPADDING = 8; // How far the context menu sits above the button (px)

const CONTROLS_HIDE_DELAY = 2000;

const LegacyCallViewToggleButton = _ref => {
  let {
    children,
    state: isOn,
    className,
    onLabel,
    offLabel
  } = _ref,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  const classes = (0, _classnames.default)("mx_LegacyCallViewButtons_button", className, {
    mx_LegacyCallViewButtons_button_on: isOn,
    mx_LegacyCallViewButtons_button_off: !isOn
  });
  return /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, (0, _extends2.default)({
    className: classes,
    title: isOn ? onLabel : offLabel,
    alignment: _Tooltip.Alignment.Top
  }, props), children);
};

const LegacyCallViewDropdownButton = _ref2 => {
  let {
    state,
    deviceKinds
  } = _ref2,
      props = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
  const [menuDisplayed, buttonRef, openMenu, closeMenu] = (0, _ContextMenu.useContextMenu)();
  const [hoveringDropdown, setHoveringDropdown] = (0, _react.useState)(false);
  const classes = (0, _classnames.default)("mx_LegacyCallViewButtons_button", "mx_LegacyCallViewButtons_dropdownButton", {
    mx_LegacyCallViewButtons_dropdownButton_collapsed: !menuDisplayed
  });

  const onClick = event => {
    event.stopPropagation();
    openMenu();
  };

  return /*#__PURE__*/_react.default.createElement(LegacyCallViewToggleButton, (0, _extends2.default)({
    inputRef: buttonRef,
    forceHide: menuDisplayed || hoveringDropdown,
    state: state
  }, props), /*#__PURE__*/_react.default.createElement(LegacyCallViewToggleButton, {
    className: classes,
    onClick: onClick,
    onHover: hovering => setHoveringDropdown(hovering),
    state: state
  }), menuDisplayed && /*#__PURE__*/_react.default.createElement(_DeviceContextMenu.default, (0, _extends2.default)({}, (0, _ContextMenu.alwaysAboveRightOf)(buttonRef.current?.getBoundingClientRect()), {
    onFinished: closeMenu,
    deviceKinds: deviceKinds
  })));
};

class LegacyCallViewButtons extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "dialpadButton", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "contextMenuButton", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "controlsHideTimer", null);
    (0, _defineProperty2.default)(this, "onControlsHideTimer", () => {
      if (this.state.hoveringControls || this.state.showDialpad || this.state.showMoreMenu) return;
      this.controlsHideTimer = null;
      this.setState({
        visible: false
      });
    });
    (0, _defineProperty2.default)(this, "onMouseEnter", () => {
      this.setState({
        hoveringControls: true
      });
    });
    (0, _defineProperty2.default)(this, "onMouseLeave", () => {
      this.setState({
        hoveringControls: false
      });
    });
    (0, _defineProperty2.default)(this, "onDialpadClick", () => {
      if (!this.state.showDialpad) {
        this.setState({
          showDialpad: true
        });
        this.showControls();
      } else {
        this.setState({
          showDialpad: false
        });
      }
    });
    (0, _defineProperty2.default)(this, "onMoreClick", () => {
      this.setState({
        showMoreMenu: true
      });
      this.showControls();
    });
    (0, _defineProperty2.default)(this, "closeDialpad", () => {
      this.setState({
        showDialpad: false
      });
    });
    (0, _defineProperty2.default)(this, "closeContextMenu", () => {
      this.setState({
        showMoreMenu: false
      });
    });
    this.state = {
      showDialpad: false,
      hoveringControls: false,
      showMoreMenu: false,
      visible: true
    };
  }

  componentDidMount() {
    this.showControls();
  }

  showControls() {
    if (this.state.showMoreMenu || this.state.showDialpad) return;

    if (!this.state.visible) {
      this.setState({
        visible: true
      });
    }

    if (this.controlsHideTimer !== null) {
      clearTimeout(this.controlsHideTimer);
    }

    this.controlsHideTimer = window.setTimeout(this.onControlsHideTimer, CONTROLS_HIDE_DELAY);
  }

  render() {
    const callControlsClasses = (0, _classnames.default)("mx_LegacyCallViewButtons", {
      mx_LegacyCallViewButtons_hidden: !this.state.visible
    });
    let dialPad;

    if (this.state.showDialpad) {
      dialPad = /*#__PURE__*/_react.default.createElement(_DialpadContextMenu.default, (0, _extends2.default)({}, (0, _ContextMenu.alwaysAboveLeftOf)(this.dialpadButton.current.getBoundingClientRect(), _ContextMenu.ChevronFace.None, CONTEXT_MENU_VPADDING), {
        // We mount the context menus as a as a child typically in order to include the
        // context menus when fullscreening the call content.
        // However, this does not work as well when the call is embedded in a
        // picture-in-picture frame. Thus, only mount as child when we are *not* in PiP.
        mountAsChild: !this.props.pipMode,
        onFinished: this.closeDialpad,
        call: this.props.call
      }));
    }

    let contextMenu;

    if (this.state.showMoreMenu) {
      contextMenu = /*#__PURE__*/_react.default.createElement(_LegacyCallContextMenu.default, (0, _extends2.default)({}, (0, _ContextMenu.alwaysAboveLeftOf)(this.contextMenuButton.current.getBoundingClientRect(), _ContextMenu.ChevronFace.None, CONTEXT_MENU_VPADDING), {
        mountAsChild: !this.props.pipMode,
        onFinished: this.closeContextMenu,
        call: this.props.call
      }));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: callControlsClasses,
      onMouseEnter: this.onMouseEnter,
      onMouseLeave: this.onMouseLeave
    }, dialPad, contextMenu, this.props.buttonsVisibility.dialpad && /*#__PURE__*/_react.default.createElement(_ContextMenu.ContextMenuTooltipButton, {
      className: "mx_LegacyCallViewButtons_button mx_LegacyCallViewButtons_dialpad",
      inputRef: this.dialpadButton,
      onClick: this.onDialpadClick,
      isExpanded: this.state.showDialpad,
      title: (0, _languageHandler._t)("Dialpad"),
      alignment: _Tooltip.Alignment.Top
    }), /*#__PURE__*/_react.default.createElement(LegacyCallViewDropdownButton, {
      state: !this.props.buttonsState.micMuted,
      className: "mx_LegacyCallViewButtons_button_mic",
      onLabel: (0, _languageHandler._t)("Mute the microphone"),
      offLabel: (0, _languageHandler._t)("Unmute the microphone"),
      onClick: this.props.handlers.onMicMuteClick,
      deviceKinds: [_MediaDeviceHandler.MediaDeviceKindEnum.AudioInput, _MediaDeviceHandler.MediaDeviceKindEnum.AudioOutput]
    }), this.props.buttonsVisibility.vidMute && /*#__PURE__*/_react.default.createElement(LegacyCallViewDropdownButton, {
      state: !this.props.buttonsState.vidMuted,
      className: "mx_LegacyCallViewButtons_button_vid",
      onLabel: (0, _languageHandler._t)("Stop the camera"),
      offLabel: (0, _languageHandler._t)("Start the camera"),
      onClick: this.props.handlers.onVidMuteClick,
      deviceKinds: [_MediaDeviceHandler.MediaDeviceKindEnum.VideoInput]
    }), this.props.buttonsVisibility.screensharing && /*#__PURE__*/_react.default.createElement(LegacyCallViewToggleButton, {
      state: this.props.buttonsState.screensharing,
      className: "mx_LegacyCallViewButtons_button_screensharing",
      onLabel: (0, _languageHandler._t)("Stop sharing your screen"),
      offLabel: (0, _languageHandler._t)("Start sharing your screen"),
      onClick: this.props.handlers.onScreenshareClick
    }), this.props.buttonsVisibility.sidebar && /*#__PURE__*/_react.default.createElement(LegacyCallViewToggleButton, {
      state: this.props.buttonsState.sidebarShown,
      className: "mx_LegacyCallViewButtons_button_sidebar",
      onLabel: (0, _languageHandler._t)("Hide sidebar"),
      offLabel: (0, _languageHandler._t)("Show sidebar"),
      onClick: this.props.handlers.onToggleSidebarClick
    }), this.props.buttonsVisibility.contextMenu && /*#__PURE__*/_react.default.createElement(_ContextMenu.ContextMenuTooltipButton, {
      className: "mx_LegacyCallViewButtons_button mx_LegacyCallViewButtons_button_more",
      onClick: this.onMoreClick,
      inputRef: this.contextMenuButton,
      isExpanded: this.state.showMoreMenu,
      title: (0, _languageHandler._t)("More"),
      alignment: _Tooltip.Alignment.Top
    }), /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
      className: "mx_LegacyCallViewButtons_button mx_LegacyCallViewButtons_button_hangup",
      onClick: this.props.handlers.onHangupClick,
      title: (0, _languageHandler._t)("Hangup"),
      alignment: _Tooltip.Alignment.Top
    }));
  }

}

exports.default = LegacyCallViewButtons;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,