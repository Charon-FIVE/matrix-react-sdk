"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CallLobby = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _logger = require("matrix-js-sdk/src/logger");

var _languageHandler = require("../../../languageHandler");

var _useAsyncMemo = require("../../../hooks/useAsyncMemo");

var _MediaDeviceHandler = _interopRequireWildcard(require("../../../MediaDeviceHandler"));

var _useCall = require("../../../hooks/useCall");

var _CallStore = require("../../../stores/CallStore");

var _IconizedContextMenu = _interopRequireWildcard(require("../context_menus/IconizedContextMenu"));

var _ContextMenu = require("../../structures/ContextMenu");

var _Tooltip = require("../elements/Tooltip");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _AccessibleTooltipButton = _interopRequireDefault(require("../elements/AccessibleTooltipButton"));

var _FacePile = _interopRequireDefault(require("../elements/FacePile"));

var _MemberAvatar = _interopRequireDefault(require("../avatars/MemberAvatar"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2022 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const DeviceButton = _ref => {
  let {
    kind,
    devices,
    setDevice,
    deviceListLabel,
    fallbackDeviceLabel,
    muted,
    disabled,
    toggle,
    unmutedTitle,
    mutedTitle
  } = _ref;
  const [menuDisplayed, buttonRef, openMenu, closeMenu] = (0, _ContextMenu.useContextMenu)();
  let contextMenu;

  if (menuDisplayed) {
    const selectDevice = device => {
      setDevice(device);
      closeMenu();
    };

    const buttonRect = buttonRef.current.getBoundingClientRect();
    contextMenu = /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.default, (0, _extends2.default)({}, (0, _ContextMenu.aboveLeftOf)(buttonRect), {
      onFinished: closeMenu
    }), /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOptionList, null, devices.map((d, index) => /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOption, {
      key: d.deviceId,
      label: d.label || fallbackDeviceLabel(index + 1),
      onClick: () => selectDevice(d)
    }))));
  }

  if (!devices.length) return null;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)("mx_CallLobby_deviceButtonWrapper", {
      "mx_CallLobby_deviceButtonWrapper_muted": muted
    })
  }, /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
    className: `mx_CallLobby_deviceButton mx_CallLobby_deviceButton_${kind}`,
    title: muted ? mutedTitle : unmutedTitle,
    alignment: _Tooltip.Alignment.Top,
    onClick: toggle,
    disabled: disabled
  }), devices.length > 1 ? /*#__PURE__*/_react.default.createElement(_ContextMenu.ContextMenuButton, {
    className: "mx_CallLobby_deviceListButton",
    inputRef: buttonRef,
    onClick: openMenu,
    isExpanded: menuDisplayed,
    label: deviceListLabel,
    disabled: disabled
  }) : null, contextMenu);
};

const MAX_FACES = 8;

const CallLobby = _ref2 => {
  let {
    room,
    call
  } = _ref2;
  const [connecting, setConnecting] = (0, _react.useState)(false);
  const me = (0, _react.useMemo)(() => room.getMember(room.myUserId), [room]);
  const participants = (0, _useCall.useParticipants)(call);
  const videoRef = (0, _react.useRef)(null);
  const [audioInputs, videoInputs] = (0, _useAsyncMemo.useAsyncMemo)(async () => {
    try {
      const devices = await _MediaDeviceHandler.default.getDevices();
      return [devices[_MediaDeviceHandler.MediaDeviceKindEnum.AudioInput], devices[_MediaDeviceHandler.MediaDeviceKindEnum.VideoInput]];
    } catch (e) {
      _logger.logger.warn(`Failed to get media device list`, e);

      return [[], []];
    }
  }, [], [[], []]);
  const [videoInputId, setVideoInputId] = (0, _react.useState)(() => _MediaDeviceHandler.default.getVideoInput());
  const setAudioInput = (0, _react.useCallback)(device => {
    _MediaDeviceHandler.default.instance.setAudioInput(device.deviceId);
  }, []);
  const setVideoInput = (0, _react.useCallback)(device => {
    _MediaDeviceHandler.default.instance.setVideoInput(device.deviceId);

    setVideoInputId(device.deviceId);
  }, []);
  const [audioMuted, setAudioMuted] = (0, _react.useState)(() => _MediaDeviceHandler.default.startWithAudioMuted);
  const [videoMuted, setVideoMuted] = (0, _react.useState)(() => _MediaDeviceHandler.default.startWithVideoMuted);
  const toggleAudio = (0, _react.useCallback)(() => {
    _MediaDeviceHandler.default.startWithAudioMuted = !audioMuted;
    setAudioMuted(!audioMuted);
  }, [audioMuted, setAudioMuted]);
  const toggleVideo = (0, _react.useCallback)(() => {
    _MediaDeviceHandler.default.startWithVideoMuted = !videoMuted;
    setVideoMuted(!videoMuted);
  }, [videoMuted, setVideoMuted]);
  const videoStream = (0, _useAsyncMemo.useAsyncMemo)(async () => {
    if (videoInputId && !videoMuted) {
      try {
        return await navigator.mediaDevices.getUserMedia({
          video: {
            deviceId: videoInputId
          }
        });
      } catch (e) {
        _logger.logger.error(`Failed to get stream for device ${videoInputId}`, e);
      }
    }

    return null;
  }, [videoInputId, videoMuted]);
  (0, _react.useEffect)(() => {
    if (videoStream) {
      const videoElement = videoRef.current;
      videoElement.srcObject = videoStream;
      videoElement.play();
      return () => {
        videoStream?.getTracks().forEach(track => track.stop());
        videoElement.srcObject = null;
      };
    }
  }, [videoStream]);
  const connect = (0, _react.useCallback)(async () => {
    setConnecting(true);

    try {
      // Disconnect from any other active calls first, since we don't yet support holding
      await Promise.all([..._CallStore.CallStore.instance.activeCalls].map(call => call.disconnect()));
      await call.connect();
    } catch (e) {
      _logger.logger.error(e);

      setConnecting(false);
    }
  }, [call, setConnecting]);
  let facePile = null;

  if (participants.size) {
    const shownMembers = [...participants].slice(0, MAX_FACES);
    const overflow = participants.size > shownMembers.length;
    facePile = /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_CallLobby_participants"
    }, (0, _languageHandler._t)("%(count)s people joined", {
      count: participants.size
    }), /*#__PURE__*/_react.default.createElement(_FacePile.default, {
      members: shownMembers,
      faceSize: 24,
      overflow: overflow
    }));
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_CallLobby"
  }, facePile, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_CallLobby_preview"
  }, /*#__PURE__*/_react.default.createElement(_MemberAvatar.default, {
    key: me.userId,
    member: me,
    width: 200,
    height: 200,
    resizeMethod: "scale"
  }), /*#__PURE__*/_react.default.createElement("video", {
    ref: videoRef,
    style: {
      visibility: videoMuted ? "hidden" : undefined
    },
    muted: true,
    playsInline: true,
    disablePictureInPicture: true
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_CallLobby_controls"
  }, /*#__PURE__*/_react.default.createElement(DeviceButton, {
    kind: "audio",
    devices: audioInputs,
    setDevice: setAudioInput,
    deviceListLabel: (0, _languageHandler._t)("Audio devices"),
    fallbackDeviceLabel: n => (0, _languageHandler._t)("Audio input %(n)s", {
      n
    }),
    muted: audioMuted,
    disabled: connecting,
    toggle: toggleAudio,
    unmutedTitle: (0, _languageHandler._t)("Mute microphone"),
    mutedTitle: (0, _languageHandler._t)("Unmute microphone")
  }), /*#__PURE__*/_react.default.createElement(DeviceButton, {
    kind: "video",
    devices: videoInputs,
    setDevice: setVideoInput,
    deviceListLabel: (0, _languageHandler._t)("Video devices"),
    fallbackDeviceLabel: n => (0, _languageHandler._t)("Video input %(n)s", {
      n
    }),
    muted: videoMuted,
    disabled: connecting,
    toggle: toggleVideo,
    unmutedTitle: (0, _languageHandler._t)("Turn off camera"),
    mutedTitle: (0, _languageHandler._t)("Turn on camera")
  }))), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    className: "mx_CallLobby_connectButton",
    kind: "primary",
    disabled: connecting,
    onClick: connect
  }, (0, _languageHandler._t)("Join")));
};

exports.CallLobby = CallLobby;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,