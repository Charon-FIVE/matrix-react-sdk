"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _UIStore = _interopRequireWildcard(require("../../../stores/UIStore"));

var _AnimationUtils = require("../../../utils/AnimationUtils");

var _MarkedExecution = require("../../../utils/MarkedExecution");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2021-2022 New Vector Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const PIP_VIEW_WIDTH = 336;
const PIP_VIEW_HEIGHT = 232;
const MOVING_AMT = 0.2;
const SNAPPING_AMT = 0.1;
const PADDING = {
  top: 58,
  bottom: 58,
  left: 76,
  right: 8
};

/**
 * PictureInPictureDragger shows a small version of CallView hovering over the UI in 'picture-in-picture'
 * (PiP mode). It displays the call(s) which is *not* in the room the user is currently viewing.
 */
class PictureInPictureDragger extends _react.default.Component {
  constructor() {
    var _this;

    super(...arguments);
    _this = this;
    (0, _defineProperty2.default)(this, "callViewWrapper", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "initX", 0);
    (0, _defineProperty2.default)(this, "initY", 0);
    (0, _defineProperty2.default)(this, "desiredTranslationX", _UIStore.default.instance.windowWidth - PADDING.right - PIP_VIEW_WIDTH);
    (0, _defineProperty2.default)(this, "desiredTranslationY", _UIStore.default.instance.windowHeight - PADDING.bottom - PIP_VIEW_HEIGHT);
    (0, _defineProperty2.default)(this, "translationX", this.desiredTranslationX);
    (0, _defineProperty2.default)(this, "translationY", this.desiredTranslationY);
    (0, _defineProperty2.default)(this, "moving", false);
    (0, _defineProperty2.default)(this, "scheduledUpdate", new _MarkedExecution.MarkedExecution(() => this.animationCallback(), () => requestAnimationFrame(() => this.scheduledUpdate.trigger())));
    (0, _defineProperty2.default)(this, "animationCallback", () => {
      if (!this.moving && Math.abs(this.translationX - this.desiredTranslationX) <= 1 && Math.abs(this.translationY - this.desiredTranslationY) <= 1) {
        // Break the loop by settling the element into its final position
        this.translationX = this.desiredTranslationX;
        this.translationY = this.desiredTranslationY;
        this.setStyle();
      } else {
        const amt = this.moving ? MOVING_AMT : SNAPPING_AMT;
        this.translationX = (0, _AnimationUtils.lerp)(this.translationX, this.desiredTranslationX, amt);
        this.translationY = (0, _AnimationUtils.lerp)(this.translationY, this.desiredTranslationY, amt);
        this.setStyle();
        this.scheduledUpdate.mark();
      }

      this.props.onMove?.();
    });
    (0, _defineProperty2.default)(this, "setStyle", () => {
      if (!this.callViewWrapper.current) return; // Set the element's style directly, bypassing React for efficiency

      this.callViewWrapper.current.style.transform = `translateX(${this.translationX}px) translateY(${this.translationY}px)`;
    });
    (0, _defineProperty2.default)(this, "onResize", () => {
      this.snap(false);
    });
    (0, _defineProperty2.default)(this, "snap", function () {
      let animate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      const translationX = _this.desiredTranslationX;
      const translationY = _this.desiredTranslationY; // We subtract the PiP size from the window size in order to calculate
      // the position to snap to from the PiP center and not its top-left
      // corner

      const windowWidth = _UIStore.default.instance.windowWidth - (_this.callViewWrapper.current?.clientWidth || PIP_VIEW_WIDTH);
      const windowHeight = _UIStore.default.instance.windowHeight - (_this.callViewWrapper.current?.clientHeight || PIP_VIEW_HEIGHT);

      if (translationX >= windowWidth / 2 && translationY >= windowHeight / 2) {
        _this.desiredTranslationX = windowWidth - PADDING.right;
        _this.desiredTranslationY = windowHeight - PADDING.bottom;
      } else if (translationX >= windowWidth / 2 && translationY <= windowHeight / 2) {
        _this.desiredTranslationX = windowWidth - PADDING.right;
        _this.desiredTranslationY = PADDING.top;
      } else if (translationX <= windowWidth / 2 && translationY >= windowHeight / 2) {
        _this.desiredTranslationX = PADDING.left;
        _this.desiredTranslationY = windowHeight - PADDING.bottom;
      } else {
        _this.desiredTranslationX = PADDING.left;
        _this.desiredTranslationY = PADDING.top;
      }

      if (!animate) {
        _this.translationX = _this.desiredTranslationX;
        _this.translationY = _this.desiredTranslationY;
      } // We start animating here because we want the PiP to move when we're
      // resizing the window


      _this.scheduledUpdate.mark();
    });
    (0, _defineProperty2.default)(this, "onStartMoving", event => {
      event.preventDefault();
      event.stopPropagation();
      this.moving = true;
      this.initX = event.pageX - this.desiredTranslationX;
      this.initY = event.pageY - this.desiredTranslationY;
      this.scheduledUpdate.mark();
    });
    (0, _defineProperty2.default)(this, "onMoving", event => {
      if (!this.moving) return;
      event.preventDefault();
      event.stopPropagation();
      this.setTranslation(event.pageX - this.initX, event.pageY - this.initY);
    });
    (0, _defineProperty2.default)(this, "onEndMoving", () => {
      this.moving = false;
      this.snap(true);
    });
  }

  componentDidMount() {
    document.addEventListener("mousemove", this.onMoving);
    document.addEventListener("mouseup", this.onEndMoving);

    _UIStore.default.instance.on(_UIStore.UI_EVENTS.Resize, this.onResize);
  }

  componentWillUnmount() {
    document.removeEventListener("mousemove", this.onMoving);
    document.removeEventListener("mouseup", this.onEndMoving);

    _UIStore.default.instance.off(_UIStore.UI_EVENTS.Resize, this.onResize);
  }

  setTranslation(inTranslationX, inTranslationY) {
    const width = this.callViewWrapper.current?.clientWidth || PIP_VIEW_WIDTH;
    const height = this.callViewWrapper.current?.clientHeight || PIP_VIEW_HEIGHT; // Avoid overflow on the x axis

    if (inTranslationX + width >= _UIStore.default.instance.windowWidth) {
      this.desiredTranslationX = _UIStore.default.instance.windowWidth - width;
    } else if (inTranslationX <= 0) {
      this.desiredTranslationX = 0;
    } else {
      this.desiredTranslationX = inTranslationX;
    } // Avoid overflow on the y axis


    if (inTranslationY + height >= _UIStore.default.instance.windowHeight) {
      this.desiredTranslationY = _UIStore.default.instance.windowHeight - height;
    } else if (inTranslationY <= 0) {
      this.desiredTranslationY = 0;
    } else {
      this.desiredTranslationY = inTranslationY;
    }
  }

  render() {
    const style = {
      transform: `translateX(${this.translationX}px) translateY(${this.translationY}px)`
    };
    return /*#__PURE__*/_react.default.createElement("div", {
      className: this.props.className,
      style: style,
      ref: this.callViewWrapper,
      onDoubleClick: this.props.onDoubleClick
    }, this.props.children({
      onStartMoving: this.onStartMoving,
      onResize: this.onResize
    }));
  }

}

exports.default = PictureInPictureDragger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,