"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _liveLocation = require("../../../../res/img/location/live-location.svg");

var _useLiveBeacons = require("../../../utils/beacon/useLiveBeacons");

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _BaseDialog = _interopRequireDefault(require("../dialogs/BaseDialog"));

var _Map = _interopRequireDefault(require("../location/Map"));

var _ZoomButtons = _interopRequireDefault(require("../location/ZoomButtons"));

var _BeaconMarker = _interopRequireDefault(require("./BeaconMarker"));

var _bounds = require("../../../utils/beacon/bounds");

var _beacon = require("../../../utils/beacon");

var _languageHandler = require("../../../languageHandler");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _DialogSidebar = _interopRequireDefault(require("./DialogSidebar"));

var _DialogOwnBeaconStatus = _interopRequireDefault(require("./DialogOwnBeaconStatus"));

var _BeaconStatusTooltip = _interopRequireDefault(require("./BeaconStatusTooltip"));

var _MapFallback = _interopRequireDefault(require("../location/MapFallback"));

var _MapError = require("../location/MapError");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2022 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const getBoundsCenter = bounds => {
  if (!bounds) {
    return;
  }

  return (0, _beacon.getGeoUri)({
    latitude: (bounds.north + bounds.south) / 2,
    longitude: (bounds.east + bounds.west) / 2,
    timestamp: Date.now()
  });
};

const useMapPosition = (liveBeacons, _ref) => {
  let {
    beacon,
    ts
  } = _ref;
  const [bounds, setBounds] = (0, _react.useState)((0, _bounds.getBeaconBounds)(liveBeacons));
  const [centerGeoUri, setCenterGeoUri] = (0, _react.useState)(beacon?.latestLocationState?.uri || getBoundsCenter(bounds));
  (0, _react.useEffect)(() => {
    if ( // this check ignores the first initial focused beacon state
    // as centering logic on map zooms to show everything
    // instead of focusing down
    ts !== 0 && // only set focus to a known location
    beacon?.latestLocationState?.uri) {
      // append custom `mxTs` parameter to geoUri
      // so map is triggered to refocus on this uri
      // event if it was previously the center geouri
      // but the map have moved/zoomed
      setCenterGeoUri(`${beacon?.latestLocationState?.uri};mxTs=${Date.now()}`);
      setBounds((0, _bounds.getBeaconBounds)([beacon]));
    }
  }, [beacon, ts]);
  return {
    bounds,
    centerGeoUri
  };
};
/**
 * Dialog to view live beacons maximised
 */


const BeaconViewDialog = _ref2 => {
  let {
    initialFocusedBeacon,
    roomId,
    matrixClient,
    onFinished
  } = _ref2;
  const liveBeacons = (0, _useLiveBeacons.useLiveBeacons)(roomId, matrixClient);
  const [focusedBeaconState, setFocusedBeaconState] = (0, _react.useState)({
    beacon: initialFocusedBeacon,
    ts: 0
  });
  const [isSidebarOpen, setSidebarOpen] = (0, _react.useState)(false);
  const {
    bounds,
    centerGeoUri
  } = useMapPosition(liveBeacons, focusedBeaconState);
  const [mapDisplayError, setMapDisplayError] = (0, _react.useState)(); // automatically open the sidebar if there is no map to see

  (0, _react.useEffect)(() => {
    if (mapDisplayError) {
      setSidebarOpen(true);
    }
  }, [mapDisplayError]);

  const onBeaconListItemClick = beacon => {
    setFocusedBeaconState({
      beacon,
      ts: Date.now()
    });
  };

  return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
    className: "mx_BeaconViewDialog",
    onFinished: onFinished,
    fixedWidth: false
  }, /*#__PURE__*/_react.default.createElement(_MatrixClientContext.default.Provider, {
    value: matrixClient
  }, centerGeoUri && !mapDisplayError && /*#__PURE__*/_react.default.createElement(_Map.default, {
    id: "mx_BeaconViewDialog",
    bounds: bounds,
    centerGeoUri: centerGeoUri,
    interactive: true,
    onError: setMapDisplayError,
    className: "mx_BeaconViewDialog_map"
  }, _ref3 => {
    let {
      map
    } = _ref3;
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, liveBeacons.map(beacon => /*#__PURE__*/_react.default.createElement(_BeaconMarker.default, {
      key: beacon.identifier,
      map: map,
      beacon: beacon,
      tooltip: /*#__PURE__*/_react.default.createElement(_BeaconStatusTooltip.default, {
        beacon: beacon
      })
    })), /*#__PURE__*/_react.default.createElement(_ZoomButtons.default, {
      map: map
    }));
  }), mapDisplayError && /*#__PURE__*/_react.default.createElement(_MapError.MapError, {
    error: mapDisplayError.message,
    isMinimised: true
  }), !centerGeoUri && !mapDisplayError && /*#__PURE__*/_react.default.createElement(_MapFallback.default, {
    "data-test-id": "beacon-view-dialog-map-fallback",
    className: "mx_BeaconViewDialog_map"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_BeaconViewDialog_mapFallbackMessage"
  }, (0, _languageHandler._t)('No live locations')), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    kind: "primary",
    onClick: onFinished,
    "data-test-id": "beacon-view-dialog-fallback-close"
  }, (0, _languageHandler._t)('Close'))), isSidebarOpen ? /*#__PURE__*/_react.default.createElement(_DialogSidebar.default, {
    beacons: liveBeacons,
    onBeaconClick: onBeaconListItemClick,
    requestClose: () => setSidebarOpen(false)
  }) : /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    kind: "primary",
    onClick: () => setSidebarOpen(true),
    "data-test-id": "beacon-view-dialog-open-sidebar",
    className: "mx_BeaconViewDialog_viewListButton"
  }, /*#__PURE__*/_react.default.createElement(_liveLocation.Icon, {
    height: 12
  }), "\xA0", (0, _languageHandler._t)('View list')), /*#__PURE__*/_react.default.createElement(_DialogOwnBeaconStatus.default, {
    roomId: roomId
  })));
};

var _default = BeaconViewDialog;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,