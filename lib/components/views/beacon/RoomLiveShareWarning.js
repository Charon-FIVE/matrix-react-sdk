"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _useEventEmitter = require("../../../hooks/useEventEmitter");

var _OwnBeaconStore = require("../../../stores/OwnBeaconStore");

var _beacon = require("../../../utils/beacon");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _Spinner = _interopRequireDefault(require("../elements/Spinner"));

var _StyledLiveBeaconIcon = _interopRequireDefault(require("./StyledLiveBeaconIcon"));

var _close = require("../../../../res/img/image-view/close.svg");

var _LiveTimeRemaining = _interopRequireDefault(require("./LiveTimeRemaining"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _actions = require("../../../dispatcher/actions");

/*
Copyright 2022 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const getLabel = (hasLocationPublishError, hasStopSharingError) => {
  if (hasLocationPublishError) {
    return (0, _languageHandler._t)('An error occurred whilst sharing your live location, please try again');
  }

  if (hasStopSharingError) {
    return (0, _languageHandler._t)('An error occurred while stopping your live location, please try again');
  }

  return (0, _languageHandler._t)('You are sharing your live location');
};

const RoomLiveShareWarningInner = _ref => {
  let {
    liveBeaconIds,
    roomId
  } = _ref;
  const {
    onStopSharing,
    onResetLocationPublishError,
    beacon,
    stoppingInProgress,
    hasStopSharingError,
    hasLocationPublishError
  } = (0, _beacon.useOwnLiveBeacons)(liveBeaconIds);

  if (!beacon) {
    return null;
  }

  const hasError = hasStopSharingError || hasLocationPublishError; // eat events from buttons so navigate to tile
  // is not triggered

  const stopPropagationWrapper = callback => e => {
    e?.stopPropagation();
    callback();
  };

  const onButtonClick = () => {
    if (hasLocationPublishError) {
      onResetLocationPublishError();
    } else {
      onStopSharing();
    }
  };

  const onClick = () => {
    _dispatcher.default.dispatch({
      action: _actions.Action.ViewRoom,
      room_id: beacon.roomId,
      metricsTrigger: undefined,
      event_id: beacon.beaconInfoId,
      scroll_into_view: true,
      highlighted: true
    });
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_RoomLiveShareWarning",
    onClick: onClick
  }, /*#__PURE__*/_react.default.createElement(_StyledLiveBeaconIcon.default, {
    className: "mx_RoomLiveShareWarning_icon",
    withError: hasError
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_RoomLiveShareWarning_label"
  }, getLabel(hasLocationPublishError, hasStopSharingError)), stoppingInProgress && /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_RoomLiveShareWarning_spinner"
  }, /*#__PURE__*/_react.default.createElement(_Spinner.default, {
    h: 16,
    w: 16
  })), !stoppingInProgress && !hasError && /*#__PURE__*/_react.default.createElement(_LiveTimeRemaining.default, {
    beacon: beacon
  }), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    className: "mx_RoomLiveShareWarning_stopButton",
    "data-test-id": "room-live-share-primary-button",
    onClick: stopPropagationWrapper(onButtonClick),
    kind: "danger",
    element: "button",
    disabled: stoppingInProgress
  }, hasError ? (0, _languageHandler._t)('Retry') : (0, _languageHandler._t)('Stop')), hasLocationPublishError && /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    "data-test-id": "room-live-share-wire-error-close-button",
    title: (0, _languageHandler._t)('Stop and close'),
    element: "button",
    className: "mx_RoomLiveShareWarning_closeButton",
    onClick: stopPropagationWrapper(onStopSharing)
  }, /*#__PURE__*/_react.default.createElement(_close.Icon, {
    className: "mx_RoomLiveShareWarning_closeButtonIcon"
  })));
};

const RoomLiveShareWarning = _ref2 => {
  let {
    roomId
  } = _ref2;
  // do we have an active geolocation.watchPosition
  const isMonitoringLiveLocation = (0, _useEventEmitter.useEventEmitterState)(_OwnBeaconStore.OwnBeaconStore.instance, _OwnBeaconStore.OwnBeaconStoreEvent.MonitoringLivePosition, () => _OwnBeaconStore.OwnBeaconStore.instance.isMonitoringLiveLocation);
  const liveBeaconIds = (0, _useEventEmitter.useEventEmitterState)(_OwnBeaconStore.OwnBeaconStore.instance, _OwnBeaconStore.OwnBeaconStoreEvent.LivenessChange, () => _OwnBeaconStore.OwnBeaconStore.instance.getLiveBeaconIds(roomId));

  if (!isMonitoringLiveLocation || !liveBeaconIds.length) {
    return null;
  } // split into outer/inner to avoid watching various parts of live beacon state
  // when there are none


  return /*#__PURE__*/_react.default.createElement(RoomLiveShareWarningInner, {
    liveBeaconIds: liveBeaconIds,
    roomId: roomId
  });
};

var _default = RoomLiveShareWarning;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,