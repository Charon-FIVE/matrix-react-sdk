"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _useEventEmitter = require("../../../hooks/useEventEmitter");

var _languageHandler = require("../../../languageHandler");

var _OwnBeaconStore = require("../../../stores/OwnBeaconStore");

var _liveLocation = require("../../../../res/img/location/live-location.svg");

var _actions = require("../../../dispatcher/actions");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2022 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * Choose the most relevant beacon
 */
const chooseBestBeacon = (liveBeaconIds, updateErrorBeaconIds, locationErrorBeaconIds) => {
  // both lists are ordered by creation timestamp in store
  // so select latest beacon
  const beaconId = updateErrorBeaconIds?.[0] ?? locationErrorBeaconIds?.[0] ?? liveBeaconIds?.[0];

  if (!beaconId) {
    return undefined;
  }

  const beacon = _OwnBeaconStore.OwnBeaconStore.instance.getBeaconById(beaconId);

  return beacon;
};

const getLabel = (hasStoppingErrors, hasLocationErrors) => {
  if (hasStoppingErrors) {
    return (0, _languageHandler._t)('An error occurred while stopping your live location');
  }

  if (hasLocationErrors) {
    return (0, _languageHandler._t)('An error occurred whilst sharing your live location');
  }

  return (0, _languageHandler._t)('You are sharing your live location');
};

const useLivenessMonitor = (liveBeaconIds, beacons) => {
  (0, _react.useEffect)(() => {
    // chromium sets the minimum timer interval to 1000ms
    // for inactive tabs
    // refresh beacon monitors when the tab becomes active again
    const onPageVisibilityChanged = () => {
      if (document.visibilityState === 'visible') {
        liveBeaconIds.forEach(identifier => beacons.get(identifier)?.monitorLiveness());
      }
    };

    if (liveBeaconIds.length) {
      document.addEventListener("visibilitychange", onPageVisibilityChanged);
    }

    return () => {
      document.removeEventListener("visibilitychange", onPageVisibilityChanged);
    };
  }, [liveBeaconIds, beacons]);
};

const LeftPanelLiveShareWarning = _ref => {
  let {
    isMinimized
  } = _ref;
  const isMonitoringLiveLocation = (0, _useEventEmitter.useEventEmitterState)(_OwnBeaconStore.OwnBeaconStore.instance, _OwnBeaconStore.OwnBeaconStoreEvent.MonitoringLivePosition, () => _OwnBeaconStore.OwnBeaconStore.instance.isMonitoringLiveLocation);
  const beaconIdsWithLocationPublishError = (0, _useEventEmitter.useEventEmitterState)(_OwnBeaconStore.OwnBeaconStore.instance, _OwnBeaconStore.OwnBeaconStoreEvent.LocationPublishError, () => _OwnBeaconStore.OwnBeaconStore.instance.getLiveBeaconIdsWithLocationPublishError());
  const beaconIdsWithStoppingError = (0, _useEventEmitter.useEventEmitterState)(_OwnBeaconStore.OwnBeaconStore.instance, _OwnBeaconStore.OwnBeaconStoreEvent.BeaconUpdateError, () => _OwnBeaconStore.OwnBeaconStore.instance.getLiveBeaconIds().filter(beaconId => _OwnBeaconStore.OwnBeaconStore.instance.beaconUpdateErrors.has(beaconId)));
  const liveBeaconIds = (0, _useEventEmitter.useEventEmitterState)(_OwnBeaconStore.OwnBeaconStore.instance, _OwnBeaconStore.OwnBeaconStoreEvent.LivenessChange, () => _OwnBeaconStore.OwnBeaconStore.instance.getLiveBeaconIds());
  const hasLocationPublishErrors = !!beaconIdsWithLocationPublishError.length;
  const hasStoppingErrors = !!beaconIdsWithStoppingError.length;
  useLivenessMonitor(liveBeaconIds, _OwnBeaconStore.OwnBeaconStore.instance.beacons);

  if (!isMonitoringLiveLocation) {
    return null;
  }

  const relevantBeacon = chooseBestBeacon(liveBeaconIds, beaconIdsWithStoppingError, beaconIdsWithLocationPublishError);
  const onWarningClick = relevantBeacon ? () => {
    _dispatcher.default.dispatch({
      action: _actions.Action.ViewRoom,
      room_id: relevantBeacon.roomId,
      metricsTrigger: undefined,
      event_id: relevantBeacon.beaconInfoId,
      scroll_into_view: true,
      highlighted: true
    });
  } : undefined;
  const label = getLabel(hasStoppingErrors, hasLocationPublishErrors);
  return /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    className: (0, _classnames.default)('mx_LeftPanelLiveShareWarning', {
      'mx_LeftPanelLiveShareWarning__minimized': isMinimized,
      'mx_LeftPanelLiveShareWarning__error': hasLocationPublishErrors || hasStoppingErrors
    }),
    title: isMinimized ? label : undefined,
    onClick: onWarningClick
  }, isMinimized ? /*#__PURE__*/_react.default.createElement(_liveLocation.Icon, {
    height: 10
  }) : label);
};

var _default = LeftPanelLiveShareWarning;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,