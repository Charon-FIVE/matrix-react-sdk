"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _StyledLiveBeaconIcon = _interopRequireDefault(require("./StyledLiveBeaconIcon"));

var _languageHandler = require("../../../languageHandler");

var _LiveTimeRemaining = _interopRequireDefault(require("./LiveTimeRemaining"));

var _displayStatus = require("./displayStatus");

var _beacon = require("../../../utils/beacon");

var _DateUtils = require("../../../DateUtils");

const _excluded = ["beacon", "displayStatus", "displayLiveTimeRemaining", "label", "className", "children", "withIcon"];

const BeaconExpiryTime = _ref => {
  let {
    beacon
  } = _ref;
  const expiryTime = (0, _DateUtils.formatTime)(new Date((0, _beacon.getBeaconExpiryTimestamp)(beacon)));
  return /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_BeaconStatus_expiryTime"
  }, (0, _languageHandler._t)('Live until %(expiryTime)s', {
    expiryTime
  }));
};

const BeaconStatus = _ref2 => {
  let {
    beacon,
    displayStatus,
    displayLiveTimeRemaining,
    label,
    className,
    children,
    withIcon
  } = _ref2,
      rest = (0, _objectWithoutProperties2.default)(_ref2, _excluded);
  const isIdle = displayStatus === _displayStatus.BeaconDisplayStatus.Loading || displayStatus === _displayStatus.BeaconDisplayStatus.Stopped;
  return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({}, rest, {
    className: (0, _classnames.default)('mx_BeaconStatus', `mx_BeaconStatus_${displayStatus}`, className)
  }), withIcon && /*#__PURE__*/_react.default.createElement(_StyledLiveBeaconIcon.default, {
    className: "mx_BeaconStatus_icon",
    withError: displayStatus === _displayStatus.BeaconDisplayStatus.Error,
    isIdle: isIdle
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_BeaconStatus_description"
  }, displayStatus === _displayStatus.BeaconDisplayStatus.Loading && /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_BeaconStatus_description_status"
  }, (0, _languageHandler._t)('Loading live location...')), displayStatus === _displayStatus.BeaconDisplayStatus.Stopped && /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_BeaconStatus_description_status"
  }, (0, _languageHandler._t)('Live location ended')), displayStatus === _displayStatus.BeaconDisplayStatus.Error && /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_BeaconStatus_description_status"
  }, (0, _languageHandler._t)('Live location error')), displayStatus === _displayStatus.BeaconDisplayStatus.Active && beacon && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_BeaconStatus_label"
  }, label), displayLiveTimeRemaining ? /*#__PURE__*/_react.default.createElement(_LiveTimeRemaining.default, {
    beacon: beacon
  }) : /*#__PURE__*/_react.default.createElement(BeaconExpiryTime, {
    beacon: beacon
  })))), children);
};

var _default = BeaconStatus;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCZWFjb25FeHBpcnlUaW1lIiwiYmVhY29uIiwiZXhwaXJ5VGltZSIsImZvcm1hdFRpbWUiLCJEYXRlIiwiZ2V0QmVhY29uRXhwaXJ5VGltZXN0YW1wIiwiX3QiLCJCZWFjb25TdGF0dXMiLCJkaXNwbGF5U3RhdHVzIiwiZGlzcGxheUxpdmVUaW1lUmVtYWluaW5nIiwibGFiZWwiLCJjbGFzc05hbWUiLCJjaGlsZHJlbiIsIndpdGhJY29uIiwicmVzdCIsImlzSWRsZSIsIkJlYWNvbkRpc3BsYXlTdGF0dXMiLCJMb2FkaW5nIiwiU3RvcHBlZCIsImNsYXNzTmFtZXMiLCJFcnJvciIsIkFjdGl2ZSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2JlYWNvbi9CZWFjb25TdGF0dXMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMiBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCwgeyBIVE1MUHJvcHMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IEJlYWNvbiB9IGZyb20gJ21hdHJpeC1qcy1zZGsvc3JjL21hdHJpeCc7XG5cbmltcG9ydCBTdHlsZWRMaXZlQmVhY29uSWNvbiBmcm9tICcuL1N0eWxlZExpdmVCZWFjb25JY29uJztcbmltcG9ydCB7IF90IH0gZnJvbSAnLi4vLi4vLi4vbGFuZ3VhZ2VIYW5kbGVyJztcbmltcG9ydCBMaXZlVGltZVJlbWFpbmluZyBmcm9tICcuL0xpdmVUaW1lUmVtYWluaW5nJztcbmltcG9ydCB7IEJlYWNvbkRpc3BsYXlTdGF0dXMgfSBmcm9tICcuL2Rpc3BsYXlTdGF0dXMnO1xuaW1wb3J0IHsgZ2V0QmVhY29uRXhwaXJ5VGltZXN0YW1wIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvYmVhY29uJztcbmltcG9ydCB7IGZvcm1hdFRpbWUgfSBmcm9tICcuLi8uLi8uLi9EYXRlVXRpbHMnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICAgIGRpc3BsYXlTdGF0dXM6IEJlYWNvbkRpc3BsYXlTdGF0dXM7XG4gICAgZGlzcGxheUxpdmVUaW1lUmVtYWluaW5nPzogYm9vbGVhbjtcbiAgICB3aXRoSWNvbj86IGJvb2xlYW47XG4gICAgYmVhY29uPzogQmVhY29uO1xuICAgIGxhYmVsPzogc3RyaW5nO1xufVxuXG5jb25zdCBCZWFjb25FeHBpcnlUaW1lOiBSZWFjdC5GQzx7IGJlYWNvbjogQmVhY29uIH0+ID0gKHsgYmVhY29uIH0pID0+IHtcbiAgICBjb25zdCBleHBpcnlUaW1lID0gZm9ybWF0VGltZShuZXcgRGF0ZShnZXRCZWFjb25FeHBpcnlUaW1lc3RhbXAoYmVhY29uKSkpO1xuICAgIHJldHVybiA8c3BhbiBjbGFzc05hbWU9J214X0JlYWNvblN0YXR1c19leHBpcnlUaW1lJz57IF90KCdMaXZlIHVudGlsICUoZXhwaXJ5VGltZSlzJywgeyBleHBpcnlUaW1lIH0pIH08L3NwYW4+O1xufTtcblxuY29uc3QgQmVhY29uU3RhdHVzOiBSZWFjdC5GQzxQcm9wcyAmIEhUTUxQcm9wczxIVE1MRGl2RWxlbWVudD4+ID1cbiAgICAoe1xuICAgICAgICBiZWFjb24sXG4gICAgICAgIGRpc3BsYXlTdGF0dXMsXG4gICAgICAgIGRpc3BsYXlMaXZlVGltZVJlbWFpbmluZyxcbiAgICAgICAgbGFiZWwsXG4gICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIHdpdGhJY29uLFxuICAgICAgICAuLi5yZXN0XG4gICAgfSkgPT4ge1xuICAgICAgICBjb25zdCBpc0lkbGUgPSBkaXNwbGF5U3RhdHVzID09PSBCZWFjb25EaXNwbGF5U3RhdHVzLkxvYWRpbmcgfHxcbiAgICAgICAgICAgIGRpc3BsYXlTdGF0dXMgPT09IEJlYWNvbkRpc3BsYXlTdGF0dXMuU3RvcHBlZDtcblxuICAgICAgICByZXR1cm4gPGRpdlxuICAgICAgICAgICAgey4uLnJlc3R9XG4gICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ214X0JlYWNvblN0YXR1cycsIGBteF9CZWFjb25TdGF0dXNfJHtkaXNwbGF5U3RhdHVzfWAsIGNsYXNzTmFtZSl9XG4gICAgICAgID5cbiAgICAgICAgICAgIHsgd2l0aEljb24gJiYgPFN0eWxlZExpdmVCZWFjb25JY29uXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPSdteF9CZWFjb25TdGF0dXNfaWNvbidcbiAgICAgICAgICAgICAgICB3aXRoRXJyb3I9e2Rpc3BsYXlTdGF0dXMgPT09IEJlYWNvbkRpc3BsYXlTdGF0dXMuRXJyb3J9XG4gICAgICAgICAgICAgICAgaXNJZGxlPXtpc0lkbGV9XG4gICAgICAgICAgICAvPiB9XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbXhfQmVhY29uU3RhdHVzX2Rlc2NyaXB0aW9uJz5cblxuICAgICAgICAgICAgICAgIHsgZGlzcGxheVN0YXR1cyA9PT0gQmVhY29uRGlzcGxheVN0YXR1cy5Mb2FkaW5nICYmXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm14X0JlYWNvblN0YXR1c19kZXNjcmlwdGlvbl9zdGF0dXNcIj57IF90KCdMb2FkaW5nIGxpdmUgbG9jYXRpb24uLi4nKSB9PC9zcGFuPlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB7IGRpc3BsYXlTdGF0dXMgPT09IEJlYWNvbkRpc3BsYXlTdGF0dXMuU3RvcHBlZCAmJlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJteF9CZWFjb25TdGF0dXNfZGVzY3JpcHRpb25fc3RhdHVzXCI+eyBfdCgnTGl2ZSBsb2NhdGlvbiBlbmRlZCcpIH08L3NwYW4+XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHsgZGlzcGxheVN0YXR1cyA9PT0gQmVhY29uRGlzcGxheVN0YXR1cy5FcnJvciAmJlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJteF9CZWFjb25TdGF0dXNfZGVzY3JpcHRpb25fc3RhdHVzXCI+eyBfdCgnTGl2ZSBsb2NhdGlvbiBlcnJvcicpIH08L3NwYW4+XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHsgZGlzcGxheVN0YXR1cyA9PT0gQmVhY29uRGlzcGxheVN0YXR1cy5BY3RpdmUgJiYgYmVhY29uICYmIDw+XG4gICAgICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J214X0JlYWNvblN0YXR1c19sYWJlbCc+eyBsYWJlbCB9PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgeyBkaXNwbGF5TGl2ZVRpbWVSZW1haW5pbmcgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMaXZlVGltZVJlbWFpbmluZyBiZWFjb249e2JlYWNvbn0gLz4gOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCZWFjb25FeHBpcnlUaW1lIGJlYWNvbj17YmVhY29ufSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIHsgY2hpbGRyZW4gfVxuICAgICAgICA8L2Rpdj47XG4gICAgfTtcblxuZXhwb3J0IGRlZmF1bHQgQmVhY29uU3RhdHVzO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBZ0JBOztBQUNBOztBQUdBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBVUEsTUFBTUEsZ0JBQThDLEdBQUcsUUFBZ0I7RUFBQSxJQUFmO0lBQUVDO0VBQUYsQ0FBZTtFQUNuRSxNQUFNQyxVQUFVLEdBQUcsSUFBQUMscUJBQUEsRUFBVyxJQUFJQyxJQUFKLENBQVMsSUFBQUMsZ0NBQUEsRUFBeUJKLE1BQXpCLENBQVQsQ0FBWCxDQUFuQjtFQUNBLG9CQUFPO0lBQU0sU0FBUyxFQUFDO0VBQWhCLEdBQStDLElBQUFLLG1CQUFBLEVBQUcsMkJBQUgsRUFBZ0M7SUFBRUo7RUFBRixDQUFoQyxDQUEvQyxDQUFQO0FBQ0gsQ0FIRDs7QUFLQSxNQUFNSyxZQUF5RCxHQUMzRCxTQVNNO0VBQUEsSUFUTDtJQUNHTixNQURIO0lBRUdPLGFBRkg7SUFHR0Msd0JBSEg7SUFJR0MsS0FKSDtJQUtHQyxTQUxIO0lBTUdDLFFBTkg7SUFPR0M7RUFQSCxDQVNLO0VBQUEsSUFEQ0MsSUFDRDtFQUNGLE1BQU1DLE1BQU0sR0FBR1AsYUFBYSxLQUFLUSxrQ0FBQSxDQUFvQkMsT0FBdEMsSUFDWFQsYUFBYSxLQUFLUSxrQ0FBQSxDQUFvQkUsT0FEMUM7RUFHQSxvQkFBTywrREFDQ0osSUFERDtJQUVILFNBQVMsRUFBRSxJQUFBSyxtQkFBQSxFQUFXLGlCQUFYLEVBQStCLG1CQUFrQlgsYUFBYyxFQUEvRCxFQUFrRUcsU0FBbEU7RUFGUixJQUlERSxRQUFRLGlCQUFJLDZCQUFDLDZCQUFEO0lBQ1YsU0FBUyxFQUFDLHNCQURBO0lBRVYsU0FBUyxFQUFFTCxhQUFhLEtBQUtRLGtDQUFBLENBQW9CSSxLQUZ2QztJQUdWLE1BQU0sRUFBRUw7RUFIRSxFQUpYLGVBU0g7SUFBSyxTQUFTLEVBQUM7RUFBZixHQUVNUCxhQUFhLEtBQUtRLGtDQUFBLENBQW9CQyxPQUF0QyxpQkFDRTtJQUFNLFNBQVMsRUFBQztFQUFoQixHQUF1RCxJQUFBWCxtQkFBQSxFQUFHLDBCQUFILENBQXZELENBSFIsRUFLTUUsYUFBYSxLQUFLUSxrQ0FBQSxDQUFvQkUsT0FBdEMsaUJBQ0U7SUFBTSxTQUFTLEVBQUM7RUFBaEIsR0FBdUQsSUFBQVosbUJBQUEsRUFBRyxxQkFBSCxDQUF2RCxDQU5SLEVBUU1FLGFBQWEsS0FBS1Esa0NBQUEsQ0FBb0JJLEtBQXRDLGlCQUNFO0lBQU0sU0FBUyxFQUFDO0VBQWhCLEdBQXVELElBQUFkLG1CQUFBLEVBQUcscUJBQUgsQ0FBdkQsQ0FUUixFQVdNRSxhQUFhLEtBQUtRLGtDQUFBLENBQW9CSyxNQUF0QyxJQUFnRHBCLE1BQWhELGlCQUEwRCx5RUFDeEQseUVBQ0k7SUFBTSxTQUFTLEVBQUM7RUFBaEIsR0FBMENTLEtBQTFDLENBREosRUFFTUQsd0JBQXdCLGdCQUN0Qiw2QkFBQywwQkFBRDtJQUFtQixNQUFNLEVBQUVSO0VBQTNCLEVBRHNCLGdCQUV0Qiw2QkFBQyxnQkFBRDtJQUFrQixNQUFNLEVBQUVBO0VBQTFCLEVBSlIsQ0FEd0QsQ0FYaEUsQ0FURyxFQStCRFcsUUEvQkMsQ0FBUDtBQWlDSCxDQS9DTDs7ZUFpRGVMLFkifQ==