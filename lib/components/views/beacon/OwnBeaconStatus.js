"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _beacon = require("../../../utils/beacon");

var _NativeEventUtils = require("../../../utils/NativeEventUtils");

var _BeaconStatus = _interopRequireDefault(require("./BeaconStatus"));

var _displayStatus = require("./displayStatus");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

const _excluded = ["beacon", "displayStatus"];

/**
 * Wraps BeaconStatus with more capabilities
 * for errors and actions available for users own live beacons
 */
const OwnBeaconStatus = _ref => {
  let {
    beacon,
    displayStatus
  } = _ref,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  const {
    hasLocationPublishError,
    hasStopSharingError,
    stoppingInProgress,
    onStopSharing,
    onResetLocationPublishError
  } = (0, _beacon.useOwnLiveBeacons)([beacon?.identifier]); // combine display status with errors that only occur for user's own beacons

  const ownDisplayStatus = hasLocationPublishError || hasStopSharingError ? _displayStatus.BeaconDisplayStatus.Error : displayStatus;
  return /*#__PURE__*/_react.default.createElement(_BeaconStatus.default, (0, _extends2.default)({
    beacon: beacon,
    displayStatus: ownDisplayStatus,
    label: (0, _languageHandler._t)('Live location enabled'),
    displayLiveTimeRemaining: true
  }, rest), ownDisplayStatus === _displayStatus.BeaconDisplayStatus.Active && /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    "data-test-id": "beacon-status-stop-beacon",
    kind: "link" // eat events here to avoid 1) the map and 2) reply or thread tiles
    // moving under the beacon status on stop/retry click
    ,
    onClick: (0, _NativeEventUtils.preventDefaultWrapper)(onStopSharing),
    className: "mx_OwnBeaconStatus_button mx_OwnBeaconStatus_destructiveButton",
    disabled: stoppingInProgress
  }, (0, _languageHandler._t)('Stop')), hasLocationPublishError && /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    "data-test-id": "beacon-status-reset-wire-error",
    kind: "link" // eat events here to avoid 1) the map and 2) reply or thread tiles
    // moving under the beacon status on stop/retry click
    ,
    onClick: (0, _NativeEventUtils.preventDefaultWrapper)(onResetLocationPublishError),
    className: "mx_OwnBeaconStatus_button mx_OwnBeaconStatus_destructiveButton"
  }, (0, _languageHandler._t)('Retry')), hasStopSharingError && /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    "data-test-id": "beacon-status-stop-beacon-retry",
    kind: "link" // eat events here to avoid 1) the map and 2) reply or thread tiles
    // moving under the beacon status on stop/retry click
    ,
    onClick: (0, _NativeEventUtils.preventDefaultWrapper)(onStopSharing),
    className: "mx_OwnBeaconStatus_button mx_OwnBeaconStatus_destructiveButton"
  }, (0, _languageHandler._t)('Retry')));
};

var _default = OwnBeaconStatus;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPd25CZWFjb25TdGF0dXMiLCJiZWFjb24iLCJkaXNwbGF5U3RhdHVzIiwicmVzdCIsImhhc0xvY2F0aW9uUHVibGlzaEVycm9yIiwiaGFzU3RvcFNoYXJpbmdFcnJvciIsInN0b3BwaW5nSW5Qcm9ncmVzcyIsIm9uU3RvcFNoYXJpbmciLCJvblJlc2V0TG9jYXRpb25QdWJsaXNoRXJyb3IiLCJ1c2VPd25MaXZlQmVhY29ucyIsImlkZW50aWZpZXIiLCJvd25EaXNwbGF5U3RhdHVzIiwiQmVhY29uRGlzcGxheVN0YXR1cyIsIkVycm9yIiwiX3QiLCJBY3RpdmUiLCJwcmV2ZW50RGVmYXVsdFdyYXBwZXIiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy92aWV3cy9iZWFjb24vT3duQmVhY29uU3RhdHVzLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMjIgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgeyBCZWFjb24gfSBmcm9tICdtYXRyaXgtanMtc2RrL3NyYy9tYXRyaXgnO1xuaW1wb3J0IFJlYWN0LCB7IEhUTUxQcm9wcyB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgX3QgfSBmcm9tICcuLi8uLi8uLi9sYW5ndWFnZUhhbmRsZXInO1xuaW1wb3J0IHsgdXNlT3duTGl2ZUJlYWNvbnMgfSBmcm9tICcuLi8uLi8uLi91dGlscy9iZWFjb24nO1xuaW1wb3J0IHsgcHJldmVudERlZmF1bHRXcmFwcGVyIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvTmF0aXZlRXZlbnRVdGlscyc7XG5pbXBvcnQgQmVhY29uU3RhdHVzIGZyb20gJy4vQmVhY29uU3RhdHVzJztcbmltcG9ydCB7IEJlYWNvbkRpc3BsYXlTdGF0dXMgfSBmcm9tICcuL2Rpc3BsYXlTdGF0dXMnO1xuaW1wb3J0IEFjY2Vzc2libGVCdXR0b24sIHsgQnV0dG9uRXZlbnQgfSBmcm9tICcuLi9lbGVtZW50cy9BY2Nlc3NpYmxlQnV0dG9uJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgICBkaXNwbGF5U3RhdHVzOiBCZWFjb25EaXNwbGF5U3RhdHVzO1xuICAgIGNsYXNzTmFtZT86IHN0cmluZztcbiAgICBiZWFjb24/OiBCZWFjb247XG4gICAgd2l0aEljb24/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIFdyYXBzIEJlYWNvblN0YXR1cyB3aXRoIG1vcmUgY2FwYWJpbGl0aWVzXG4gKiBmb3IgZXJyb3JzIGFuZCBhY3Rpb25zIGF2YWlsYWJsZSBmb3IgdXNlcnMgb3duIGxpdmUgYmVhY29uc1xuICovXG5jb25zdCBPd25CZWFjb25TdGF0dXM6IFJlYWN0LkZDPFByb3BzICYgSFRNTFByb3BzPEhUTUxEaXZFbGVtZW50Pj4gPSAoe1xuICAgIGJlYWNvbiwgZGlzcGxheVN0YXR1cywgLi4ucmVzdFxufSkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgICAgaGFzTG9jYXRpb25QdWJsaXNoRXJyb3IsXG4gICAgICAgIGhhc1N0b3BTaGFyaW5nRXJyb3IsXG4gICAgICAgIHN0b3BwaW5nSW5Qcm9ncmVzcyxcbiAgICAgICAgb25TdG9wU2hhcmluZyxcbiAgICAgICAgb25SZXNldExvY2F0aW9uUHVibGlzaEVycm9yLFxuICAgIH0gPSB1c2VPd25MaXZlQmVhY29ucyhbYmVhY29uPy5pZGVudGlmaWVyXSk7XG5cbiAgICAvLyBjb21iaW5lIGRpc3BsYXkgc3RhdHVzIHdpdGggZXJyb3JzIHRoYXQgb25seSBvY2N1ciBmb3IgdXNlcidzIG93biBiZWFjb25zXG4gICAgY29uc3Qgb3duRGlzcGxheVN0YXR1cyA9IGhhc0xvY2F0aW9uUHVibGlzaEVycm9yIHx8IGhhc1N0b3BTaGFyaW5nRXJyb3IgP1xuICAgICAgICBCZWFjb25EaXNwbGF5U3RhdHVzLkVycm9yIDpcbiAgICAgICAgZGlzcGxheVN0YXR1cztcblxuICAgIHJldHVybiA8QmVhY29uU3RhdHVzXG4gICAgICAgIGJlYWNvbj17YmVhY29ufVxuICAgICAgICBkaXNwbGF5U3RhdHVzPXtvd25EaXNwbGF5U3RhdHVzfVxuICAgICAgICBsYWJlbD17X3QoJ0xpdmUgbG9jYXRpb24gZW5hYmxlZCcpfVxuICAgICAgICBkaXNwbGF5TGl2ZVRpbWVSZW1haW5pbmdcbiAgICAgICAgey4uLnJlc3R9XG4gICAgPlxuICAgICAgICB7IG93bkRpc3BsYXlTdGF0dXMgPT09IEJlYWNvbkRpc3BsYXlTdGF0dXMuQWN0aXZlICYmIDxBY2Nlc3NpYmxlQnV0dG9uXG4gICAgICAgICAgICBkYXRhLXRlc3QtaWQ9J2JlYWNvbi1zdGF0dXMtc3RvcC1iZWFjb24nXG4gICAgICAgICAgICBraW5kPSdsaW5rJ1xuICAgICAgICAgICAgLy8gZWF0IGV2ZW50cyBoZXJlIHRvIGF2b2lkIDEpIHRoZSBtYXAgYW5kIDIpIHJlcGx5IG9yIHRocmVhZCB0aWxlc1xuICAgICAgICAgICAgLy8gbW92aW5nIHVuZGVyIHRoZSBiZWFjb24gc3RhdHVzIG9uIHN0b3AvcmV0cnkgY2xpY2tcbiAgICAgICAgICAgIG9uQ2xpY2s9e3ByZXZlbnREZWZhdWx0V3JhcHBlcjxCdXR0b25FdmVudD4ob25TdG9wU2hhcmluZyl9XG4gICAgICAgICAgICBjbGFzc05hbWU9J214X093bkJlYWNvblN0YXR1c19idXR0b24gbXhfT3duQmVhY29uU3RhdHVzX2Rlc3RydWN0aXZlQnV0dG9uJ1xuICAgICAgICAgICAgZGlzYWJsZWQ9e3N0b3BwaW5nSW5Qcm9ncmVzc31cbiAgICAgICAgPlxuICAgICAgICAgICAgeyBfdCgnU3RvcCcpIH1cbiAgICAgICAgPC9BY2Nlc3NpYmxlQnV0dG9uPlxuICAgICAgICB9XG4gICAgICAgIHsgaGFzTG9jYXRpb25QdWJsaXNoRXJyb3IgJiYgPEFjY2Vzc2libGVCdXR0b25cbiAgICAgICAgICAgIGRhdGEtdGVzdC1pZD0nYmVhY29uLXN0YXR1cy1yZXNldC13aXJlLWVycm9yJ1xuICAgICAgICAgICAga2luZD0nbGluaydcbiAgICAgICAgICAgIC8vIGVhdCBldmVudHMgaGVyZSB0byBhdm9pZCAxKSB0aGUgbWFwIGFuZCAyKSByZXBseSBvciB0aHJlYWQgdGlsZXNcbiAgICAgICAgICAgIC8vIG1vdmluZyB1bmRlciB0aGUgYmVhY29uIHN0YXR1cyBvbiBzdG9wL3JldHJ5IGNsaWNrXG4gICAgICAgICAgICBvbkNsaWNrPXtwcmV2ZW50RGVmYXVsdFdyYXBwZXIob25SZXNldExvY2F0aW9uUHVibGlzaEVycm9yKX1cbiAgICAgICAgICAgIGNsYXNzTmFtZT0nbXhfT3duQmVhY29uU3RhdHVzX2J1dHRvbiBteF9Pd25CZWFjb25TdGF0dXNfZGVzdHJ1Y3RpdmVCdXR0b24nXG4gICAgICAgID5cbiAgICAgICAgICAgIHsgX3QoJ1JldHJ5JykgfVxuICAgICAgICA8L0FjY2Vzc2libGVCdXR0b24+XG4gICAgICAgIH1cbiAgICAgICAgeyBoYXNTdG9wU2hhcmluZ0Vycm9yICYmIDxBY2Nlc3NpYmxlQnV0dG9uXG4gICAgICAgICAgICBkYXRhLXRlc3QtaWQ9J2JlYWNvbi1zdGF0dXMtc3RvcC1iZWFjb24tcmV0cnknXG4gICAgICAgICAgICBraW5kPSdsaW5rJ1xuICAgICAgICAgICAgLy8gZWF0IGV2ZW50cyBoZXJlIHRvIGF2b2lkIDEpIHRoZSBtYXAgYW5kIDIpIHJlcGx5IG9yIHRocmVhZCB0aWxlc1xuICAgICAgICAgICAgLy8gbW92aW5nIHVuZGVyIHRoZSBiZWFjb24gc3RhdHVzIG9uIHN0b3AvcmV0cnkgY2xpY2tcbiAgICAgICAgICAgIG9uQ2xpY2s9e3ByZXZlbnREZWZhdWx0V3JhcHBlcihvblN0b3BTaGFyaW5nKX1cbiAgICAgICAgICAgIGNsYXNzTmFtZT0nbXhfT3duQmVhY29uU3RhdHVzX2J1dHRvbiBteF9Pd25CZWFjb25TdGF0dXNfZGVzdHJ1Y3RpdmVCdXR0b24nXG4gICAgICAgID5cbiAgICAgICAgICAgIHsgX3QoJ1JldHJ5JykgfVxuICAgICAgICA8L0FjY2Vzc2libGVCdXR0b24+IH1cbiAgICA8L0JlYWNvblN0YXR1cz47XG59O1xuXG5leHBvcnQgZGVmYXVsdCBPd25CZWFjb25TdGF0dXM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFpQkE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1BLGVBQTRELEdBQUcsUUFFL0Q7RUFBQSxJQUZnRTtJQUNsRUMsTUFEa0U7SUFDMURDO0VBRDBELENBRWhFO0VBQUEsSUFEd0JDLElBQ3hCO0VBQ0YsTUFBTTtJQUNGQyx1QkFERTtJQUVGQyxtQkFGRTtJQUdGQyxrQkFIRTtJQUlGQyxhQUpFO0lBS0ZDO0VBTEUsSUFNRixJQUFBQyx5QkFBQSxFQUFrQixDQUFDUixNQUFNLEVBQUVTLFVBQVQsQ0FBbEIsQ0FOSixDQURFLENBU0Y7O0VBQ0EsTUFBTUMsZ0JBQWdCLEdBQUdQLHVCQUF1QixJQUFJQyxtQkFBM0IsR0FDckJPLGtDQUFBLENBQW9CQyxLQURDLEdBRXJCWCxhQUZKO0VBSUEsb0JBQU8sNkJBQUMscUJBQUQ7SUFDSCxNQUFNLEVBQUVELE1BREw7SUFFSCxhQUFhLEVBQUVVLGdCQUZaO0lBR0gsS0FBSyxFQUFFLElBQUFHLG1CQUFBLEVBQUcsdUJBQUgsQ0FISjtJQUlILHdCQUF3QjtFQUpyQixHQUtDWCxJQUxELEdBT0RRLGdCQUFnQixLQUFLQyxrQ0FBQSxDQUFvQkcsTUFBekMsaUJBQW1ELDZCQUFDLHlCQUFEO0lBQ2pELGdCQUFhLDJCQURvQztJQUVqRCxJQUFJLEVBQUMsTUFGNEMsQ0FHakQ7SUFDQTtJQUppRDtJQUtqRCxPQUFPLEVBQUUsSUFBQUMsdUNBQUEsRUFBbUNULGFBQW5DLENBTHdDO0lBTWpELFNBQVMsRUFBQyxnRUFOdUM7SUFPakQsUUFBUSxFQUFFRDtFQVB1QyxHQVMvQyxJQUFBUSxtQkFBQSxFQUFHLE1BQUgsQ0FUK0MsQ0FQbEQsRUFtQkRWLHVCQUF1QixpQkFBSSw2QkFBQyx5QkFBRDtJQUN6QixnQkFBYSxnQ0FEWTtJQUV6QixJQUFJLEVBQUMsTUFGb0IsQ0FHekI7SUFDQTtJQUp5QjtJQUt6QixPQUFPLEVBQUUsSUFBQVksdUNBQUEsRUFBc0JSLDJCQUF0QixDQUxnQjtJQU16QixTQUFTLEVBQUM7RUFOZSxHQVF2QixJQUFBTSxtQkFBQSxFQUFHLE9BQUgsQ0FSdUIsQ0FuQjFCLEVBOEJEVCxtQkFBbUIsaUJBQUksNkJBQUMseUJBQUQ7SUFDckIsZ0JBQWEsaUNBRFE7SUFFckIsSUFBSSxFQUFDLE1BRmdCLENBR3JCO0lBQ0E7SUFKcUI7SUFLckIsT0FBTyxFQUFFLElBQUFXLHVDQUFBLEVBQXNCVCxhQUF0QixDQUxZO0lBTXJCLFNBQVMsRUFBQztFQU5XLEdBUW5CLElBQUFPLG1CQUFBLEVBQUcsT0FBSCxDQVJtQixDQTlCdEIsQ0FBUDtBQXlDSCxDQXpERDs7ZUEyRGVkLGUifQ==