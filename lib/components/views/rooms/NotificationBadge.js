"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _FormattingUtils = require("../../../utils/FormattingUtils");

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _NotificationState = require("../../../stores/notifications/NotificationState");

var _Tooltip = _interopRequireDefault(require("../elements/Tooltip"));

var _languageHandler = require("../../../languageHandler");

var _NotificationColor = require("../../../stores/notifications/NotificationColor");

const _excluded = ["notification", "showUnsentTooltip", "forceCount", "roomId", "onClick"];

class NotificationBadge extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "countWatcherRef", void 0);
    (0, _defineProperty2.default)(this, "countPreferenceChanged", () => {
      this.setState({
        showCounts: _SettingsStore.default.getValue("Notifications.alwaysShowBadgeCounts", this.roomId)
      });
    });
    (0, _defineProperty2.default)(this, "onNotificationUpdate", () => {
      this.forceUpdate(); // notification state changed - update
    });
    (0, _defineProperty2.default)(this, "onMouseOver", e => {
      e.stopPropagation();
      this.setState({
        showTooltip: true
      });
    });
    (0, _defineProperty2.default)(this, "onMouseLeave", () => {
      this.setState({
        showTooltip: false
      });
    });
    this.props.notification.on(_NotificationState.NotificationStateEvents.Update, this.onNotificationUpdate);
    this.state = {
      showCounts: _SettingsStore.default.getValue("Notifications.alwaysShowBadgeCounts", this.roomId),
      showTooltip: false
    };
    this.countWatcherRef = _SettingsStore.default.watchSetting("Notifications.alwaysShowBadgeCounts", this.roomId, this.countPreferenceChanged);
  }

  get roomId() {
    // We should convert this to null for safety with the SettingsStore
    return this.props.roomId || null;
  }

  componentWillUnmount() {
    _SettingsStore.default.unwatchSetting(this.countWatcherRef);

    this.props.notification.off(_NotificationState.NotificationStateEvents.Update, this.onNotificationUpdate);
  }

  componentDidUpdate(prevProps) {
    if (prevProps.notification) {
      prevProps.notification.off(_NotificationState.NotificationStateEvents.Update, this.onNotificationUpdate);
    }

    this.props.notification.on(_NotificationState.NotificationStateEvents.Update, this.onNotificationUpdate);
  }

  render() {
    /* eslint @typescript-eslint/no-unused-vars: ["error", { "ignoreRestSiblings": true }] */
    const _this$props = this.props,
          {
      notification,
      showUnsentTooltip,
      forceCount,
      roomId,
      onClick
    } = _this$props,
          props = (0, _objectWithoutProperties2.default)(_this$props, _excluded); // Don't show a badge if we don't need to

    if (notification.isIdle) return null; // TODO: Update these booleans for FTUE Notifications: https://github.com/vector-im/element-web/issues/14261
    // As of writing, that is "if red, show count always" and "optionally show counts instead of dots".
    // See git diff for what that boolean state looks like.
    // XXX: We ignore this.state.showCounts (the setting which controls counts vs dots).

    const hasAnySymbol = notification.symbol || notification.count > 0;
    let isEmptyBadge = !hasAnySymbol || !notification.hasUnreadCount;

    if (forceCount) {
      isEmptyBadge = false;
      if (!notification.hasUnreadCount) return null; // Can't render a badge
    }

    let symbol = notification.symbol || (0, _FormattingUtils.formatCount)(notification.count);
    if (isEmptyBadge) symbol = "";
    const classes = (0, _classnames.default)({
      'mx_NotificationBadge': true,
      'mx_NotificationBadge_visible': isEmptyBadge ? true : notification.hasUnreadCount,
      'mx_NotificationBadge_highlighted': notification.hasMentions,
      'mx_NotificationBadge_dot': isEmptyBadge,
      'mx_NotificationBadge_2char': symbol.length > 0 && symbol.length < 3,
      'mx_NotificationBadge_3char': symbol.length > 2
    });

    if (onClick) {
      let label;
      let tooltip;

      if (showUnsentTooltip && this.state.showTooltip && notification.color === _NotificationColor.NotificationColor.Unsent) {
        label = (0, _languageHandler._t)("Message didn't send. Click for info.");
        tooltip = /*#__PURE__*/_react.default.createElement(_Tooltip.default, {
          className: "mx_RoleButton_tooltip",
          label: label
        });
      }

      return /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, (0, _extends2.default)({
        "aria-label": label
      }, props, {
        className: classes,
        onClick: onClick,
        onMouseOver: this.onMouseOver,
        onMouseLeave: this.onMouseLeave
      }), /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_NotificationBadge_count"
      }, symbol), tooltip);
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: classes
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_NotificationBadge_count"
    }, symbol));
  }

}

exports.default = NotificationBadge;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,