"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _roomState = require("matrix-js-sdk/src/models/room-state");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _languageHandler = require("../../../languageHandler");

var _RoomUpgradeDialog = _interopRequireDefault(require("../dialogs/RoomUpgradeDialog"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

/*
Copyright 2018-2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class RoomUpgradeWarningBar extends _react.default.PureComponent {
  constructor(props, context) {
    super(props, context);
    (0, _defineProperty2.default)(this, "context", void 0);
    (0, _defineProperty2.default)(this, "onStateEvents", event => {
      if (!this.props.room || event.getRoomId() !== this.props.room.roomId) {
        return;
      }

      if (event.getType() !== "m.room.tombstone") return;
      const tombstone = this.props.room.currentState.getStateEvents("m.room.tombstone", "");
      this.setState({
        upgraded: tombstone && tombstone.getContent().replacement_room
      });
    });
    (0, _defineProperty2.default)(this, "onUpgradeClick", () => {
      _Modal.default.createDialog(_RoomUpgradeDialog.default, {
        room: this.props.room
      });
    });

    const _tombstone = this.props.room.currentState.getStateEvents("m.room.tombstone", "");

    this.state = {
      upgraded: _tombstone?.getContent().replacement_room
    };
  }

  componentDidMount() {
    this.context.on(_roomState.RoomStateEvent.Events, this.onStateEvents);
  }

  componentWillUnmount() {
    this.context.removeListener(_roomState.RoomStateEvent.Events, this.onStateEvents);
  }

  render() {
    let doUpgradeWarnings = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomUpgradeWarningBar_body"
    }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Upgrading this room will shut down the current instance of the room and create " + "an upgraded room with the same name.")), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("<b>Warning</b>: Upgrading a room will <i>not automatically migrate room members " + "to the new version of the room.</i> We'll post a link to the new room in the old " + "version of the room - room members will have to click this link to join the new room.", {}, {
      "b": sub => /*#__PURE__*/_react.default.createElement("b", null, sub),
      "i": sub => /*#__PURE__*/_react.default.createElement("i", null, sub)
    }))), /*#__PURE__*/_react.default.createElement("p", {
      className: "mx_RoomUpgradeWarningBar_upgradelink"
    }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onUpgradeClick
    }, (0, _languageHandler._t)("Upgrade this room to the recommended room version"))));

    if (this.state.upgraded) {
      doUpgradeWarnings = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_RoomUpgradeWarningBar_body"
      }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("This room has already been upgraded.")));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomUpgradeWarningBar"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomUpgradeWarningBar_wrapped"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomUpgradeWarningBar_header"
    }, (0, _languageHandler._t)("This room is running room version <roomVersion />, which this homeserver has " + "marked as <i>unstable</i>.", {}, {
      "roomVersion": () => /*#__PURE__*/_react.default.createElement("code", null, this.props.room.getVersion()),
      "i": sub => /*#__PURE__*/_react.default.createElement("i", null, sub)
    })), doUpgradeWarnings, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomUpgradeWarningBar_small"
    }, (0, _languageHandler._t)("Only room administrators will see this warning"))));
  }

}

exports.default = RoomUpgradeWarningBar;
(0, _defineProperty2.default)(RoomUpgradeWarningBar, "contextType", _MatrixClientContext.default);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,