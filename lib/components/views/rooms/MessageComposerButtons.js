"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.UploadButtonContext = exports.OverflowMenuContext = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classnames = _interopRequireDefault(require("classnames"));

var _matrixEventsSdk = require("matrix-events-sdk");

var _react = _interopRequireWildcard(require("react"));

var _thread = require("matrix-js-sdk/src/models/thread");

var _languageHandler = require("../../../languageHandler");

var _AccessibleTooltipButton = _interopRequireDefault(require("../elements/AccessibleTooltipButton"));

var _CollapsibleButton = require("./CollapsibleButton");

var _ContextMenu = _interopRequireWildcard(require("../../structures/ContextMenu"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _EmojiPicker = _interopRequireDefault(require("../emojipicker/EmojiPicker"));

var _ErrorDialog = _interopRequireDefault(require("../dialogs/ErrorDialog"));

var _LocationButton = _interopRequireDefault(require("../location/LocationButton"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _PollCreateDialog = _interopRequireDefault(require("../elements/PollCreateDialog"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _ContentMessages = _interopRequireDefault(require("../../../ContentMessages"));

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _RoomContext = _interopRequireDefault(require("../../../contexts/RoomContext"));

var _useDispatcher = require("../../../hooks/useDispatcher");

var _BrowserWorkarounds = require("../../../utils/BrowserWorkarounds");

var _IconizedContextMenu = _interopRequireWildcard(require("../context_menus/IconizedContextMenu"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2022 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const OverflowMenuContext = /*#__PURE__*/(0, _react.createContext)(null);
exports.OverflowMenuContext = OverflowMenuContext;

const MessageComposerButtons = props => {
  const matrixClient = (0, _react.useContext)(_MatrixClientContext.default);
  const {
    room,
    roomId,
    narrow
  } = (0, _react.useContext)(_RoomContext.default);

  if (props.haveRecording) {
    return null;
  }

  let mainButtons;
  let moreButtons;

  if (narrow) {
    mainButtons = [emojiButton(props)];
    moreButtons = [uploadButton(), // props passed via UploadButtonContext
    showStickersButton(props), voiceRecordingButton(props, narrow), props.showPollsButton && pollButton(room, props.relation), showLocationButton(props, room, roomId, matrixClient)];
  } else {
    mainButtons = [emojiButton(props), uploadButton() // props passed via UploadButtonContext
    ];
    moreButtons = [showStickersButton(props), voiceRecordingButton(props, narrow), props.showPollsButton && pollButton(room, props.relation), showLocationButton(props, room, roomId, matrixClient)];
  }

  mainButtons = mainButtons.filter(x => x);
  moreButtons = moreButtons.filter(x => x);
  const moreOptionsClasses = (0, _classnames.default)({
    mx_MessageComposer_button: true,
    mx_MessageComposer_buttonMenu: true,
    mx_MessageComposer_closeButtonMenu: props.isMenuOpen
  });
  return /*#__PURE__*/_react.default.createElement(UploadButtonContextProvider, {
    roomId: roomId,
    relation: props.relation
  }, mainButtons, moreButtons.length > 0 && /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
    className: moreOptionsClasses,
    onClick: props.toggleButtonMenu,
    title: (0, _languageHandler._t)("More options")
  }), props.isMenuOpen && /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.default, (0, _extends2.default)({
    onFinished: props.toggleButtonMenu
  }, props.menuPosition, {
    wrapperClassName: "mx_MessageComposer_Menu",
    compact: true
  }), /*#__PURE__*/_react.default.createElement(OverflowMenuContext.Provider, {
    value: props.toggleButtonMenu
  }, /*#__PURE__*/_react.default.createElement(_IconizedContextMenu.IconizedContextMenuOptionList, null, moreButtons))));
};

function emojiButton(props) {
  return /*#__PURE__*/_react.default.createElement(EmojiButton, {
    key: "emoji_button",
    addEmoji: props.addEmoji,
    menuPosition: props.menuPosition
  });
}

const EmojiButton = _ref => {
  let {
    addEmoji,
    menuPosition
  } = _ref;
  const overflowMenuCloser = (0, _react.useContext)(OverflowMenuContext);
  const [menuDisplayed, button, openMenu, closeMenu] = (0, _ContextMenu.useContextMenu)();
  let contextMenu = null;

  if (menuDisplayed) {
    const position = menuPosition ?? (0, _ContextMenu.aboveLeftOf)(button.current.getBoundingClientRect());
    contextMenu = /*#__PURE__*/_react.default.createElement(_ContextMenu.default, (0, _extends2.default)({}, position, {
      onFinished: () => {
        closeMenu();
        overflowMenuCloser?.();
      },
      managed: false
    }), /*#__PURE__*/_react.default.createElement(_EmojiPicker.default, {
      onChoose: addEmoji,
      showQuickReactions: true
    }));
  }

  const className = (0, _classnames.default)("mx_MessageComposer_button", {
    "mx_MessageComposer_button_highlight": menuDisplayed
  }); // TODO: replace ContextMenuTooltipButton with a unified representation of
  // the header buttons and the right panel buttons

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_CollapsibleButton.CollapsibleButton, {
    className: className,
    iconClassName: "mx_MessageComposer_emoji",
    onClick: openMenu,
    title: (0, _languageHandler._t)("Emoji")
  }), contextMenu);
};

function uploadButton() {
  return /*#__PURE__*/_react.default.createElement(UploadButton, {
    key: "controls_upload"
  });
}

const UploadButtonContext = /*#__PURE__*/(0, _react.createContext)(null);
exports.UploadButtonContext = UploadButtonContext;

// We put the file input outside the UploadButton component so that it doesn't get killed when the context menu closes.
const UploadButtonContextProvider = _ref2 => {
  let {
    roomId,
    relation,
    children
  } = _ref2;
  const cli = (0, _react.useContext)(_MatrixClientContext.default);
  const roomContext = (0, _react.useContext)(_RoomContext.default);
  const uploadInput = (0, _react.useRef)();

  const onUploadClick = () => {
    if (cli.isGuest()) {
      _dispatcher.default.dispatch({
        action: 'require_registration'
      });

      return;
    }

    uploadInput.current?.click();
  };

  (0, _useDispatcher.useDispatcher)(_dispatcher.default, payload => {
    if (roomContext.timelineRenderingType === payload.context && payload.action === "upload_file") {
      onUploadClick();
    }
  });

  const onUploadFileInputChange = ev => {
    if (ev.target.files.length === 0) return; // Take a copy, so we can safely reset the value of the form control

    _ContentMessages.default.sharedInstance().sendContentListToRoom(Array.from(ev.target.files), roomId, relation, cli, roomContext.timelineRenderingType); // This is the onChange handler for a file form control, but we're
    // not keeping any state, so reset the value of the form control
    // to empty.
    // NB. we need to set 'value': the 'files' property is immutable.


    ev.target.value = '';
  };

  const uploadInputStyle = {
    display: 'none'
  };
  return /*#__PURE__*/_react.default.createElement(UploadButtonContext.Provider, {
    value: onUploadClick
  }, children, /*#__PURE__*/_react.default.createElement("input", {
    ref: uploadInput,
    type: "file",
    style: uploadInputStyle,
    multiple: true,
    onClick: _BrowserWorkarounds.chromeFileInputFix,
    onChange: onUploadFileInputChange
  }));
}; // Must be rendered within an UploadButtonContextProvider


const UploadButton = () => {
  const overflowMenuCloser = (0, _react.useContext)(OverflowMenuContext);
  const uploadButtonFn = (0, _react.useContext)(UploadButtonContext);

  const onClick = () => {
    uploadButtonFn?.();
    overflowMenuCloser?.(); // close overflow menu
  };

  return /*#__PURE__*/_react.default.createElement(_CollapsibleButton.CollapsibleButton, {
    className: "mx_MessageComposer_button",
    iconClassName: "mx_MessageComposer_upload",
    onClick: onClick,
    title: (0, _languageHandler._t)('Attachment')
  });
};

function showStickersButton(props) {
  return props.showStickersButton ? /*#__PURE__*/_react.default.createElement(_CollapsibleButton.CollapsibleButton, {
    id: "stickersButton",
    key: "controls_stickers",
    className: "mx_MessageComposer_button",
    iconClassName: "mx_MessageComposer_stickers",
    onClick: () => props.setStickerPickerOpen(!props.isStickerPickerOpen),
    title: props.isStickerPickerOpen ? (0, _languageHandler._t)("Hide stickers") : (0, _languageHandler._t)("Sticker")
  }) : null;
}

function voiceRecordingButton(props, narrow) {
  // XXX: recording UI does not work well in narrow mode, so hide for now
  return narrow ? null : /*#__PURE__*/_react.default.createElement(_CollapsibleButton.CollapsibleButton, {
    key: "voice_message_send",
    className: "mx_MessageComposer_button",
    iconClassName: "mx_MessageComposer_voiceMessage",
    onClick: props.onRecordStartEndClick,
    title: (0, _languageHandler._t)("Voice Message")
  });
}

function pollButton(room, relation) {
  return /*#__PURE__*/_react.default.createElement(PollButton, {
    key: "polls",
    room: room,
    relation: relation
  });
}

class PollButton extends _react.default.PureComponent {
  constructor() {
    super(...arguments);
    (0, _defineProperty2.default)(this, "context", void 0);
    (0, _defineProperty2.default)(this, "onCreateClick", () => {
      this.context?.(); // close overflow menu

      const canSend = this.props.room.currentState.maySendEvent(_matrixEventsSdk.M_POLL_START.name, _MatrixClientPeg.MatrixClientPeg.get().getUserId());

      if (!canSend) {
        _Modal.default.createDialog(_ErrorDialog.default, {
          title: (0, _languageHandler._t)("Permission Required"),
          description: (0, _languageHandler._t)("You do not have permission to start polls in this room.")
        });
      } else {
        const threadId = this.props.relation?.rel_type === _thread.THREAD_RELATION_TYPE.name ? this.props.relation.event_id : null;

        _Modal.default.createDialog(_PollCreateDialog.default, {
          room: this.props.room,
          threadId
        }, 'mx_CompoundDialog', false, // isPriorityModal
        true // isStaticModal
        );
      }
    });
  }

  render() {
    // do not allow sending polls within threads at this time
    if (this.props.relation?.rel_type === _thread.THREAD_RELATION_TYPE.name) return null;
    return /*#__PURE__*/_react.default.createElement(_CollapsibleButton.CollapsibleButton, {
      className: "mx_MessageComposer_button",
      iconClassName: "mx_MessageComposer_poll",
      onClick: this.onCreateClick,
      title: (0, _languageHandler._t)("Poll")
    });
  }

}

(0, _defineProperty2.default)(PollButton, "contextType", OverflowMenuContext);

function showLocationButton(props, room, roomId, matrixClient) {
  return props.showLocationButton ? /*#__PURE__*/_react.default.createElement(_LocationButton.default, {
    key: "location",
    roomId: roomId,
    relation: props.relation,
    sender: room.getMember(matrixClient.getUserId()),
    menuPosition: props.menuPosition
  }) : null;
}

var _default = MessageComposerButtons;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPdmVyZmxvd01lbnVDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsIk1lc3NhZ2VDb21wb3NlckJ1dHRvbnMiLCJwcm9wcyIsIm1hdHJpeENsaWVudCIsInVzZUNvbnRleHQiLCJNYXRyaXhDbGllbnRDb250ZXh0Iiwicm9vbSIsInJvb21JZCIsIm5hcnJvdyIsIlJvb21Db250ZXh0IiwiaGF2ZVJlY29yZGluZyIsIm1haW5CdXR0b25zIiwibW9yZUJ1dHRvbnMiLCJlbW9qaUJ1dHRvbiIsInVwbG9hZEJ1dHRvbiIsInNob3dTdGlja2Vyc0J1dHRvbiIsInZvaWNlUmVjb3JkaW5nQnV0dG9uIiwic2hvd1BvbGxzQnV0dG9uIiwicG9sbEJ1dHRvbiIsInJlbGF0aW9uIiwic2hvd0xvY2F0aW9uQnV0dG9uIiwiZmlsdGVyIiwieCIsIm1vcmVPcHRpb25zQ2xhc3NlcyIsImNsYXNzTmFtZXMiLCJteF9NZXNzYWdlQ29tcG9zZXJfYnV0dG9uIiwibXhfTWVzc2FnZUNvbXBvc2VyX2J1dHRvbk1lbnUiLCJteF9NZXNzYWdlQ29tcG9zZXJfY2xvc2VCdXR0b25NZW51IiwiaXNNZW51T3BlbiIsImxlbmd0aCIsInRvZ2dsZUJ1dHRvbk1lbnUiLCJfdCIsIm1lbnVQb3NpdGlvbiIsImFkZEVtb2ppIiwiRW1vamlCdXR0b24iLCJvdmVyZmxvd01lbnVDbG9zZXIiLCJtZW51RGlzcGxheWVkIiwiYnV0dG9uIiwib3Blbk1lbnUiLCJjbG9zZU1lbnUiLCJ1c2VDb250ZXh0TWVudSIsImNvbnRleHRNZW51IiwicG9zaXRpb24iLCJhYm92ZUxlZnRPZiIsImN1cnJlbnQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjbGFzc05hbWUiLCJVcGxvYWRCdXR0b25Db250ZXh0IiwiVXBsb2FkQnV0dG9uQ29udGV4dFByb3ZpZGVyIiwiY2hpbGRyZW4iLCJjbGkiLCJyb29tQ29udGV4dCIsInVwbG9hZElucHV0IiwidXNlUmVmIiwib25VcGxvYWRDbGljayIsImlzR3Vlc3QiLCJkaXMiLCJkaXNwYXRjaCIsImFjdGlvbiIsImNsaWNrIiwidXNlRGlzcGF0Y2hlciIsInBheWxvYWQiLCJ0aW1lbGluZVJlbmRlcmluZ1R5cGUiLCJjb250ZXh0Iiwib25VcGxvYWRGaWxlSW5wdXRDaGFuZ2UiLCJldiIsInRhcmdldCIsImZpbGVzIiwiQ29udGVudE1lc3NhZ2VzIiwic2hhcmVkSW5zdGFuY2UiLCJzZW5kQ29udGVudExpc3RUb1Jvb20iLCJBcnJheSIsImZyb20iLCJ2YWx1ZSIsInVwbG9hZElucHV0U3R5bGUiLCJkaXNwbGF5IiwiY2hyb21lRmlsZUlucHV0Rml4IiwiVXBsb2FkQnV0dG9uIiwidXBsb2FkQnV0dG9uRm4iLCJvbkNsaWNrIiwic2V0U3RpY2tlclBpY2tlck9wZW4iLCJpc1N0aWNrZXJQaWNrZXJPcGVuIiwib25SZWNvcmRTdGFydEVuZENsaWNrIiwiUG9sbEJ1dHRvbiIsIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsImNhblNlbmQiLCJjdXJyZW50U3RhdGUiLCJtYXlTZW5kRXZlbnQiLCJNX1BPTExfU1RBUlQiLCJuYW1lIiwiTWF0cml4Q2xpZW50UGVnIiwiZ2V0IiwiZ2V0VXNlcklkIiwiTW9kYWwiLCJjcmVhdGVEaWFsb2ciLCJFcnJvckRpYWxvZyIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJ0aHJlYWRJZCIsInJlbF90eXBlIiwiVEhSRUFEX1JFTEFUSU9OX1RZUEUiLCJldmVudF9pZCIsIlBvbGxDcmVhdGVEaWFsb2ciLCJyZW5kZXIiLCJvbkNyZWF0ZUNsaWNrIiwiZ2V0TWVtYmVyIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvdmlld3Mvcm9vbXMvTWVzc2FnZUNvbXBvc2VyQnV0dG9ucy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDIyIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyBJRXZlbnRSZWxhdGlvbiB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9tb2RlbHMvZXZlbnRcIjtcbmltcG9ydCB7IE1fUE9MTF9TVEFSVCB9IGZyb20gXCJtYXRyaXgtZXZlbnRzLXNka1wiO1xuaW1wb3J0IFJlYWN0LCB7IGNyZWF0ZUNvbnRleHQsIFJlYWN0RWxlbWVudCwgdXNlQ29udGV4dCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUm9vbSB9IGZyb20gJ21hdHJpeC1qcy1zZGsvc3JjL21vZGVscy9yb29tJztcbmltcG9ydCB7IE1hdHJpeENsaWVudCB9IGZyb20gJ21hdHJpeC1qcy1zZGsvc3JjL2NsaWVudCc7XG5pbXBvcnQgeyBUSFJFQURfUkVMQVRJT05fVFlQRSB9IGZyb20gJ21hdHJpeC1qcy1zZGsvc3JjL21vZGVscy90aHJlYWQnO1xuXG5pbXBvcnQgeyBfdCB9IGZyb20gJy4uLy4uLy4uL2xhbmd1YWdlSGFuZGxlcic7XG5pbXBvcnQgQWNjZXNzaWJsZVRvb2x0aXBCdXR0b24gZnJvbSBcIi4uL2VsZW1lbnRzL0FjY2Vzc2libGVUb29sdGlwQnV0dG9uXCI7XG5pbXBvcnQgeyBDb2xsYXBzaWJsZUJ1dHRvbiB9IGZyb20gJy4vQ29sbGFwc2libGVCdXR0b24nO1xuaW1wb3J0IENvbnRleHRNZW51LCB7IGFib3ZlTGVmdE9mLCBBYm92ZUxlZnRPZiwgdXNlQ29udGV4dE1lbnUgfSBmcm9tICcuLi8uLi9zdHJ1Y3R1cmVzL0NvbnRleHRNZW51JztcbmltcG9ydCBkaXMgZnJvbSAnLi4vLi4vLi4vZGlzcGF0Y2hlci9kaXNwYXRjaGVyJztcbmltcG9ydCBFbW9qaVBpY2tlciBmcm9tICcuLi9lbW9qaXBpY2tlci9FbW9qaVBpY2tlcic7XG5pbXBvcnQgRXJyb3JEaWFsb2cgZnJvbSBcIi4uL2RpYWxvZ3MvRXJyb3JEaWFsb2dcIjtcbmltcG9ydCBMb2NhdGlvbkJ1dHRvbiBmcm9tICcuLi9sb2NhdGlvbi9Mb2NhdGlvbkJ1dHRvbic7XG5pbXBvcnQgTW9kYWwgZnJvbSBcIi4uLy4uLy4uL01vZGFsXCI7XG5pbXBvcnQgUG9sbENyZWF0ZURpYWxvZyBmcm9tIFwiLi4vZWxlbWVudHMvUG9sbENyZWF0ZURpYWxvZ1wiO1xuaW1wb3J0IHsgTWF0cml4Q2xpZW50UGVnIH0gZnJvbSAnLi4vLi4vLi4vTWF0cml4Q2xpZW50UGVnJztcbmltcG9ydCBDb250ZW50TWVzc2FnZXMgZnJvbSAnLi4vLi4vLi4vQ29udGVudE1lc3NhZ2VzJztcbmltcG9ydCBNYXRyaXhDbGllbnRDb250ZXh0IGZyb20gJy4uLy4uLy4uL2NvbnRleHRzL01hdHJpeENsaWVudENvbnRleHQnO1xuaW1wb3J0IFJvb21Db250ZXh0IGZyb20gJy4uLy4uLy4uL2NvbnRleHRzL1Jvb21Db250ZXh0JztcbmltcG9ydCB7IHVzZURpc3BhdGNoZXIgfSBmcm9tIFwiLi4vLi4vLi4vaG9va3MvdXNlRGlzcGF0Y2hlclwiO1xuaW1wb3J0IHsgY2hyb21lRmlsZUlucHV0Rml4IH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL0Jyb3dzZXJXb3JrYXJvdW5kc1wiO1xuaW1wb3J0IEljb25pemVkQ29udGV4dE1lbnUsIHsgSWNvbml6ZWRDb250ZXh0TWVudU9wdGlvbkxpc3QgfSBmcm9tICcuLi9jb250ZXh0X21lbnVzL0ljb25pemVkQ29udGV4dE1lbnUnO1xuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgICBhZGRFbW9qaTogKGVtb2ppOiBzdHJpbmcpID0+IGJvb2xlYW47XG4gICAgaGF2ZVJlY29yZGluZzogYm9vbGVhbjtcbiAgICBpc01lbnVPcGVuOiBib29sZWFuO1xuICAgIGlzU3RpY2tlclBpY2tlck9wZW46IGJvb2xlYW47XG4gICAgbWVudVBvc2l0aW9uOiBBYm92ZUxlZnRPZjtcbiAgICBvblJlY29yZFN0YXJ0RW5kQ2xpY2s6ICgpID0+IHZvaWQ7XG4gICAgcmVsYXRpb24/OiBJRXZlbnRSZWxhdGlvbjtcbiAgICBzZXRTdGlja2VyUGlja2VyT3BlbjogKGlzU3RpY2tlclBpY2tlck9wZW46IGJvb2xlYW4pID0+IHZvaWQ7XG4gICAgc2hvd0xvY2F0aW9uQnV0dG9uOiBib29sZWFuO1xuICAgIHNob3dQb2xsc0J1dHRvbjogYm9vbGVhbjtcbiAgICBzaG93U3RpY2tlcnNCdXR0b246IGJvb2xlYW47XG4gICAgdG9nZ2xlQnV0dG9uTWVudTogKCkgPT4gdm9pZDtcbn1cblxudHlwZSBPdmVyZmxvd01lbnVDbG9zZXIgPSAoKSA9PiB2b2lkO1xuZXhwb3J0IGNvbnN0IE92ZXJmbG93TWVudUNvbnRleHQgPSBjcmVhdGVDb250ZXh0PE92ZXJmbG93TWVudUNsb3NlciB8IG51bGw+KG51bGwpO1xuXG5jb25zdCBNZXNzYWdlQ29tcG9zZXJCdXR0b25zOiBSZWFjdC5GQzxJUHJvcHM+ID0gKHByb3BzOiBJUHJvcHMpID0+IHtcbiAgICBjb25zdCBtYXRyaXhDbGllbnQ6IE1hdHJpeENsaWVudCA9IHVzZUNvbnRleHQoTWF0cml4Q2xpZW50Q29udGV4dCk7XG4gICAgY29uc3QgeyByb29tLCByb29tSWQsIG5hcnJvdyB9ID0gdXNlQ29udGV4dChSb29tQ29udGV4dCk7XG5cbiAgICBpZiAocHJvcHMuaGF2ZVJlY29yZGluZykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBsZXQgbWFpbkJ1dHRvbnM6IFJlYWN0RWxlbWVudFtdO1xuICAgIGxldCBtb3JlQnV0dG9uczogUmVhY3RFbGVtZW50W107XG4gICAgaWYgKG5hcnJvdykge1xuICAgICAgICBtYWluQnV0dG9ucyA9IFtcbiAgICAgICAgICAgIGVtb2ppQnV0dG9uKHByb3BzKSxcbiAgICAgICAgXTtcbiAgICAgICAgbW9yZUJ1dHRvbnMgPSBbXG4gICAgICAgICAgICB1cGxvYWRCdXR0b24oKSwgLy8gcHJvcHMgcGFzc2VkIHZpYSBVcGxvYWRCdXR0b25Db250ZXh0XG4gICAgICAgICAgICBzaG93U3RpY2tlcnNCdXR0b24ocHJvcHMpLFxuICAgICAgICAgICAgdm9pY2VSZWNvcmRpbmdCdXR0b24ocHJvcHMsIG5hcnJvdyksXG4gICAgICAgICAgICBwcm9wcy5zaG93UG9sbHNCdXR0b24gJiYgcG9sbEJ1dHRvbihyb29tLCBwcm9wcy5yZWxhdGlvbiksXG4gICAgICAgICAgICBzaG93TG9jYXRpb25CdXR0b24ocHJvcHMsIHJvb20sIHJvb21JZCwgbWF0cml4Q2xpZW50KSxcbiAgICAgICAgXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBtYWluQnV0dG9ucyA9IFtcbiAgICAgICAgICAgIGVtb2ppQnV0dG9uKHByb3BzKSxcbiAgICAgICAgICAgIHVwbG9hZEJ1dHRvbigpLCAvLyBwcm9wcyBwYXNzZWQgdmlhIFVwbG9hZEJ1dHRvbkNvbnRleHRcbiAgICAgICAgXTtcbiAgICAgICAgbW9yZUJ1dHRvbnMgPSBbXG4gICAgICAgICAgICBzaG93U3RpY2tlcnNCdXR0b24ocHJvcHMpLFxuICAgICAgICAgICAgdm9pY2VSZWNvcmRpbmdCdXR0b24ocHJvcHMsIG5hcnJvdyksXG4gICAgICAgICAgICBwcm9wcy5zaG93UG9sbHNCdXR0b24gJiYgcG9sbEJ1dHRvbihyb29tLCBwcm9wcy5yZWxhdGlvbiksXG4gICAgICAgICAgICBzaG93TG9jYXRpb25CdXR0b24ocHJvcHMsIHJvb20sIHJvb21JZCwgbWF0cml4Q2xpZW50KSxcbiAgICAgICAgXTtcbiAgICB9XG5cbiAgICBtYWluQnV0dG9ucyA9IG1haW5CdXR0b25zLmZpbHRlcigoeDogUmVhY3RFbGVtZW50KSA9PiB4KTtcbiAgICBtb3JlQnV0dG9ucyA9IG1vcmVCdXR0b25zLmZpbHRlcigoeDogUmVhY3RFbGVtZW50KSA9PiB4KTtcblxuICAgIGNvbnN0IG1vcmVPcHRpb25zQ2xhc3NlcyA9IGNsYXNzTmFtZXMoe1xuICAgICAgICBteF9NZXNzYWdlQ29tcG9zZXJfYnV0dG9uOiB0cnVlLFxuICAgICAgICBteF9NZXNzYWdlQ29tcG9zZXJfYnV0dG9uTWVudTogdHJ1ZSxcbiAgICAgICAgbXhfTWVzc2FnZUNvbXBvc2VyX2Nsb3NlQnV0dG9uTWVudTogcHJvcHMuaXNNZW51T3BlbixcbiAgICB9KTtcblxuICAgIHJldHVybiA8VXBsb2FkQnV0dG9uQ29udGV4dFByb3ZpZGVyIHJvb21JZD17cm9vbUlkfSByZWxhdGlvbj17cHJvcHMucmVsYXRpb259PlxuICAgICAgICB7IG1haW5CdXR0b25zIH1cbiAgICAgICAgeyBtb3JlQnV0dG9ucy5sZW5ndGggPiAwICYmIDxBY2Nlc3NpYmxlVG9vbHRpcEJ1dHRvblxuICAgICAgICAgICAgY2xhc3NOYW1lPXttb3JlT3B0aW9uc0NsYXNzZXN9XG4gICAgICAgICAgICBvbkNsaWNrPXtwcm9wcy50b2dnbGVCdXR0b25NZW51fVxuICAgICAgICAgICAgdGl0bGU9e190KFwiTW9yZSBvcHRpb25zXCIpfVxuICAgICAgICAvPiB9XG4gICAgICAgIHsgcHJvcHMuaXNNZW51T3BlbiAmJiAoXG4gICAgICAgICAgICA8SWNvbml6ZWRDb250ZXh0TWVudVxuICAgICAgICAgICAgICAgIG9uRmluaXNoZWQ9e3Byb3BzLnRvZ2dsZUJ1dHRvbk1lbnV9XG4gICAgICAgICAgICAgICAgey4uLnByb3BzLm1lbnVQb3NpdGlvbn1cbiAgICAgICAgICAgICAgICB3cmFwcGVyQ2xhc3NOYW1lPVwibXhfTWVzc2FnZUNvbXBvc2VyX01lbnVcIlxuICAgICAgICAgICAgICAgIGNvbXBhY3Q9e3RydWV9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPE92ZXJmbG93TWVudUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3Byb3BzLnRvZ2dsZUJ1dHRvbk1lbnV9PlxuICAgICAgICAgICAgICAgICAgICA8SWNvbml6ZWRDb250ZXh0TWVudU9wdGlvbkxpc3Q+XG4gICAgICAgICAgICAgICAgICAgICAgICB7IG1vcmVCdXR0b25zIH1cbiAgICAgICAgICAgICAgICAgICAgPC9JY29uaXplZENvbnRleHRNZW51T3B0aW9uTGlzdD5cbiAgICAgICAgICAgICAgICA8L092ZXJmbG93TWVudUNvbnRleHQuUHJvdmlkZXI+XG4gICAgICAgICAgICA8L0ljb25pemVkQ29udGV4dE1lbnU+XG4gICAgICAgICkgfVxuICAgIDwvVXBsb2FkQnV0dG9uQ29udGV4dFByb3ZpZGVyPjtcbn07XG5cbmZ1bmN0aW9uIGVtb2ppQnV0dG9uKHByb3BzOiBJUHJvcHMpOiBSZWFjdEVsZW1lbnQge1xuICAgIHJldHVybiA8RW1vamlCdXR0b25cbiAgICAgICAga2V5PVwiZW1vamlfYnV0dG9uXCJcbiAgICAgICAgYWRkRW1vamk9e3Byb3BzLmFkZEVtb2ppfVxuICAgICAgICBtZW51UG9zaXRpb249e3Byb3BzLm1lbnVQb3NpdGlvbn1cbiAgICAvPjtcbn1cblxuaW50ZXJmYWNlIElFbW9qaUJ1dHRvblByb3BzIHtcbiAgICBhZGRFbW9qaTogKHVuaWNvZGU6IHN0cmluZykgPT4gYm9vbGVhbjtcbiAgICBtZW51UG9zaXRpb246IEFib3ZlTGVmdE9mO1xufVxuXG5jb25zdCBFbW9qaUJ1dHRvbjogUmVhY3QuRkM8SUVtb2ppQnV0dG9uUHJvcHM+ID0gKHsgYWRkRW1vamksIG1lbnVQb3NpdGlvbiB9KSA9PiB7XG4gICAgY29uc3Qgb3ZlcmZsb3dNZW51Q2xvc2VyID0gdXNlQ29udGV4dChPdmVyZmxvd01lbnVDb250ZXh0KTtcbiAgICBjb25zdCBbbWVudURpc3BsYXllZCwgYnV0dG9uLCBvcGVuTWVudSwgY2xvc2VNZW51XSA9IHVzZUNvbnRleHRNZW51KCk7XG5cbiAgICBsZXQgY29udGV4dE1lbnU6IFJlYWN0LlJlYWN0RWxlbWVudCB8IG51bGwgPSBudWxsO1xuICAgIGlmIChtZW51RGlzcGxheWVkKSB7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gKFxuICAgICAgICAgICAgbWVudVBvc2l0aW9uID8/IGFib3ZlTGVmdE9mKGJ1dHRvbi5jdXJyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKVxuICAgICAgICApO1xuXG4gICAgICAgIGNvbnRleHRNZW51ID0gPENvbnRleHRNZW51XG4gICAgICAgICAgICB7Li4ucG9zaXRpb259XG4gICAgICAgICAgICBvbkZpbmlzaGVkPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgY2xvc2VNZW51KCk7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3dNZW51Q2xvc2VyPy4oKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBtYW5hZ2VkPXtmYWxzZX1cbiAgICAgICAgPlxuICAgICAgICAgICAgPEVtb2ppUGlja2VyIG9uQ2hvb3NlPXthZGRFbW9qaX0gc2hvd1F1aWNrUmVhY3Rpb25zPXt0cnVlfSAvPlxuICAgICAgICA8L0NvbnRleHRNZW51PjtcbiAgICB9XG5cbiAgICBjb25zdCBjbGFzc05hbWUgPSBjbGFzc05hbWVzKFxuICAgICAgICBcIm14X01lc3NhZ2VDb21wb3Nlcl9idXR0b25cIixcbiAgICAgICAge1xuICAgICAgICAgICAgXCJteF9NZXNzYWdlQ29tcG9zZXJfYnV0dG9uX2hpZ2hsaWdodFwiOiBtZW51RGlzcGxheWVkLFxuICAgICAgICB9LFxuICAgICk7XG5cbiAgICAvLyBUT0RPOiByZXBsYWNlIENvbnRleHRNZW51VG9vbHRpcEJ1dHRvbiB3aXRoIGEgdW5pZmllZCByZXByZXNlbnRhdGlvbiBvZlxuICAgIC8vIHRoZSBoZWFkZXIgYnV0dG9ucyBhbmQgdGhlIHJpZ2h0IHBhbmVsIGJ1dHRvbnNcbiAgICByZXR1cm4gPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICA8Q29sbGFwc2libGVCdXR0b25cbiAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgICAgICAgaWNvbkNsYXNzTmFtZT1cIm14X01lc3NhZ2VDb21wb3Nlcl9lbW9qaVwiXG4gICAgICAgICAgICBvbkNsaWNrPXtvcGVuTWVudX1cbiAgICAgICAgICAgIHRpdGxlPXtfdChcIkVtb2ppXCIpfVxuICAgICAgICAvPlxuXG4gICAgICAgIHsgY29udGV4dE1lbnUgfVxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+O1xufTtcblxuZnVuY3Rpb24gdXBsb2FkQnV0dG9uKCk6IFJlYWN0RWxlbWVudCB7XG4gICAgcmV0dXJuIDxVcGxvYWRCdXR0b24ga2V5PVwiY29udHJvbHNfdXBsb2FkXCIgLz47XG59XG5cbnR5cGUgVXBsb2FkQnV0dG9uRm4gPSAoKSA9PiB2b2lkO1xuZXhwb3J0IGNvbnN0IFVwbG9hZEJ1dHRvbkNvbnRleHQgPSBjcmVhdGVDb250ZXh0PFVwbG9hZEJ1dHRvbkZuIHwgbnVsbD4obnVsbCk7XG5cbmludGVyZmFjZSBJVXBsb2FkQnV0dG9uUHJvcHMge1xuICAgIHJvb21JZDogc3RyaW5nO1xuICAgIHJlbGF0aW9uPzogSUV2ZW50UmVsYXRpb24gfCBudWxsO1xufVxuXG4vLyBXZSBwdXQgdGhlIGZpbGUgaW5wdXQgb3V0c2lkZSB0aGUgVXBsb2FkQnV0dG9uIGNvbXBvbmVudCBzbyB0aGF0IGl0IGRvZXNuJ3QgZ2V0IGtpbGxlZCB3aGVuIHRoZSBjb250ZXh0IG1lbnUgY2xvc2VzLlxuY29uc3QgVXBsb2FkQnV0dG9uQ29udGV4dFByb3ZpZGVyOiBSZWFjdC5GQzxJVXBsb2FkQnV0dG9uUHJvcHM+ID0gKHsgcm9vbUlkLCByZWxhdGlvbiwgY2hpbGRyZW4gfSkgPT4ge1xuICAgIGNvbnN0IGNsaSA9IHVzZUNvbnRleHQoTWF0cml4Q2xpZW50Q29udGV4dCk7XG4gICAgY29uc3Qgcm9vbUNvbnRleHQgPSB1c2VDb250ZXh0KFJvb21Db250ZXh0KTtcbiAgICBjb25zdCB1cGxvYWRJbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PigpO1xuXG4gICAgY29uc3Qgb25VcGxvYWRDbGljayA9ICgpID0+IHtcbiAgICAgICAgaWYgKGNsaS5pc0d1ZXN0KCkpIHtcbiAgICAgICAgICAgIGRpcy5kaXNwYXRjaCh7IGFjdGlvbjogJ3JlcXVpcmVfcmVnaXN0cmF0aW9uJyB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB1cGxvYWRJbnB1dC5jdXJyZW50Py5jbGljaygpO1xuICAgIH07XG5cbiAgICB1c2VEaXNwYXRjaGVyKGRpcywgcGF5bG9hZCA9PiB7XG4gICAgICAgIGlmIChyb29tQ29udGV4dC50aW1lbGluZVJlbmRlcmluZ1R5cGUgPT09IHBheWxvYWQuY29udGV4dCAmJiBwYXlsb2FkLmFjdGlvbiA9PT0gXCJ1cGxvYWRfZmlsZVwiKSB7XG4gICAgICAgICAgICBvblVwbG9hZENsaWNrKCk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IG9uVXBsb2FkRmlsZUlucHV0Q2hhbmdlID0gKGV2OiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xuICAgICAgICBpZiAoZXYudGFyZ2V0LmZpbGVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgICAgIC8vIFRha2UgYSBjb3B5LCBzbyB3ZSBjYW4gc2FmZWx5IHJlc2V0IHRoZSB2YWx1ZSBvZiB0aGUgZm9ybSBjb250cm9sXG4gICAgICAgIENvbnRlbnRNZXNzYWdlcy5zaGFyZWRJbnN0YW5jZSgpLnNlbmRDb250ZW50TGlzdFRvUm9vbShcbiAgICAgICAgICAgIEFycmF5LmZyb20oZXYudGFyZ2V0LmZpbGVzKSxcbiAgICAgICAgICAgIHJvb21JZCxcbiAgICAgICAgICAgIHJlbGF0aW9uLFxuICAgICAgICAgICAgY2xpLFxuICAgICAgICAgICAgcm9vbUNvbnRleHQudGltZWxpbmVSZW5kZXJpbmdUeXBlLFxuICAgICAgICApO1xuXG4gICAgICAgIC8vIFRoaXMgaXMgdGhlIG9uQ2hhbmdlIGhhbmRsZXIgZm9yIGEgZmlsZSBmb3JtIGNvbnRyb2wsIGJ1dCB3ZSdyZVxuICAgICAgICAvLyBub3Qga2VlcGluZyBhbnkgc3RhdGUsIHNvIHJlc2V0IHRoZSB2YWx1ZSBvZiB0aGUgZm9ybSBjb250cm9sXG4gICAgICAgIC8vIHRvIGVtcHR5LlxuICAgICAgICAvLyBOQi4gd2UgbmVlZCB0byBzZXQgJ3ZhbHVlJzogdGhlICdmaWxlcycgcHJvcGVydHkgaXMgaW1tdXRhYmxlLlxuICAgICAgICBldi50YXJnZXQudmFsdWUgPSAnJztcbiAgICB9O1xuXG4gICAgY29uc3QgdXBsb2FkSW5wdXRTdHlsZSA9IHsgZGlzcGxheTogJ25vbmUnIH07XG4gICAgcmV0dXJuIDxVcGxvYWRCdXR0b25Db250ZXh0LlByb3ZpZGVyIHZhbHVlPXtvblVwbG9hZENsaWNrfT5cbiAgICAgICAgeyBjaGlsZHJlbiB9XG5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgICByZWY9e3VwbG9hZElucHV0fVxuICAgICAgICAgICAgdHlwZT1cImZpbGVcIlxuICAgICAgICAgICAgc3R5bGU9e3VwbG9hZElucHV0U3R5bGV9XG4gICAgICAgICAgICBtdWx0aXBsZVxuICAgICAgICAgICAgb25DbGljaz17Y2hyb21lRmlsZUlucHV0Rml4fVxuICAgICAgICAgICAgb25DaGFuZ2U9e29uVXBsb2FkRmlsZUlucHV0Q2hhbmdlfVxuICAgICAgICAvPlxuICAgIDwvVXBsb2FkQnV0dG9uQ29udGV4dC5Qcm92aWRlcj47XG59O1xuXG4vLyBNdXN0IGJlIHJlbmRlcmVkIHdpdGhpbiBhbiBVcGxvYWRCdXR0b25Db250ZXh0UHJvdmlkZXJcbmNvbnN0IFVwbG9hZEJ1dHRvbiA9ICgpID0+IHtcbiAgICBjb25zdCBvdmVyZmxvd01lbnVDbG9zZXIgPSB1c2VDb250ZXh0KE92ZXJmbG93TWVudUNvbnRleHQpO1xuICAgIGNvbnN0IHVwbG9hZEJ1dHRvbkZuID0gdXNlQ29udGV4dChVcGxvYWRCdXR0b25Db250ZXh0KTtcblxuICAgIGNvbnN0IG9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgICAgIHVwbG9hZEJ1dHRvbkZuPy4oKTtcbiAgICAgICAgb3ZlcmZsb3dNZW51Q2xvc2VyPy4oKTsgLy8gY2xvc2Ugb3ZlcmZsb3cgbWVudVxuICAgIH07XG5cbiAgICByZXR1cm4gPENvbGxhcHNpYmxlQnV0dG9uXG4gICAgICAgIGNsYXNzTmFtZT1cIm14X01lc3NhZ2VDb21wb3Nlcl9idXR0b25cIlxuICAgICAgICBpY29uQ2xhc3NOYW1lPVwibXhfTWVzc2FnZUNvbXBvc2VyX3VwbG9hZFwiXG4gICAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICAgIHRpdGxlPXtfdCgnQXR0YWNobWVudCcpfVxuICAgIC8+O1xufTtcblxuZnVuY3Rpb24gc2hvd1N0aWNrZXJzQnV0dG9uKHByb3BzOiBJUHJvcHMpOiBSZWFjdEVsZW1lbnQge1xuICAgIHJldHVybiAoXG4gICAgICAgIHByb3BzLnNob3dTdGlja2Vyc0J1dHRvblxuICAgICAgICAgICAgPyA8Q29sbGFwc2libGVCdXR0b25cbiAgICAgICAgICAgICAgICBpZD0nc3RpY2tlcnNCdXR0b24nXG4gICAgICAgICAgICAgICAga2V5PVwiY29udHJvbHNfc3RpY2tlcnNcIlxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm14X01lc3NhZ2VDb21wb3Nlcl9idXR0b25cIlxuICAgICAgICAgICAgICAgIGljb25DbGFzc05hbWU9XCJteF9NZXNzYWdlQ29tcG9zZXJfc3RpY2tlcnNcIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHByb3BzLnNldFN0aWNrZXJQaWNrZXJPcGVuKCFwcm9wcy5pc1N0aWNrZXJQaWNrZXJPcGVuKX1cbiAgICAgICAgICAgICAgICB0aXRsZT17cHJvcHMuaXNTdGlja2VyUGlja2VyT3BlbiA/IF90KFwiSGlkZSBzdGlja2Vyc1wiKSA6IF90KFwiU3RpY2tlclwiKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA6IG51bGxcbiAgICApO1xufVxuXG5mdW5jdGlvbiB2b2ljZVJlY29yZGluZ0J1dHRvbihwcm9wczogSVByb3BzLCBuYXJyb3c6IGJvb2xlYW4pOiBSZWFjdEVsZW1lbnQge1xuICAgIC8vIFhYWDogcmVjb3JkaW5nIFVJIGRvZXMgbm90IHdvcmsgd2VsbCBpbiBuYXJyb3cgbW9kZSwgc28gaGlkZSBmb3Igbm93XG4gICAgcmV0dXJuIChcbiAgICAgICAgbmFycm93XG4gICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgIDogPENvbGxhcHNpYmxlQnV0dG9uXG4gICAgICAgICAgICAgICAga2V5PVwidm9pY2VfbWVzc2FnZV9zZW5kXCJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJteF9NZXNzYWdlQ29tcG9zZXJfYnV0dG9uXCJcbiAgICAgICAgICAgICAgICBpY29uQ2xhc3NOYW1lPVwibXhfTWVzc2FnZUNvbXBvc2VyX3ZvaWNlTWVzc2FnZVwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17cHJvcHMub25SZWNvcmRTdGFydEVuZENsaWNrfVxuICAgICAgICAgICAgICAgIHRpdGxlPXtfdChcIlZvaWNlIE1lc3NhZ2VcIil9XG4gICAgICAgICAgICAvPlxuICAgICk7XG59XG5cbmZ1bmN0aW9uIHBvbGxCdXR0b24ocm9vbTogUm9vbSwgcmVsYXRpb24/OiBJRXZlbnRSZWxhdGlvbik6IFJlYWN0RWxlbWVudCB7XG4gICAgcmV0dXJuIDxQb2xsQnV0dG9uIGtleT1cInBvbGxzXCIgcm9vbT17cm9vbX0gcmVsYXRpb249e3JlbGF0aW9ufSAvPjtcbn1cblxuaW50ZXJmYWNlIElQb2xsQnV0dG9uUHJvcHMge1xuICAgIHJvb206IFJvb207XG4gICAgcmVsYXRpb24/OiBJRXZlbnRSZWxhdGlvbjtcbn1cblxuY2xhc3MgUG9sbEJ1dHRvbiBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8SVBvbGxCdXR0b25Qcm9wcz4ge1xuICAgIHB1YmxpYyBzdGF0aWMgY29udGV4dFR5cGUgPSBPdmVyZmxvd01lbnVDb250ZXh0O1xuICAgIHB1YmxpYyBjb250ZXh0ITogUmVhY3QuQ29udGV4dFR5cGU8dHlwZW9mIE92ZXJmbG93TWVudUNvbnRleHQ+O1xuXG4gICAgcHJpdmF0ZSBvbkNyZWF0ZUNsaWNrID0gKCkgPT4ge1xuICAgICAgICB0aGlzLmNvbnRleHQ/LigpOyAvLyBjbG9zZSBvdmVyZmxvdyBtZW51XG4gICAgICAgIGNvbnN0IGNhblNlbmQgPSB0aGlzLnByb3BzLnJvb20uY3VycmVudFN0YXRlLm1heVNlbmRFdmVudChcbiAgICAgICAgICAgIE1fUE9MTF9TVEFSVC5uYW1lLFxuICAgICAgICAgICAgTWF0cml4Q2xpZW50UGVnLmdldCgpLmdldFVzZXJJZCgpLFxuICAgICAgICApO1xuICAgICAgICBpZiAoIWNhblNlbmQpIHtcbiAgICAgICAgICAgIE1vZGFsLmNyZWF0ZURpYWxvZyhcbiAgICAgICAgICAgICAgICBFcnJvckRpYWxvZyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBfdChcIlBlcm1pc3Npb24gUmVxdWlyZWRcIiksXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBfdChcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiWW91IGRvIG5vdCBoYXZlIHBlcm1pc3Npb24gdG8gc3RhcnQgcG9sbHMgaW4gdGhpcyByb29tLlwiLFxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdGhyZWFkSWQgPSB0aGlzLnByb3BzLnJlbGF0aW9uPy5yZWxfdHlwZSA9PT0gVEhSRUFEX1JFTEFUSU9OX1RZUEUubmFtZVxuICAgICAgICAgICAgICAgID8gdGhpcy5wcm9wcy5yZWxhdGlvbi5ldmVudF9pZFxuICAgICAgICAgICAgICAgIDogbnVsbDtcblxuICAgICAgICAgICAgTW9kYWwuY3JlYXRlRGlhbG9nKFxuICAgICAgICAgICAgICAgIFBvbGxDcmVhdGVEaWFsb2csXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICByb29tOiB0aGlzLnByb3BzLnJvb20sXG4gICAgICAgICAgICAgICAgICAgIHRocmVhZElkLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ214X0NvbXBvdW5kRGlhbG9nJyxcbiAgICAgICAgICAgICAgICBmYWxzZSwgLy8gaXNQcmlvcml0eU1vZGFsXG4gICAgICAgICAgICAgICAgdHJ1ZSwgIC8vIGlzU3RhdGljTW9kYWxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHVibGljIHJlbmRlcigpIHtcbiAgICAgICAgLy8gZG8gbm90IGFsbG93IHNlbmRpbmcgcG9sbHMgd2l0aGluIHRocmVhZHMgYXQgdGhpcyB0aW1lXG4gICAgICAgIGlmICh0aGlzLnByb3BzLnJlbGF0aW9uPy5yZWxfdHlwZSA9PT0gVEhSRUFEX1JFTEFUSU9OX1RZUEUubmFtZSkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxDb2xsYXBzaWJsZUJ1dHRvblxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm14X01lc3NhZ2VDb21wb3Nlcl9idXR0b25cIlxuICAgICAgICAgICAgICAgIGljb25DbGFzc05hbWU9XCJteF9NZXNzYWdlQ29tcG9zZXJfcG9sbFwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5vbkNyZWF0ZUNsaWNrfVxuICAgICAgICAgICAgICAgIHRpdGxlPXtfdChcIlBvbGxcIil9XG4gICAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc2hvd0xvY2F0aW9uQnV0dG9uKFxuICAgIHByb3BzOiBJUHJvcHMsXG4gICAgcm9vbTogUm9vbSxcbiAgICByb29tSWQ6IHN0cmluZyxcbiAgICBtYXRyaXhDbGllbnQ6IE1hdHJpeENsaWVudCxcbik6IFJlYWN0RWxlbWVudCB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgcHJvcHMuc2hvd0xvY2F0aW9uQnV0dG9uXG4gICAgICAgICAgICA/IDxMb2NhdGlvbkJ1dHRvblxuICAgICAgICAgICAgICAgIGtleT1cImxvY2F0aW9uXCJcbiAgICAgICAgICAgICAgICByb29tSWQ9e3Jvb21JZH1cbiAgICAgICAgICAgICAgICByZWxhdGlvbj17cHJvcHMucmVsYXRpb259XG4gICAgICAgICAgICAgICAgc2VuZGVyPXtyb29tLmdldE1lbWJlcihtYXRyaXhDbGllbnQuZ2V0VXNlcklkKCkpfVxuICAgICAgICAgICAgICAgIG1lbnVQb3NpdGlvbj17cHJvcHMubWVudVBvc2l0aW9ufVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDogbnVsbFxuICAgICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1lc3NhZ2VDb21wb3NlckJ1dHRvbnM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFnQkE7O0FBRUE7O0FBQ0E7O0FBR0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7OztBQXhDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUE0Q08sTUFBTUEsbUJBQW1CLGdC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