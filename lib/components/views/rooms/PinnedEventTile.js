"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _relations = require("matrix-js-sdk/src/models/relations");

var _event = require("matrix-js-sdk/src/@types/event");

var _logger = require("matrix-js-sdk/src/logger");

var _matrixEventsSdk = require("matrix-events-sdk");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _actions = require("../../../dispatcher/actions");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _MessageEvent = _interopRequireDefault(require("../messages/MessageEvent"));

var _MemberAvatar = _interopRequireDefault(require("../avatars/MemberAvatar"));

var _languageHandler = require("../../../languageHandler");

var _DateUtils = require("../../../DateUtils");

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _FormattingUtils = require("../../../utils/FormattingUtils");

var _AccessibleTooltipButton = _interopRequireDefault(require("../elements/AccessibleTooltipButton"));

/*
Copyright 2017 Travis Ralston
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const AVATAR_SIZE = 24;

class PinnedEventTile extends _react.default.Component {
  constructor() {
    super(...arguments);
    (0, _defineProperty2.default)(this, "onTileClicked", () => {
      _dispatcher.default.dispatch({
        action: _actions.Action.ViewRoom,
        event_id: this.props.event.getId(),
        highlighted: true,
        room_id: this.props.event.getRoomId(),
        metricsTrigger: undefined // room doesn't change

      });
    });
    (0, _defineProperty2.default)(this, "relations", new Map());
    (0, _defineProperty2.default)(this, "getRelationsForEvent", (eventId, relationType, eventType) => {
      if (eventId === this.props.event.getId()) {
        return this.relations.get(relationType)?.get(eventType);
      }
    });
  }

  async componentDidMount() {
    // Fetch poll responses
    if (_matrixEventsSdk.M_POLL_START.matches(this.props.event.getType())) {
      const eventId = this.props.event.getId();
      const roomId = this.props.event.getRoomId();
      const room = this.context.getRoom(roomId);

      try {
        await Promise.all([_matrixEventsSdk.M_POLL_RESPONSE.name, _matrixEventsSdk.M_POLL_RESPONSE.altName, _matrixEventsSdk.M_POLL_END.name, _matrixEventsSdk.M_POLL_END.altName].map(async eventType => {
          const relations = new _relations.Relations(_event.RelationType.Reference, eventType, room);
          relations.setTargetEvent(this.props.event);

          if (!this.relations.has(_event.RelationType.Reference)) {
            this.relations.set(_event.RelationType.Reference, new Map());
          }

          this.relations.get(_event.RelationType.Reference).set(eventType, relations);
          let nextBatch;

          do {
            const page = await this.context.relations(roomId, eventId, _event.RelationType.Reference, eventType, {
              from: nextBatch
            });
            nextBatch = page.nextBatch;
            page.events.forEach(event => relations.addEvent(event));
          } while (nextBatch);
        }));
      } catch (err) {
        _logger.logger.error(`Error fetching responses to pinned poll ${eventId} in room ${roomId}`);

        _logger.logger.error(err);
      }
    }
  }

  render() {
    const sender = this.props.event.getSender();
    let unpinButton = null;

    if (this.props.onUnpinClicked) {
      unpinButton = /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
        onClick: this.props.onUnpinClicked,
        className: "mx_PinnedEventTile_unpinButton",
        title: (0, _languageHandler._t)("Unpin")
      });
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_PinnedEventTile"
    }, /*#__PURE__*/_react.default.createElement(_MemberAvatar.default, {
      className: "mx_PinnedEventTile_senderAvatar",
      member: this.props.event.sender,
      width: AVATAR_SIZE,
      height: AVATAR_SIZE,
      fallbackUserId: sender
    }), /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_PinnedEventTile_sender " + (0, _FormattingUtils.getUserNameColorClass)(sender)
    }, this.props.event.sender?.name || sender), unpinButton, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_PinnedEventTile_message"
    }, /*#__PURE__*/_react.default.createElement(_MessageEvent.default, {
      mxEvent: this.props.event,
      getRelationsForEvent: this.getRelationsForEvent // @ts-ignore - complaining that className is invalid when it's not
      ,
      className: "mx_PinnedEventTile_body",
      maxImageHeight: 150,
      onHeightChanged: () => {} // we need to give this, apparently
      ,
      permalinkCreator: this.props.permalinkCreator,
      replacingEventId: this.props.event.replacingEventId()
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_PinnedEventTile_footer"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_MessageTimestamp mx_PinnedEventTile_timestamp"
    }, (0, _DateUtils.formatDate)(new Date(this.props.event.getTs()))), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onTileClicked,
      kind: "link"
    }, (0, _languageHandler._t)("View message"))));
  }

}

exports.default = PinnedEventTile;
(0, _defineProperty2.default)(PinnedEventTile, "contextType", _MatrixClientContext.default);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,