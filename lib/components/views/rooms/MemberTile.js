"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _event = require("matrix-js-sdk/src/@types/event");

var _crypto = require("matrix-js-sdk/src/crypto");

var _roomState = require("matrix-js-sdk/src/models/room-state");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _languageHandler = require("../../../languageHandler");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _actions = require("../../../dispatcher/actions");

var _EntityTile = _interopRequireWildcard(require("./EntityTile"));

var _MemberAvatar = _interopRequireDefault(require("./../avatars/MemberAvatar"));

var _DisambiguatedProfile = _interopRequireDefault(require("../messages/DisambiguatedProfile"));

var _UserIdentifier = _interopRequireDefault(require("../../../customisations/UserIdentifier"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2019, 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class MemberTile extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "userLastModifiedTime", void 0);
    (0, _defineProperty2.default)(this, "memberLastModifiedTime", void 0);
    (0, _defineProperty2.default)(this, "onRoomStateEvents", ev => {
      if (ev.getType() !== _event.EventType.RoomEncryption) return;
      const {
        roomId
      } = this.props.member;
      if (ev.getRoomId() !== roomId) return; // The room is encrypted now.

      const cli = _MatrixClientPeg.MatrixClientPeg.get();

      cli.removeListener(_roomState.RoomStateEvent.Events, this.onRoomStateEvents);
      this.setState({
        isRoomEncrypted: true
      });
      this.updateE2EStatus();
    });
    (0, _defineProperty2.default)(this, "onUserTrustStatusChanged", (userId, trustStatus) => {
      if (userId !== this.props.member.userId) return;
      this.updateE2EStatus();
    });
    (0, _defineProperty2.default)(this, "onDeviceVerificationChanged", (userId, deviceId, deviceInfo) => {
      if (userId !== this.props.member.userId) return;
      this.updateE2EStatus();
    });
    (0, _defineProperty2.default)(this, "onClick", () => {
      _dispatcher.default.dispatch({
        action: _actions.Action.ViewUser,
        member: this.props.member,
        push: true
      });
    });
    this.state = {
      isRoomEncrypted: false,
      e2eStatus: null
    };
  }

  componentDidMount() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    const {
      roomId
    } = this.props.member;

    if (roomId) {
      const isRoomEncrypted = cli.isRoomEncrypted(roomId);
      this.setState({
        isRoomEncrypted
      });

      if (isRoomEncrypted) {
        cli.on(_crypto.CryptoEvent.UserTrustStatusChanged, this.onUserTrustStatusChanged);
        cli.on(_crypto.CryptoEvent.DeviceVerificationChanged, this.onDeviceVerificationChanged);
        this.updateE2EStatus();
      } else {
        // Listen for room to become encrypted
        cli.on(_roomState.RoomStateEvent.Events, this.onRoomStateEvents);
      }
    }
  }

  componentWillUnmount() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    if (cli) {
      cli.removeListener(_roomState.RoomStateEvent.Events, this.onRoomStateEvents);
      cli.removeListener(_crypto.CryptoEvent.UserTrustStatusChanged, this.onUserTrustStatusChanged);
      cli.removeListener(_crypto.CryptoEvent.DeviceVerificationChanged, this.onDeviceVerificationChanged);
    }
  }

  async updateE2EStatus() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    const {
      userId
    } = this.props.member;
    const isMe = userId === cli.getUserId();
    const userTrust = cli.checkUserTrust(userId);

    if (!userTrust.isCrossSigningVerified()) {
      this.setState({
        e2eStatus: userTrust.wasCrossSigningVerified() ? "warning" : "normal"
      });
      return;
    }

    const devices = cli.getStoredDevicesForUser(userId);
    const anyDeviceUnverified = devices.some(device => {
      const {
        deviceId
      } = device; // For your own devices, we use the stricter check of cross-signing
      // verification to encourage everyone to trust their own devices via
      // cross-signing so that other users can then safely trust you.
      // For other people's devices, the more general verified check that
      // includes locally verified devices can be used.

      const deviceTrust = cli.checkDeviceTrust(userId, deviceId);
      return isMe ? !deviceTrust.isCrossSigningVerified() : !deviceTrust.isVerified();
    });
    this.setState({
      e2eStatus: anyDeviceUnverified ? "warning" : "verified"
    });
  }

  shouldComponentUpdate(nextProps, nextState) {
    if (this.memberLastModifiedTime === undefined || this.memberLastModifiedTime < nextProps.member.getLastModifiedTime()) {
      return true;
    }

    if (nextProps.member.user && (this.userLastModifiedTime === undefined || this.userLastModifiedTime < nextProps.member.user.getLastModifiedTime())) {
      return true;
    }

    if (nextState.isRoomEncrypted !== this.state.isRoomEncrypted || nextState.e2eStatus !== this.state.e2eStatus) {
      return true;
    }

    return false;
  }

  getDisplayName() {
    return this.props.member.name;
  }

  getPowerLabel() {
    return (0, _languageHandler._t)("%(userName)s (power %(powerLevelNumber)s)", {
      userName: _UserIdentifier.default.getDisplayUserIdentifier(this.props.member.userId, {
        roomId: this.props.member.roomId
      }),
      powerLevelNumber: this.props.member.powerLevel
    }).trim();
  }

  render() {
    const member = this.props.member;
    const name = this.getDisplayName();
    const presenceState = member.user ? member.user.presence : null;

    const av = /*#__PURE__*/_react.default.createElement(_MemberAvatar.default, {
      member: member,
      width: 36,
      height: 36,
      "aria-hidden": "true"
    });

    if (member.user) {
      this.userLastModifiedTime = member.user.getLastModifiedTime();
    }

    this.memberLastModifiedTime = member.getLastModifiedTime();
    const powerStatusMap = new Map([[100, _EntityTile.PowerStatus.Admin], [50, _EntityTile.PowerStatus.Moderator]]); // Find the nearest power level with a badge

    let powerLevel = this.props.member.powerLevel;

    for (const [pl] of powerStatusMap) {
      if (this.props.member.powerLevel >= pl) {
        powerLevel = pl;
        break;
      }
    }

    const powerStatus = powerStatusMap.get(powerLevel);
    let e2eStatus;

    if (this.state.isRoomEncrypted) {
      e2eStatus = this.state.e2eStatus;
    }

    const nameJSX = /*#__PURE__*/_react.default.createElement(_DisambiguatedProfile.default, {
      member: member,
      fallbackName: name || ""
    });

    return /*#__PURE__*/_react.default.createElement(_EntityTile.default, (0, _extends2.default)({}, this.props, {
      presenceState: presenceState,
      presenceLastActiveAgo: member.user ? member.user.lastActiveAgo : 0,
      presenceLastTs: member.user ? member.user.lastPresenceTs : 0,
      presenceCurrentlyActive: member.user ? member.user.currentlyActive : false,
      avatarJsx: av,
      title: this.getPowerLabel(),
      name: name,
      nameJSX: nameJSX,
      powerStatus: powerStatus,
      showPresence: this.props.showPresence,
      e2eStatus: e2eStatus,
      onClick: this.onClick
    }));
  }

}

exports.default = MemberTile;
(0, _defineProperty2.default)(MemberTile, "defaultProps", {
  showPresence: true
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,