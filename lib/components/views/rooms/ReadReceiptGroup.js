"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.READ_AVATAR_SIZE = void 0;
exports.ReadReceiptGroup = ReadReceiptGroup;
exports.determineAvatarPosition = determineAvatarPosition;
exports.readReceiptTooltip = readReceiptTooltip;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _ReadReceiptMarker = _interopRequireDefault(require("./ReadReceiptMarker"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _MemberAvatar = _interopRequireDefault(require("../avatars/MemberAvatar"));

var _AutoHideScrollbar = _interopRequireDefault(require("../../structures/AutoHideScrollbar"));

var _Tooltip = require("../elements/Tooltip");

var _DateUtils = require("../../../DateUtils");

var _actions = require("../../../dispatcher/actions");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _ContextMenu = _interopRequireWildcard(require("../../structures/ContextMenu"));

var _useTooltip = require("../../../utils/useTooltip");

var _languageHandler = require("../../../languageHandler");

var _RovingTabIndex = require("../../../accessibility/RovingTabIndex");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2022 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// #20547 Design specified that we should show the three latest read receipts
const MAX_READ_AVATARS_PLUS_N = 3; // #21935 If we’ve got just 4, don’t show +1, just show all of them

const MAX_READ_AVATARS = MAX_READ_AVATARS_PLUS_N + 1;
const READ_AVATAR_OFFSET = 10;
const READ_AVATAR_SIZE = 16;
exports.READ_AVATAR_SIZE = READ_AVATAR_SIZE;

function determineAvatarPosition(index, max) {
  if (index < max) {
    return {
      hidden: false,
      position: index
    };
  } else {
    return {
      hidden: true,
      position: 0
    };
  }
}

function readReceiptTooltip(members, hasMore) {
  if (hasMore) {
    return (0, _languageHandler._t)("%(members)s and more", {
      members: members.join(", ")
    });
  } else if (members.length > 1) {
    return (0, _languageHandler._t)("%(members)s and %(last)s", {
      last: members.pop(),
      members: members.join(", ")
    });
  } else if (members.length) {
    return members[0];
  } else {
    return null;
  }
}

function ReadReceiptGroup(_ref) {
  let {
    readReceipts,
    readReceiptMap,
    checkUnmounting,
    suppressAnimation,
    isTwelveHour
  } = _ref;
  const [menuDisplayed, button, openMenu, closeMenu] = (0, _ContextMenu.useContextMenu)(); // If we are above MAX_READ_AVATARS, we’ll have to remove a few to have space for the +n count.

  const hasMore = readReceipts.length > MAX_READ_AVATARS;
  const maxAvatars = hasMore ? MAX_READ_AVATARS_PLUS_N : MAX_READ_AVATARS;
  const tooltipMembers = readReceipts.slice(0, maxAvatars).map(it => it.roomMember?.name ?? it.userId);
  const tooltipText = readReceiptTooltip(tooltipMembers, hasMore);
  const [{
    showTooltip,
    hideTooltip
  }, tooltip] = (0, _useTooltip.useTooltip)({
    label: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Tooltip_title"
    }, (0, _languageHandler._t)("Seen by %(count)s people", {
      count: readReceipts.length
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Tooltip_sub"
    }, tooltipText)),
    alignment: _Tooltip.Alignment.TopRight
  }); // return early if there are no read receipts

  if (readReceipts.length === 0) {
    // We currently must include `mx_ReadReceiptGroup_container` in
    // the DOM of all events, as it is the positioned parent of the
    // animated read receipts. We can't let it unmount when a receipt
    // moves events, so for now we mount it for all events. Without
    // it, the animation will start from the top of the timeline
    // (because it lost its container).
    // See also https://github.com/vector-im/element-web/issues/17561
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_EventTile_msgOption"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ReadReceiptGroup"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ReadReceiptGroup_button"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_ReadReceiptGroup_container"
    }))));
  }

  const avatars = readReceipts.map((receipt, index) => {
    const {
      hidden,
      position
    } = determineAvatarPosition(index, maxAvatars);
    const userId = receipt.userId;
    let readReceiptInfo;

    if (readReceiptMap) {
      readReceiptInfo = readReceiptMap[userId];

      if (!readReceiptInfo) {
        readReceiptInfo = {};
        readReceiptMap[userId] = readReceiptInfo;
      }
    }

    return /*#__PURE__*/_react.default.createElement(_ReadReceiptMarker.default, {
      key: userId,
      member: receipt.roomMember,
      fallbackUserId: userId,
      offset: position * READ_AVATAR_OFFSET,
      hidden: hidden,
      readReceiptInfo: readReceiptInfo,
      checkUnmounting: checkUnmounting,
      suppressAnimation: suppressAnimation,
      timestamp: receipt.ts,
      showTwelveHour: isTwelveHour
    });
  }).reverse();
  let remText;
  const remainder = readReceipts.length - maxAvatars;

  if (remainder > 0) {
    remText = /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_ReadReceiptGroup_remainder",
      "aria-live": "off"
    }, "+", remainder);
  }

  let contextMenu;

  if (menuDisplayed) {
    const buttonRect = button.current.getBoundingClientRect();
    contextMenu = /*#__PURE__*/_react.default.createElement(_ContextMenu.default, (0, _extends2.default)({
      menuClassName: "mx_ReadReceiptGroup_popup",
      onFinished: closeMenu
    }, (0, _ContextMenu.aboveLeftOf)(buttonRect)), /*#__PURE__*/_react.default.createElement(_AutoHideScrollbar.default, null, /*#__PURE__*/_react.default.createElement(SectionHeader, {
      className: "mx_ReadReceiptGroup_title"
    }, (0, _languageHandler._t)("Seen by %(count)s people", {
      count: readReceipts.length
    })), readReceipts.map(receipt => /*#__PURE__*/_react.default.createElement(ReadReceiptPerson, (0, _extends2.default)({
      key: receipt.userId
    }, receipt, {
      isTwelveHour: isTwelveHour,
      onAfterClick: closeMenu
    })))));
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_EventTile_msgOption"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_ReadReceiptGroup",
    role: "group",
    "aria-label": (0, _languageHandler._t)("Read receipts")
  }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    className: "mx_ReadReceiptGroup_button",
    inputRef: button,
    "aria-label": tooltipText,
    "aria-haspopup": "true",
    onClick: openMenu,
    onMouseOver: showTooltip,
    onMouseLeave: hideTooltip,
    onFocus: showTooltip,
    onBlur: hideTooltip
  }, remText, /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_ReadReceiptGroup_container",
    style: {
      width: Math.min(maxAvatars, readReceipts.length) * READ_AVATAR_OFFSET + READ_AVATAR_SIZE - READ_AVATAR_OFFSET
    }
  }, avatars)), tooltip, contextMenu));
}

function ReadReceiptPerson(_ref2) {
  let {
    userId,
    roomMember,
    ts,
    isTwelveHour,
    onAfterClick
  } = _ref2;
  const [{
    showTooltip,
    hideTooltip
  }, tooltip] = (0, _useTooltip.useTooltip)({
    alignment: _Tooltip.Alignment.Top,
    tooltipClassName: "mx_ReadReceiptGroup_person--tooltip",
    label: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Tooltip_title"
    }, roomMember?.rawDisplayName ?? userId), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Tooltip_sub"
    }, userId))
  });
  return /*#__PURE__*/_react.default.createElement(_ContextMenu.MenuItem, {
    className: "mx_ReadReceiptGroup_person",
    onClick: () => {
      _dispatcher.default.dispatch({
        action: _actions.Action.ViewUser,
        // XXX: We should be using a real member object and not assuming what the receiver wants.
        // The ViewUser action leads to the RightPanelStore, and RightPanelStoreIPanelState defines the
        // member property of IRightPanelCardState as `RoomMember | User`, so we’re fine for now, but we
        // should definitely clean this up later
        member: roomMember ?? {
          userId
        },
        push: false
      });

      onAfterClick?.();
    },
    onMouseOver: showTooltip,
    onMouseLeave: hideTooltip,
    onFocus: showTooltip,
    onBlur: hideTooltip,
    onWheel: hideTooltip
  }, /*#__PURE__*/_react.default.createElement(_MemberAvatar.default, {
    member: roomMember,
    fallbackUserId: userId,
    width: 24,
    height: 24,
    "aria-hidden": "true",
    "aria-live": "off",
    resizeMethod: "crop",
    hideTitle: true
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_ReadReceiptGroup_name"
  }, /*#__PURE__*/_react.default.createElement("p", null, roomMember?.name ?? userId), /*#__PURE__*/_react.default.createElement("p", {
    className: "mx_ReadReceiptGroup_secondary"
  }, (0, _DateUtils.formatDate)(new Date(ts), isTwelveHour))), tooltip);
}

function SectionHeader(_ref3) {
  let {
    className,
    children
  } = _ref3;
  const ref = (0, _react.useRef)();
  const [onFocus] = (0, _RovingTabIndex.useRovingTabIndex)(ref);
  return /*#__PURE__*/_react.default.createElement("h3", {
    className: className,
    role: "menuitem",
    onFocus: onFocus,
    tabIndex: -1,
    ref: ref
  }, children);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,