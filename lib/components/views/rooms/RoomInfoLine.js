"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _partials = require("matrix-js-sdk/src/@types/partials");

var _languageHandler = require("../../../languageHandler");

var _RightPanelStore = _interopRequireDefault(require("../../../stores/right-panel/RightPanelStore"));

var _RightPanelStorePhases = require("../../../stores/right-panel/RightPanelStorePhases");

var _useAsyncMemo = require("../../../hooks/useAsyncMemo");

var _useRoomState = require("../../../hooks/useRoomState");

var _useRoomMembers = require("../../../hooks/useRoomMembers");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

/*
Copyright 2022 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const RoomInfoLine = _ref => {
  let {
    room
  } = _ref;
  // summary will begin as undefined whilst loading and go null if it fails to load or we are not invited.
  const summary = (0, _useAsyncMemo.useAsyncMemo)(async () => {
    if (room.getMyMembership() !== "invite") return null;

    try {
      return room.client.getRoomSummary(room.roomId);
    } catch (e) {
      return null;
    }
  }, [room]);
  const joinRule = (0, _useRoomState.useRoomState)(room, state => state.getJoinRule());
  const membership = (0, _useRoomMembers.useMyRoomMembership)(room);
  const memberCount = (0, _useRoomMembers.useRoomMemberCount)(room);
  let iconClass;
  let roomType;

  if (room.isElementVideoRoom()) {
    iconClass = "mx_RoomInfoLine_video";
    roomType = (0, _languageHandler._t)("Video room");
  } else if (joinRule === _partials.JoinRule.Public) {
    iconClass = "mx_RoomInfoLine_public";
    roomType = room.isSpaceRoom() ? (0, _languageHandler._t)("Public space") : (0, _languageHandler._t)("Public room");
  } else {
    iconClass = "mx_RoomInfoLine_private";
    roomType = room.isSpaceRoom() ? (0, _languageHandler._t)("Private space") : (0, _languageHandler._t)("Private room");
  }

  let members;

  if (membership === "invite" && summary) {
    // Don't trust local state and instead use the summary API
    members = /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_RoomInfoLine_members"
    }, (0, _languageHandler._t)("%(count)s members", {
      count: summary.num_joined_members
    }));
  } else if (memberCount && summary !== undefined) {
    // summary is not still loading
    const viewMembers = () => _RightPanelStore.default.instance.setCard({
      phase: room.isSpaceRoom() ? _RightPanelStorePhases.RightPanelPhases.SpaceMemberList : _RightPanelStorePhases.RightPanelPhases.RoomMemberList
    });

    members = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      kind: "link",
      className: "mx_RoomInfoLine_members",
      onClick: viewMembers
    }, (0, _languageHandler._t)("%(count)s members", {
      count: memberCount
    }));
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: `mx_RoomInfoLine ${iconClass}`
  }, roomType, members);
};

var _default = RoomInfoLine;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSb29tSW5mb0xpbmUiLCJyb29tIiwic3VtbWFyeSIsInVzZUFzeW5jTWVtbyIsImdldE15TWVtYmVyc2hpcCIsImNsaWVudCIsImdldFJvb21TdW1tYXJ5Iiwicm9vbUlkIiwiZSIsImpvaW5SdWxlIiwidXNlUm9vbVN0YXRlIiwic3RhdGUiLCJnZXRKb2luUnVsZSIsIm1lbWJlcnNoaXAiLCJ1c2VNeVJvb21NZW1iZXJzaGlwIiwibWVtYmVyQ291bnQiLCJ1c2VSb29tTWVtYmVyQ291bnQiLCJpY29uQ2xhc3MiLCJyb29tVHlwZSIsImlzRWxlbWVudFZpZGVvUm9vbSIsIl90IiwiSm9pblJ1bGUiLCJQdWJsaWMiLCJpc1NwYWNlUm9vbSIsIm1lbWJlcnMiLCJjb3VudCIsIm51bV9qb2luZWRfbWVtYmVycyIsInVuZGVmaW5lZCIsInZpZXdNZW1iZXJzIiwiUmlnaHRQYW5lbFN0b3JlIiwiaW5zdGFuY2UiLCJzZXRDYXJkIiwicGhhc2UiLCJSaWdodFBhbmVsUGhhc2VzIiwiU3BhY2VNZW1iZXJMaXN0IiwiUm9vbU1lbWJlckxpc3QiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy92aWV3cy9yb29tcy9Sb29tSW5mb0xpbmUudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMiBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCwgeyBGQyB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgUm9vbSB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9tb2RlbHMvcm9vbVwiO1xuaW1wb3J0IHsgSm9pblJ1bGUgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvQHR5cGVzL3BhcnRpYWxzXCI7XG5cbmltcG9ydCB7IF90IH0gZnJvbSBcIi4uLy4uLy4uL2xhbmd1YWdlSGFuZGxlclwiO1xuaW1wb3J0IFJpZ2h0UGFuZWxTdG9yZSBmcm9tIFwiLi4vLi4vLi4vc3RvcmVzL3JpZ2h0LXBhbmVsL1JpZ2h0UGFuZWxTdG9yZVwiO1xuaW1wb3J0IHsgUmlnaHRQYW5lbFBoYXNlcyB9IGZyb20gXCIuLi8uLi8uLi9zdG9yZXMvcmlnaHQtcGFuZWwvUmlnaHRQYW5lbFN0b3JlUGhhc2VzXCI7XG5pbXBvcnQgeyB1c2VBc3luY01lbW8gfSBmcm9tIFwiLi4vLi4vLi4vaG9va3MvdXNlQXN5bmNNZW1vXCI7XG5pbXBvcnQgeyB1c2VSb29tU3RhdGUgfSBmcm9tIFwiLi4vLi4vLi4vaG9va3MvdXNlUm9vbVN0YXRlXCI7XG5pbXBvcnQgeyB1c2VSb29tTWVtYmVyQ291bnQsIHVzZU15Um9vbU1lbWJlcnNoaXAgfSBmcm9tIFwiLi4vLi4vLi4vaG9va3MvdXNlUm9vbU1lbWJlcnNcIjtcbmltcG9ydCBBY2Nlc3NpYmxlQnV0dG9uIGZyb20gXCIuLi9lbGVtZW50cy9BY2Nlc3NpYmxlQnV0dG9uXCI7XG5cbmludGVyZmFjZSBJUHJvcHMge1xuICAgIHJvb206IFJvb207XG59XG5cbmNvbnN0IFJvb21JbmZvTGluZTogRkM8SVByb3BzPiA9ICh7IHJvb20gfSkgPT4ge1xuICAgIC8vIHN1bW1hcnkgd2lsbCBiZWdpbiBhcyB1bmRlZmluZWQgd2hpbHN0IGxvYWRpbmcgYW5kIGdvIG51bGwgaWYgaXQgZmFpbHMgdG8gbG9hZCBvciB3ZSBhcmUgbm90IGludml0ZWQuXG4gICAgY29uc3Qgc3VtbWFyeSA9IHVzZUFzeW5jTWVtbyhhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmIChyb29tLmdldE15TWVtYmVyc2hpcCgpICE9PSBcImludml0ZVwiKSByZXR1cm4gbnVsbDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiByb29tLmNsaWVudC5nZXRSb29tU3VtbWFyeShyb29tLnJvb21JZCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfSwgW3Jvb21dKTtcbiAgICBjb25zdCBqb2luUnVsZSA9IHVzZVJvb21TdGF0ZShyb29tLCBzdGF0ZSA9PiBzdGF0ZS5nZXRKb2luUnVsZSgpKTtcbiAgICBjb25zdCBtZW1iZXJzaGlwID0gdXNlTXlSb29tTWVtYmVyc2hpcChyb29tKTtcbiAgICBjb25zdCBtZW1iZXJDb3VudCA9IHVzZVJvb21NZW1iZXJDb3VudChyb29tKTtcblxuICAgIGxldCBpY29uQ2xhc3M6IHN0cmluZztcbiAgICBsZXQgcm9vbVR5cGU6IHN0cmluZztcbiAgICBpZiAocm9vbS5pc0VsZW1lbnRWaWRlb1Jvb20oKSkge1xuICAgICAgICBpY29uQ2xhc3MgPSBcIm14X1Jvb21JbmZvTGluZV92aWRlb1wiO1xuICAgICAgICByb29tVHlwZSA9IF90KFwiVmlkZW8gcm9vbVwiKTtcbiAgICB9IGVsc2UgaWYgKGpvaW5SdWxlID09PSBKb2luUnVsZS5QdWJsaWMpIHtcbiAgICAgICAgaWNvbkNsYXNzID0gXCJteF9Sb29tSW5mb0xpbmVfcHVibGljXCI7XG4gICAgICAgIHJvb21UeXBlID0gcm9vbS5pc1NwYWNlUm9vbSgpID8gX3QoXCJQdWJsaWMgc3BhY2VcIikgOiBfdChcIlB1YmxpYyByb29tXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGljb25DbGFzcyA9IFwibXhfUm9vbUluZm9MaW5lX3ByaXZhdGVcIjtcbiAgICAgICAgcm9vbVR5cGUgPSByb29tLmlzU3BhY2VSb29tKCkgPyBfdChcIlByaXZhdGUgc3BhY2VcIikgOiBfdChcIlByaXZhdGUgcm9vbVwiKTtcbiAgICB9XG5cbiAgICBsZXQgbWVtYmVyczogSlNYLkVsZW1lbnQ7XG4gICAgaWYgKG1lbWJlcnNoaXAgPT09IFwiaW52aXRlXCIgJiYgc3VtbWFyeSkge1xuICAgICAgICAvLyBEb24ndCB0cnVzdCBsb2NhbCBzdGF0ZSBhbmQgaW5zdGVhZCB1c2UgdGhlIHN1bW1hcnkgQVBJXG4gICAgICAgIG1lbWJlcnMgPSA8c3BhbiBjbGFzc05hbWU9XCJteF9Sb29tSW5mb0xpbmVfbWVtYmVyc1wiPlxuICAgICAgICAgICAgeyBfdChcIiUoY291bnQpcyBtZW1iZXJzXCIsIHsgY291bnQ6IHN1bW1hcnkubnVtX2pvaW5lZF9tZW1iZXJzIH0pIH1cbiAgICAgICAgPC9zcGFuPjtcbiAgICB9IGVsc2UgaWYgKG1lbWJlckNvdW50ICYmIHN1bW1hcnkgIT09IHVuZGVmaW5lZCkgeyAvLyBzdW1tYXJ5IGlzIG5vdCBzdGlsbCBsb2FkaW5nXG4gICAgICAgIGNvbnN0IHZpZXdNZW1iZXJzID0gKCkgPT4gUmlnaHRQYW5lbFN0b3JlLmluc3RhbmNlLnNldENhcmQoe1xuICAgICAgICAgICAgcGhhc2U6IHJvb20uaXNTcGFjZVJvb20oKSA/IFJpZ2h0UGFuZWxQaGFzZXMuU3BhY2VNZW1iZXJMaXN0IDogUmlnaHRQYW5lbFBoYXNlcy5Sb29tTWVtYmVyTGlzdCxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbWVtYmVycyA9IDxBY2Nlc3NpYmxlQnV0dG9uXG4gICAgICAgICAgICBraW5kPVwibGlua1wiXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJteF9Sb29tSW5mb0xpbmVfbWVtYmVyc1wiXG4gICAgICAgICAgICBvbkNsaWNrPXt2aWV3TWVtYmVyc31cbiAgICAgICAgPlxuICAgICAgICAgICAgeyBfdChcIiUoY291bnQpcyBtZW1iZXJzXCIsIHsgY291bnQ6IG1lbWJlckNvdW50IH0pIH1cbiAgICAgICAgPC9BY2Nlc3NpYmxlQnV0dG9uPjtcbiAgICB9XG5cbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e2BteF9Sb29tSW5mb0xpbmUgJHtpY29uQ2xhc3N9YH0+XG4gICAgICAgIHsgcm9vbVR5cGUgfVxuICAgICAgICB7IG1lbWJlcnMgfVxuICAgIDwvZGl2Pjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJvb21JbmZvTGluZTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBZ0JBOztBQUVBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQTFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFrQkEsTUFBTUEsWUFBd0IsR0FBRyxRQUFjO0VBQUEsSUFBYjtJQUFFQztFQUFGLENBQWE7RUFDM0M7RUFDQSxNQUFNQyxPQUFPLEdBQUcsSUFBQUMsMEJBQUEsRUFBYSxZQUFZO0lBQ3JDLElBQUlGLElBQUksQ0FBQ0csZUFBTCxPQUEyQixRQUEvQixFQUF5QyxPQUFPLElBQVA7O0lBQ3pDLElBQUk7TUFDQSxPQUFPSCxJQUFJLENBQUNJLE1BQUwsQ0FBWUMsY0FBWixDQUEyQkwsSUFBSSxDQUFDTSxNQUFoQyxDQUFQO0lBQ0gsQ0FGRCxDQUVFLE9BQU9DLENBQVAsRUFBVTtNQUNSLE9BQU8sSUFBUDtJQUNIO0VBQ0osQ0FQZSxFQU9iLENBQUNQLElBQUQsQ0FQYSxDQUFoQjtFQVFBLE1BQU1RLFFBQVEsR0FBRyxJQUFBQywwQkFBQSxFQUFhVCxJQUFiLEVBQW1CVSxLQUFLLElBQUlBLEtBQUssQ0FBQ0MsV0FBTixFQUE1QixDQUFqQjtFQUNBLE1BQU1DLFVBQVUsR0FBRyxJQUFBQyxtQ0FBQSxFQUFvQmIsSUFBcEIsQ0FBbkI7RUFDQSxNQUFNYyxXQUFXLEdBQUcsSUFBQUMsa0NBQUEsRUFBbUJmLElBQW5CLENBQXBCO0VBRUEsSUFBSWdCLFNBQUo7RUFDQSxJQUFJQyxRQUFKOztFQUNBLElBQUlqQixJQUFJLENBQUNrQixrQkFBTCxFQUFKLEVBQStCO0lBQzNCRixTQUFTLEdBQUcsdUJBQVo7SUFDQUMsUUFBUSxHQUFHLElBQUFFLG1CQUFBLEVBQUcsWUFBSCxDQUFYO0VBQ0gsQ0FIRCxNQUdPLElBQUlYLFFBQVEsS0FBS1ksa0JBQUEsQ0FBU0MsTUFBMUIsRUFBa0M7SUFDckNMLFNBQVMsR0FBRyx3QkFBWjtJQUNBQyxRQUFRLEdBQUdqQixJQUFJLENBQUNzQixXQUFMLEtBQXFCLElBQUFILG1CQUFBLEVBQUcsY0FBSCxDQUFyQixHQUEwQyxJQUFBQSxtQkFBQSxFQUFHLGFBQUgsQ0FBckQ7RUFDSCxDQUhNLE1BR0E7SUFDSEgsU0FBUyxHQUFHLHlCQUFaO0lBQ0FDLFFBQVEsR0FBR2pCLElBQUksQ0FBQ3NCLFdBQUwsS0FBcUIsSUFBQUgsbUJBQUEsRUFBRyxlQUFILENBQXJCLEdBQTJDLElBQUFBLG1CQUFBLEVBQUcsY0FBSCxDQUF0RDtFQUNIOztFQUVELElBQUlJLE9BQUo7O0VBQ0EsSUFBSVgsVUFBVSxLQUFLLFFBQWYsSUFBMkJYLE9BQS9CLEVBQXdDO0lBQ3BDO0lBQ0FzQixPQUFPLGdCQUFHO01BQU0sU0FBUyxFQUFDO0lBQWhCLEdBQ0osSUFBQUosbUJBQUEsRUFBRyxtQkFBSCxFQUF3QjtNQUFFSyxLQUFLLEVBQUV2QixPQUFPLENBQUN3QjtJQUFqQixDQUF4QixDQURJLENBQVY7RUFHSCxDQUxELE1BS08sSUFBSVgsV0FBVyxJQUFJYixPQUFPLEtBQUt5QixTQUEvQixFQUEwQztJQUFFO0lBQy9DLE1BQU1DLFdBQVcsR0FBRyxNQUFNQyx3QkFBQSxDQUFnQkMsUUFBaEIsQ0FBeUJDLE9BQXpCLENBQWlDO01BQ3ZEQyxLQUFLLEVBQUUvQixJQUFJLENBQUNzQixXQUFMLEtBQXFCVSx1Q0FBQSxDQUFpQkMsZUFBdEMsR0FBd0RELHVDQUFBLENBQWlCRTtJQUR6QixDQUFqQyxDQUExQjs7SUFJQVgsT0FBTyxnQkFBRyw2QkFBQyx5QkFBRDtNQUNOLElBQUksRUFBQyxNQURDO01BRU4sU0FBUyxFQUFDLHlCQUZKO01BR04sT0FBTyxFQUFFSTtJQUhILEdBS0osSUFBQVIsbUJBQUEsRUFBRyxtQkFBSCxFQUF3QjtNQUFFSyxLQUFLLEVBQUVWO0lBQVQsQ0FBeEIsQ0FMSSxDQUFWO0VBT0g7O0VBRUQsb0JBQU87SUFBSyxTQUFTLEVBQUcsbUJBQWtCRSxTQUFVO0VBQTdDLEdBQ0RDLFFBREMsRUFFRE0sT0FGQyxDQUFQO0FBSUgsQ0FuREQ7O2VBcURleEIsWSJ9