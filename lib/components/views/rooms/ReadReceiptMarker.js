"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _logger = require("matrix-js-sdk/src/logger");

var _NodeAnimator = _interopRequireDefault(require("../../../NodeAnimator"));

var _units = require("../../../utils/units");

var _MemberAvatar = _interopRequireDefault(require("../avatars/MemberAvatar"));

var _ReadReceiptGroup = require("./ReadReceiptGroup");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2016 OpenMarket Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class ReadReceiptMarker extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "avatar", /*#__PURE__*/(0, _react.createRef)());
    this.state = {
      // if we are going to animate the RR, we don't show it on first render,
      // and instead just add a placeholder to the DOM; once we've been
      // mounted, we start an animation which moves the RR from its old
      // position.
      suppressDisplay: !this.props.suppressAnimation
    };
  }

  componentWillUnmount() {
    // before we remove the rr, store its location in the map, so that if
    // it reappears, it can be animated from the right place.
    const rrInfo = this.props.readReceiptInfo;

    if (!rrInfo) {
      return;
    } // checking the DOM properties can force a re-layout, which can be
    // quite expensive; so if the parent messagepanel is being unmounted,
    // then don't bother with this.


    if (this.props.checkUnmounting && this.props.checkUnmounting()) {
      return;
    }

    this.buildReadReceiptInfo(rrInfo);
  }

  componentDidMount() {
    if (!this.state.suppressDisplay) {
      // we've already done our display - nothing more to do.
      return;
    }

    this.animateMarker();
  }

  componentDidUpdate(prevProps) {
    const differentOffset = prevProps.offset !== this.props.offset;
    const visibilityChanged = prevProps.hidden !== this.props.hidden;

    if (differentOffset || visibilityChanged) {
      this.animateMarker();
    }
  }

  buildReadReceiptInfo() {
    let target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    const element = this.avatar.current; // this is the mx_ReadReceiptsGroup_container

    const horizontalContainer = element.offsetParent;

    if (!horizontalContainer || !(horizontalContainer instanceof HTMLElement)) {
      // this seems to happen sometimes for reasons I don't understand
      // the docs for `offsetParent` say it may be null if `display` is
      // `none`, but I can't see why that would happen.
      _logger.logger.warn(`ReadReceiptMarker for ${this.props.fallbackUserId} has no valid horizontalContainer`);

      target.top = 0;
      target.right = 0;
      target.parent = null;
      return target;
    } // this is the mx_ReadReceiptsGroup


    const verticalContainer = horizontalContainer.offsetParent;

    if (!verticalContainer || !(verticalContainer instanceof HTMLElement)) {
      // this seems to happen sometimes for reasons I don't understand
      // the docs for `offsetParent` say it may be null if `display` is
      // `none`, but I can't see why that would happen.
      _logger.logger.warn(`ReadReceiptMarker for ${this.props.fallbackUserId} has no valid verticalContainer`);

      target.top = 0;
      target.right = 0;
      target.parent = null;
      return target;
    }

    target.top = element.offsetTop;
    target.right = element.getBoundingClientRect().right - horizontalContainer.getBoundingClientRect().right;
    target.parent = verticalContainer;
    return target;
  }

  readReceiptPosition(info) {
    if (!info.parent) {
      // this seems to happen sometimes for reasons I don't understand
      // the docs for `offsetParent` say it may be null if `display` is
      // `none`, but I can't see why that would happen.
      _logger.logger.warn(`ReadReceiptMarker for ${this.props.fallbackUserId} has no offsetParent`);

      return 0;
    }

    return info.top + info.parent.getBoundingClientRect().top;
  }

  animateMarker() {
    const oldInfo = this.props.readReceiptInfo;
    const newInfo = this.buildReadReceiptInfo();
    const newPosition = this.readReceiptPosition(newInfo);
    const oldPosition = oldInfo // start at the old height and in the old h pos
    ? this.readReceiptPosition(oldInfo) // treat new RRs as though they were off the top of the screen
    : -_ReadReceiptGroup.READ_AVATAR_SIZE;
    const startStyles = [];

    if (oldInfo?.right) {
      startStyles.push({
        top: oldPosition - newPosition,
        right: oldInfo.right
      });
    }

    startStyles.push({
      top: oldPosition - newPosition,
      right: 0
    });
    this.setState({
      suppressDisplay: false,
      startStyles
    });
  }

  render() {
    if (this.state.suppressDisplay) {
      return /*#__PURE__*/_react.default.createElement("div", {
        ref: this.avatar
      });
    }

    const style = {
      right: (0, _units.toPx)(this.props.offset),
      top: '0px'
    };
    return /*#__PURE__*/_react.default.createElement(_NodeAnimator.default, {
      startStyles: this.state.startStyles
    }, /*#__PURE__*/_react.default.createElement(_MemberAvatar.default, {
      member: this.props.member,
      fallbackUserId: this.props.fallbackUserId,
      "aria-hidden": "true",
      "aria-live": "off",
      width: 14,
      height: 14,
      resizeMethod: "crop",
      style: style,
      inputRef: this.avatar,
      hideTitle: true,
      tabIndex: -1
    }));
  }

}

exports.default = ReadReceiptMarker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,