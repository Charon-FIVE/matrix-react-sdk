"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _reactTransitionGroup = require("react-transition-group");

var _BreadcrumbsStore = require("../../../stores/BreadcrumbsStore");

var _DecoratedRoomAvatar = _interopRequireDefault(require("../avatars/DecoratedRoomAvatar"));

var _languageHandler = require("../../../languageHandler");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _AsyncStore = require("../../../stores/AsyncStore");

var _RovingTabIndex = require("../../../accessibility/RovingTabIndex");

var _Toolbar = _interopRequireDefault(require("../../../accessibility/Toolbar"));

var _actions = require("../../../dispatcher/actions");

var _AccessibleTooltipButton = _interopRequireDefault(require("../elements/AccessibleTooltipButton"));

/*
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const RoomBreadcrumbTile = _ref => {
  let {
    room,
    onClick
  } = _ref;
  const [onFocus, isActive, ref] = (0, _RovingTabIndex.useRovingTabIndex)();
  return /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
    className: "mx_RoomBreadcrumbs_crumb",
    onClick: onClick,
    "aria-label": (0, _languageHandler._t)("Room %(name)s", {
      name: room.name
    }),
    title: room.name,
    tooltipClassName: "mx_RoomBreadcrumbs_Tooltip",
    onFocus: onFocus,
    inputRef: ref,
    tabIndex: isActive ? 0 : -1
  }, /*#__PURE__*/_react.default.createElement(_DecoratedRoomAvatar.default, {
    room: room,
    avatarSize: 32,
    displayBadge: true,
    forceCount: true,
    tooltipProps: {
      tabIndex: isActive ? 0 : -1
    }
  }));
};

class RoomBreadcrumbs extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "isMounted", true);
    (0, _defineProperty2.default)(this, "onBreadcrumbsUpdate", () => {
      if (!this.isMounted) return; // We need to trick the CSSTransition component into updating, which means we need to
      // tell it to not animate, then to animate a moment later. This causes two updates
      // which means two renders. The skipFirst change is so that our don't-animate state
      // doesn't show the breadcrumb we're about to reveal as it causes a visual jump/jerk.
      // The second update, on the next available tick, causes the "enter" animation to start
      // again and this time we want to show the newest breadcrumb because it'll be hidden
      // off screen for the animation.

      this.setState({
        doAnimation: false,
        skipFirst: true
      });
      setTimeout(() => this.setState({
        doAnimation: true,
        skipFirst: false
      }), 0);
    });
    (0, _defineProperty2.default)(this, "viewRoom", function (room, index) {
      let viaKeyboard = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      _dispatcher.default.dispatch({
        action: _actions.Action.ViewRoom,
        room_id: room.roomId,
        metricsTrigger: "WebHorizontalBreadcrumbs",
        metricsViaKeyboard: viaKeyboard
      });
    });
    this.state = {
      doAnimation: true,
      // technically we want animation on mount, but it won't be perfect
      skipFirst: false // render the thing, as boring as it is

    };

    _BreadcrumbsStore.BreadcrumbsStore.instance.on(_AsyncStore.UPDATE_EVENT, this.onBreadcrumbsUpdate);
  }

  componentWillUnmount() {
    this.isMounted = false;

    _BreadcrumbsStore.BreadcrumbsStore.instance.off(_AsyncStore.UPDATE_EVENT, this.onBreadcrumbsUpdate);
  }

  render() {
    const tiles = _BreadcrumbsStore.BreadcrumbsStore.instance.rooms.map((r, i) => /*#__PURE__*/_react.default.createElement(RoomBreadcrumbTile, {
      key: r.roomId,
      room: r,
      onClick: ev => this.viewRoom(r, i, ev.type !== "click")
    }));

    if (tiles.length > 0) {
      // NOTE: The CSSTransition timeout MUST match the timeout in our CSS!
      return /*#__PURE__*/_react.default.createElement(_reactTransitionGroup.CSSTransition, {
        appear: true,
        in: this.state.doAnimation,
        timeout: 640,
        classNames: "mx_RoomBreadcrumbs"
      }, /*#__PURE__*/_react.default.createElement(_Toolbar.default, {
        className: "mx_RoomBreadcrumbs",
        "aria-label": (0, _languageHandler._t)("Recently visited rooms")
      }, tiles.slice(this.state.skipFirst ? 1 : 0)));
    } else {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_RoomBreadcrumbs"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_RoomBreadcrumbs_placeholder"
      }, (0, _languageHandler._t)("No recently visited rooms")));
    }
  }

}

exports.default = RoomBreadcrumbs;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,