"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _RoomContext = _interopRequireWildcard(require("../../../contexts/RoomContext"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _DateSeparator = _interopRequireDefault(require("../messages/DateSeparator"));

var _EventTile = _interopRequireDefault(require("./EventTile"));

var _MessagePanel = require("../../structures/MessagePanel");

var _DateUtils = require("../../../DateUtils");

var _LegacyCallEventGrouper = require("../../structures/LegacyCallEventGrouper");

var _EventTileFactory = require("../../../events/EventTileFactory");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2015 OpenMarket Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class SearchResultTile extends _react.default.Component {
  // A map of <callId, LegacyCallEventGrouper>
  constructor(props, context) {
    super(props, context);
    (0, _defineProperty2.default)(this, "context", void 0);
    (0, _defineProperty2.default)(this, "callEventGroupers", new Map());
    this.buildLegacyCallEventGroupers(this.props.searchResult.context.getTimeline());
  }

  buildLegacyCallEventGroupers(events) {
    this.callEventGroupers = (0, _LegacyCallEventGrouper.buildLegacyCallEventGroupers)(this.callEventGroupers, events);
  }

  render() {
    const result = this.props.searchResult;
    const resultEvent = result.context.getEvent();
    const eventId = resultEvent.getId();
    const ts1 = resultEvent.getTs();
    const ret = [/*#__PURE__*/_react.default.createElement(_DateSeparator.default, {
      key: ts1 + "-search",
      roomId: resultEvent.getRoomId(),
      ts: ts1
    })];

    const layout = _SettingsStore.default.getValue("layout");

    const isTwelveHour = _SettingsStore.default.getValue("showTwelveHourTimestamps");

    const alwaysShowTimestamps = _SettingsStore.default.getValue("alwaysShowTimestamps");

    const threadsEnabled = _SettingsStore.default.getValue("feature_thread");

    const timeline = result.context.getTimeline();

    for (let j = 0; j < timeline.length; j++) {
      const mxEv = timeline[j];
      let highlights;
      const contextual = j != result.context.getOurEventIndex();

      if (!contextual) {
        highlights = this.props.searchHighlights;
      }

      if ((0, _EventTileFactory.haveRendererForEvent)(mxEv, this.context?.showHiddenEvents)) {
        // do we need a date separator since the last event?
        const prevEv = timeline[j - 1]; // is this a continuation of the previous message?

        const continuation = prevEv && !(0, _DateUtils.wantsDateSeparator)(prevEv.getDate(), mxEv.getDate()) && (0, _MessagePanel.shouldFormContinuation)(prevEv, mxEv, this.context?.showHiddenEvents, threadsEnabled, _RoomContext.TimelineRenderingType.Search);
        let lastInSection = true;
        const nextEv = timeline[j + 1];

        if (nextEv) {
          const willWantDateSeparator = (0, _DateUtils.wantsDateSeparator)(mxEv.getDate(), nextEv.getDate());
          lastInSection = willWantDateSeparator || mxEv.getSender() !== nextEv.getSender() || !(0, _MessagePanel.shouldFormContinuation)(mxEv, nextEv, this.context?.showHiddenEvents, threadsEnabled, _RoomContext.TimelineRenderingType.Search);
        }

        ret.push( /*#__PURE__*/_react.default.createElement(_EventTile.default, {
          key: `${eventId}+${j}`,
          mxEvent: mxEv,
          layout: layout,
          contextual: contextual,
          highlights: highlights,
          permalinkCreator: this.props.permalinkCreator,
          highlightLink: this.props.resultLink,
          onHeightChanged: this.props.onHeightChanged,
          isTwelveHour: isTwelveHour,
          alwaysShowTimestamps: alwaysShowTimestamps,
          lastInSection: lastInSection,
          continuation: continuation,
          callEventGrouper: this.callEventGroupers.get(mxEv.getContent().call_id)
        }));
      }
    }

    return /*#__PURE__*/_react.default.createElement("li", {
      "data-scroll-tokens": eventId
    }, /*#__PURE__*/_react.default.createElement("ol", null, ret));
  }

}

exports.default = SearchResultTile;
(0, _defineProperty2.default)(SearchResultTile, "contextType", _RoomContext.default);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,