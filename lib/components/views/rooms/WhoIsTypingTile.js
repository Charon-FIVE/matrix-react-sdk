"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _room = require("matrix-js-sdk/src/models/room");

var _roomMember = require("matrix-js-sdk/src/models/room-member");

var WhoIsTyping = _interopRequireWildcard(require("../../../WhoIsTyping"));

var _Timer = _interopRequireDefault(require("../../../utils/Timer"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _MemberAvatar = _interopRequireDefault(require("../avatars/MemberAvatar"));

var _strings = require("../../../utils/strings");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2017, 2018 New Vector Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class WhoIsTypingTile extends _react.default.Component {
  constructor() {
    super(...arguments);
    (0, _defineProperty2.default)(this, "state", {
      usersTyping: WhoIsTyping.usersTypingApartFromMe(this.props.room),
      delayedStopTypingTimers: {}
    });
    (0, _defineProperty2.default)(this, "isVisible", () => {
      return WhoIsTypingTile.isVisible(this.state);
    });
    (0, _defineProperty2.default)(this, "onRoomTimeline", (event, room) => {
      if (room?.roomId === this.props.room.roomId) {
        const userId = event.getSender(); // remove user from usersTyping

        const usersTyping = this.state.usersTyping.filter(m => m.userId !== userId);

        if (usersTyping.length !== this.state.usersTyping.length) {
          this.setState({
            usersTyping
          });
        } // abort timer if any


        this.abortUserTimer(userId);
      }
    });
    (0, _defineProperty2.default)(this, "onRoomMemberTyping", () => {
      const usersTyping = WhoIsTyping.usersTypingApartFromMeAndIgnored(this.props.room);
      this.setState({
        delayedStopTypingTimers: this.updateDelayedStopTypingTimers(usersTyping),
        usersTyping
      });
    });
  }

  componentDidMount() {
    _MatrixClientPeg.MatrixClientPeg.get().on(_roomMember.RoomMemberEvent.Typing, this.onRoomMemberTyping);

    _MatrixClientPeg.MatrixClientPeg.get().on(_room.RoomEvent.Timeline, this.onRoomTimeline);
  }

  componentDidUpdate(_, prevState) {
    const wasVisible = WhoIsTypingTile.isVisible(prevState);
    const isVisible = WhoIsTypingTile.isVisible(this.state);

    if (this.props.onShown && !wasVisible && isVisible) {
      this.props.onShown();
    } else if (this.props.onHidden && wasVisible && !isVisible) {
      this.props.onHidden();
    }
  }

  componentWillUnmount() {
    // we may have entirely lost our client as we're logging out before clicking login on the guest bar...
    const client = _MatrixClientPeg.MatrixClientPeg.get();

    if (client) {
      client.removeListener(_roomMember.RoomMemberEvent.Typing, this.onRoomMemberTyping);
      client.removeListener(_room.RoomEvent.Timeline, this.onRoomTimeline);
    }

    Object.values(this.state.delayedStopTypingTimers).forEach(t => t.abort());
  }

  static isVisible(state) {
    return state.usersTyping.length !== 0 || Object.keys(state.delayedStopTypingTimers).length !== 0;
  }

  updateDelayedStopTypingTimers(usersTyping) {
    const usersThatStoppedTyping = this.state.usersTyping.filter(a => {
      return !usersTyping.some(b => a.userId === b.userId);
    });
    const usersThatStartedTyping = usersTyping.filter(a => {
      return !this.state.usersTyping.some(b => a.userId === b.userId);
    }); // abort all the timers for the users that started typing again

    usersThatStartedTyping.forEach(m => {
      const timer = this.state.delayedStopTypingTimers[m.userId];

      if (timer) {
        timer.abort();
      }
    }); // prepare new delayedStopTypingTimers object to update state with

    let delayedStopTypingTimers = Object.assign({}, this.state.delayedStopTypingTimers); // remove members that started typing again

    delayedStopTypingTimers = usersThatStartedTyping.reduce((delayedStopTypingTimers, m) => {
      delete delayedStopTypingTimers[m.userId];
      return delayedStopTypingTimers;
    }, delayedStopTypingTimers); // start timer for members that stopped typing

    delayedStopTypingTimers = usersThatStoppedTyping.reduce((delayedStopTypingTimers, m) => {
      if (!delayedStopTypingTimers[m.userId]) {
        const timer = new _Timer.default(5000);
        delayedStopTypingTimers[m.userId] = timer;
        timer.start();
        timer.finished().then(() => this.removeUserTimer(m.userId), // on elapsed
        () => {
          /* aborted */
        });
      }

      return delayedStopTypingTimers;
    }, delayedStopTypingTimers);
    return delayedStopTypingTimers;
  }

  abortUserTimer(userId) {
    const timer = this.state.delayedStopTypingTimers[userId];

    if (timer) {
      timer.abort();
      this.removeUserTimer(userId);
    }
  }

  removeUserTimer(userId) {
    const timer = this.state.delayedStopTypingTimers[userId];

    if (timer) {
      const delayedStopTypingTimers = Object.assign({}, this.state.delayedStopTypingTimers);
      delete delayedStopTypingTimers[userId];
      this.setState({
        delayedStopTypingTimers
      });
    }
  }

  renderTypingIndicatorAvatars(users, limit) {
    let othersCount = 0;

    if (users.length > limit) {
      othersCount = users.length - limit + 1;
      users = users.slice(0, limit - 1);
    }

    const avatars = users.map(u => {
      return /*#__PURE__*/_react.default.createElement(_MemberAvatar.default, {
        key: u.userId,
        member: u,
        width: 24,
        height: 24,
        resizeMethod: "crop",
        viewUserOnClick: true,
        "aria-live": "off"
      });
    });

    if (othersCount > 0) {
      avatars.push( /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_WhoIsTypingTile_remainingAvatarPlaceholder",
        key: "others"
      }, "+", othersCount));
    }

    return avatars;
  }

  render() {
    let usersTyping = this.state.usersTyping;
    const stoppedUsersOnTimer = Object.keys(this.state.delayedStopTypingTimers).map(userId => this.props.room.getMember(userId)); // append the users that have been reported not typing anymore
    // but have a timeout timer running so they can disappear
    // when a message comes in

    usersTyping = usersTyping.concat(stoppedUsersOnTimer); // sort them so the typing members don't change order when
    // moved to delayedStopTypingTimers

    usersTyping.sort((a, b) => (0, _strings.compare)(a.name, b.name));
    const typingString = WhoIsTyping.whoIsTypingString(usersTyping, this.props.whoIsTypingLimit);

    if (!typingString) {
      return null;
    }

    return /*#__PURE__*/_react.default.createElement("li", {
      className: "mx_WhoIsTypingTile",
      "aria-atomic": "true"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_WhoIsTypingTile_avatars"
    }, this.renderTypingIndicatorAvatars(usersTyping, this.props.whoIsTypingLimit)), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_WhoIsTypingTile_label"
    }, typingString));
  }

}

exports.default = WhoIsTypingTile;
(0, _defineProperty2.default)(WhoIsTypingTile, "defaultProps", {
  whoIsTypingLimit: 3
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJXaG9Jc1R5cGluZ1RpbGUiLCJSZWFjdCIsIkNvbXBvbmVudCIsInVzZXJzVHlwaW5nIiwiV2hvSXNUeXBpbmciLCJ1c2Vyc1R5cGluZ0FwYXJ0RnJvbU1lIiwicHJvcHMiLCJyb29tIiwiZGVsYXllZFN0b3BUeXBpbmdUaW1lcnMiLCJpc1Zpc2libGUiLCJzdGF0ZSIsImV2ZW50Iiwicm9vbUlkIiwidXNlcklkIiwiZ2V0U2VuZGVyIiwiZmlsdGVyIiwibSIsImxlbmd0aCIsInNldFN0YXRlIiwiYWJvcnRVc2VyVGltZXIiLCJ1c2Vyc1R5cGluZ0FwYXJ0RnJvbU1lQW5kSWdub3JlZCIsInVwZGF0ZURlbGF5ZWRTdG9wVHlwaW5nVGltZXJzIiwiY29tcG9uZW50RGlkTW91bnQiLCJNYXRyaXhDbGllbnRQZWciLCJnZXQiLCJvbiIsIlJvb21NZW1iZXJFdmVudCIsIlR5cGluZyIsIm9uUm9vbU1lbWJlclR5cGluZyIsIlJvb21FdmVudCIsIlRpbWVsaW5lIiwib25Sb29tVGltZWxpbmUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJfIiwicHJldlN0YXRlIiwid2FzVmlzaWJsZSIsIm9uU2hvd24iLCJvbkhpZGRlbiIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiY2xpZW50IiwicmVtb3ZlTGlzdGVuZXIiLCJPYmplY3QiLCJ2YWx1ZXMiLCJmb3JFYWNoIiwidCIsImFib3J0Iiwia2V5cyIsInVzZXJzVGhhdFN0b3BwZWRUeXBpbmciLCJhIiwic29tZSIsImIiLCJ1c2Vyc1RoYXRTdGFydGVkVHlwaW5nIiwidGltZXIiLCJhc3NpZ24iLCJyZWR1Y2UiLCJUaW1lciIsInN0YXJ0IiwiZmluaXNoZWQiLCJ0aGVuIiwicmVtb3ZlVXNlclRpbWVyIiwicmVuZGVyVHlwaW5nSW5kaWNhdG9yQXZhdGFycyIsInVzZXJzIiwibGltaXQiLCJvdGhlcnNDb3VudCIsInNsaWNlIiwiYXZhdGFycyIsIm1hcCIsInUiLCJwdXNoIiwicmVuZGVyIiwic3RvcHBlZFVzZXJzT25UaW1lciIsImdldE1lbWJlciIsImNvbmNhdCIsInNvcnQiLCJjb21wYXJlIiwibmFtZSIsInR5cGluZ1N0cmluZyIsIndob0lzVHlwaW5nU3RyaW5nIiwid2hvSXNUeXBpbmdMaW1pdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL3Jvb21zL1dob0lzVHlwaW5nVGlsZS50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE1LCAyMDE2IE9wZW5NYXJrZXQgTHRkXG5Db3B5cmlnaHQgMjAxNywgMjAxOCBOZXcgVmVjdG9yIEx0ZFxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSb29tLCBSb29tRXZlbnQgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbW9kZWxzL3Jvb21cIjtcbmltcG9ydCB7IFJvb21NZW1iZXIsIFJvb21NZW1iZXJFdmVudCB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9tb2RlbHMvcm9vbS1tZW1iZXJcIjtcbmltcG9ydCB7IE1hdHJpeEV2ZW50IH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL21vZGVscy9ldmVudFwiO1xuXG5pbXBvcnQgKiBhcyBXaG9Jc1R5cGluZyBmcm9tICcuLi8uLi8uLi9XaG9Jc1R5cGluZyc7XG5pbXBvcnQgVGltZXIgZnJvbSAnLi4vLi4vLi4vdXRpbHMvVGltZXInO1xuaW1wb3J0IHsgTWF0cml4Q2xpZW50UGVnIH0gZnJvbSAnLi4vLi4vLi4vTWF0cml4Q2xpZW50UGVnJztcbmltcG9ydCBNZW1iZXJBdmF0YXIgZnJvbSAnLi4vYXZhdGFycy9NZW1iZXJBdmF0YXInO1xuaW1wb3J0IHsgY29tcGFyZSB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9zdHJpbmdzXCI7XG5cbmludGVyZmFjZSBJUHJvcHMge1xuICAgIC8vIHRoZSByb29tIHRoaXMgc3RhdHVzYmFyIGlzIHJlcHJlc2VudGluZy5cbiAgICByb29tOiBSb29tO1xuICAgIG9uU2hvd24/OiAoKSA9PiB2b2lkO1xuICAgIG9uSGlkZGVuPzogKCkgPT4gdm9pZDtcbiAgICAvLyBOdW1iZXIgb2YgbmFtZXMgdG8gZGlzcGxheSBpbiB0eXBpbmcgaW5kaWNhdGlvbi4gRS5nLiBzZXQgdG8gMywgd2lsbFxuICAgIC8vIHJlc3VsdCBpbiBcIlgsIFksIFogYW5kIDEwMCBvdGhlcnMgYXJlIHR5cGluZy5cIlxuICAgIHdob0lzVHlwaW5nTGltaXQ6IG51bWJlcjtcbn1cblxuaW50ZXJmYWNlIElTdGF0ZSB7XG4gICAgdXNlcnNUeXBpbmc6IFJvb21NZW1iZXJbXTtcbiAgICAvLyBhIG1hcCB3aXRoIHVzZXJpZCA9PiBUaW1lciB0byBkZWxheVxuICAgIC8vIGhpZGluZyB0aGUgXCJ4IGlzIHR5cGluZ1wiIG1lc3NhZ2UgZm9yIGFcbiAgICAvLyB1c2VyIHNvIGhpZGluZyBpdCBjYW4gY29pbmNpZGVcbiAgICAvLyB3aXRoIHRoZSBzZW50IG1lc3NhZ2UgYnkgdGhlIG90aGVyIHNpZGVcbiAgICAvLyByZXN1bHRpbmcgaW4gbGVzcyB0aW1lbGluZSBqdW1waW5lc3NcbiAgICBkZWxheWVkU3RvcFR5cGluZ1RpbWVyczogUmVjb3JkPHN0cmluZywgVGltZXI+O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXaG9Jc1R5cGluZ1RpbGUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzLCBJU3RhdGU+IHtcbiAgICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgICAgICB3aG9Jc1R5cGluZ0xpbWl0OiAzLFxuICAgIH07XG5cbiAgICBzdGF0ZSA9IHtcbiAgICAgICAgdXNlcnNUeXBpbmc6IFdob0lzVHlwaW5nLnVzZXJzVHlwaW5nQXBhcnRGcm9tTWUodGhpcy5wcm9wcy5yb29tKSxcbiAgICAgICAgZGVsYXllZFN0b3BUeXBpbmdUaW1lcnM6IHt9LFxuICAgIH07XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgTWF0cml4Q2xpZW50UGVnLmdldCgpLm9uKFJvb21NZW1iZXJFdmVudC5UeXBpbmcsIHRoaXMub25Sb29tTWVtYmVyVHlwaW5nKTtcbiAgICAgICAgTWF0cml4Q2xpZW50UGVnLmdldCgpLm9uKFJvb21FdmVudC5UaW1lbGluZSwgdGhpcy5vblJvb21UaW1lbGluZSk7XG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkVXBkYXRlKF8sIHByZXZTdGF0ZSkge1xuICAgICAgICBjb25zdCB3YXNWaXNpYmxlID0gV2hvSXNUeXBpbmdUaWxlLmlzVmlzaWJsZShwcmV2U3RhdGUpO1xuICAgICAgICBjb25zdCBpc1Zpc2libGUgPSBXaG9Jc1R5cGluZ1RpbGUuaXNWaXNpYmxlKHRoaXMuc3RhdGUpO1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5vblNob3duICYmICF3YXNWaXNpYmxlICYmIGlzVmlzaWJsZSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5vblNob3duKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5vbkhpZGRlbiAmJiB3YXNWaXNpYmxlICYmICFpc1Zpc2libGUpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25IaWRkZW4oKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICAvLyB3ZSBtYXkgaGF2ZSBlbnRpcmVseSBsb3N0IG91ciBjbGllbnQgYXMgd2UncmUgbG9nZ2luZyBvdXQgYmVmb3JlIGNsaWNraW5nIGxvZ2luIG9uIHRoZSBndWVzdCBiYXIuLi5cbiAgICAgICAgY29uc3QgY2xpZW50ID0gTWF0cml4Q2xpZW50UGVnLmdldCgpO1xuICAgICAgICBpZiAoY2xpZW50KSB7XG4gICAgICAgICAgICBjbGllbnQucmVtb3ZlTGlzdGVuZXIoUm9vbU1lbWJlckV2ZW50LlR5cGluZywgdGhpcy5vblJvb21NZW1iZXJUeXBpbmcpO1xuICAgICAgICAgICAgY2xpZW50LnJlbW92ZUxpc3RlbmVyKFJvb21FdmVudC5UaW1lbGluZSwgdGhpcy5vblJvb21UaW1lbGluZSk7XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LnZhbHVlcyh0aGlzLnN0YXRlLmRlbGF5ZWRTdG9wVHlwaW5nVGltZXJzKS5mb3JFYWNoKCh0KSA9PiAodCBhcyBUaW1lcikuYWJvcnQoKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgaXNWaXNpYmxlKHN0YXRlOiBJU3RhdGUpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlLnVzZXJzVHlwaW5nLmxlbmd0aCAhPT0gMCB8fCBPYmplY3Qua2V5cyhzdGF0ZS5kZWxheWVkU3RvcFR5cGluZ1RpbWVycykubGVuZ3RoICE9PSAwO1xuICAgIH1cblxuICAgIHB1YmxpYyBpc1Zpc2libGUgPSAoKTogYm9vbGVhbiA9PiB7XG4gICAgICAgIHJldHVybiBXaG9Jc1R5cGluZ1RpbGUuaXNWaXNpYmxlKHRoaXMuc3RhdGUpO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uUm9vbVRpbWVsaW5lID0gKGV2ZW50OiBNYXRyaXhFdmVudCwgcm9vbTogUm9vbSB8IG51bGwpOiB2b2lkID0+IHtcbiAgICAgICAgaWYgKHJvb20/LnJvb21JZCA9PT0gdGhpcy5wcm9wcy5yb29tLnJvb21JZCkge1xuICAgICAgICAgICAgY29uc3QgdXNlcklkID0gZXZlbnQuZ2V0U2VuZGVyKCk7XG4gICAgICAgICAgICAvLyByZW1vdmUgdXNlciBmcm9tIHVzZXJzVHlwaW5nXG4gICAgICAgICAgICBjb25zdCB1c2Vyc1R5cGluZyA9IHRoaXMuc3RhdGUudXNlcnNUeXBpbmcuZmlsdGVyKChtKSA9PiBtLnVzZXJJZCAhPT0gdXNlcklkKTtcbiAgICAgICAgICAgIGlmICh1c2Vyc1R5cGluZy5sZW5ndGggIT09IHRoaXMuc3RhdGUudXNlcnNUeXBpbmcubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHVzZXJzVHlwaW5nIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYWJvcnQgdGltZXIgaWYgYW55XG4gICAgICAgICAgICB0aGlzLmFib3J0VXNlclRpbWVyKHVzZXJJZCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBvblJvb21NZW1iZXJUeXBpbmcgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgIGNvbnN0IHVzZXJzVHlwaW5nID0gV2hvSXNUeXBpbmcudXNlcnNUeXBpbmdBcGFydEZyb21NZUFuZElnbm9yZWQodGhpcy5wcm9wcy5yb29tKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBkZWxheWVkU3RvcFR5cGluZ1RpbWVyczogdGhpcy51cGRhdGVEZWxheWVkU3RvcFR5cGluZ1RpbWVycyh1c2Vyc1R5cGluZyksXG4gICAgICAgICAgICB1c2Vyc1R5cGluZyxcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgdXBkYXRlRGVsYXllZFN0b3BUeXBpbmdUaW1lcnModXNlcnNUeXBpbmc6IFJvb21NZW1iZXJbXSk6IFJlY29yZDxzdHJpbmcsIFRpbWVyPiB7XG4gICAgICAgIGNvbnN0IHVzZXJzVGhhdFN0b3BwZWRUeXBpbmcgPSB0aGlzLnN0YXRlLnVzZXJzVHlwaW5nLmZpbHRlcigoYSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICF1c2Vyc1R5cGluZy5zb21lKChiKSA9PiBhLnVzZXJJZCA9PT0gYi51c2VySWQpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgdXNlcnNUaGF0U3RhcnRlZFR5cGluZyA9IHVzZXJzVHlwaW5nLmZpbHRlcigoYSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICF0aGlzLnN0YXRlLnVzZXJzVHlwaW5nLnNvbWUoKGIpID0+IGEudXNlcklkID09PSBiLnVzZXJJZCk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBhYm9ydCBhbGwgdGhlIHRpbWVycyBmb3IgdGhlIHVzZXJzIHRoYXQgc3RhcnRlZCB0eXBpbmcgYWdhaW5cbiAgICAgICAgdXNlcnNUaGF0U3RhcnRlZFR5cGluZy5mb3JFYWNoKChtKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0aW1lciA9IHRoaXMuc3RhdGUuZGVsYXllZFN0b3BUeXBpbmdUaW1lcnNbbS51c2VySWRdO1xuICAgICAgICAgICAgaWYgKHRpbWVyKSB7XG4gICAgICAgICAgICAgICAgdGltZXIuYWJvcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIHByZXBhcmUgbmV3IGRlbGF5ZWRTdG9wVHlwaW5nVGltZXJzIG9iamVjdCB0byB1cGRhdGUgc3RhdGUgd2l0aFxuICAgICAgICBsZXQgZGVsYXllZFN0b3BUeXBpbmdUaW1lcnMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnN0YXRlLmRlbGF5ZWRTdG9wVHlwaW5nVGltZXJzKTtcbiAgICAgICAgLy8gcmVtb3ZlIG1lbWJlcnMgdGhhdCBzdGFydGVkIHR5cGluZyBhZ2FpblxuICAgICAgICBkZWxheWVkU3RvcFR5cGluZ1RpbWVycyA9IHVzZXJzVGhhdFN0YXJ0ZWRUeXBpbmcucmVkdWNlKChkZWxheWVkU3RvcFR5cGluZ1RpbWVycywgbSkgPT4ge1xuICAgICAgICAgICAgZGVsZXRlIGRlbGF5ZWRTdG9wVHlwaW5nVGltZXJzW20udXNlcklkXTtcbiAgICAgICAgICAgIHJldHVybiBkZWxheWVkU3RvcFR5cGluZ1RpbWVycztcbiAgICAgICAgfSwgZGVsYXllZFN0b3BUeXBpbmdUaW1lcnMpO1xuICAgICAgICAvLyBzdGFydCB0aW1lciBmb3IgbWVtYmVycyB0aGF0IHN0b3BwZWQgdHlwaW5nXG4gICAgICAgIGRlbGF5ZWRTdG9wVHlwaW5nVGltZXJzID0gdXNlcnNUaGF0U3RvcHBlZFR5cGluZy5yZWR1Y2UoKGRlbGF5ZWRTdG9wVHlwaW5nVGltZXJzLCBtKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWRlbGF5ZWRTdG9wVHlwaW5nVGltZXJzW20udXNlcklkXSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVyID0gbmV3IFRpbWVyKDUwMDApO1xuICAgICAgICAgICAgICAgIGRlbGF5ZWRTdG9wVHlwaW5nVGltZXJzW20udXNlcklkXSA9IHRpbWVyO1xuICAgICAgICAgICAgICAgIHRpbWVyLnN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgdGltZXIuZmluaXNoZWQoKS50aGVuKFxuICAgICAgICAgICAgICAgICAgICAoKSA9PiB0aGlzLnJlbW92ZVVzZXJUaW1lcihtLnVzZXJJZCksIC8vIG9uIGVsYXBzZWRcbiAgICAgICAgICAgICAgICAgICAgKCkgPT4gey8qIGFib3J0ZWQgKi99LFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGVsYXllZFN0b3BUeXBpbmdUaW1lcnM7XG4gICAgICAgIH0sIGRlbGF5ZWRTdG9wVHlwaW5nVGltZXJzKTtcblxuICAgICAgICByZXR1cm4gZGVsYXllZFN0b3BUeXBpbmdUaW1lcnM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhYm9ydFVzZXJUaW1lcih1c2VySWQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBjb25zdCB0aW1lciA9IHRoaXMuc3RhdGUuZGVsYXllZFN0b3BUeXBpbmdUaW1lcnNbdXNlcklkXTtcbiAgICAgICAgaWYgKHRpbWVyKSB7XG4gICAgICAgICAgICB0aW1lci5hYm9ydCgpO1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVVc2VyVGltZXIodXNlcklkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgcmVtb3ZlVXNlclRpbWVyKHVzZXJJZDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHRpbWVyID0gdGhpcy5zdGF0ZS5kZWxheWVkU3RvcFR5cGluZ1RpbWVyc1t1c2VySWRdO1xuICAgICAgICBpZiAodGltZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlbGF5ZWRTdG9wVHlwaW5nVGltZXJzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5zdGF0ZS5kZWxheWVkU3RvcFR5cGluZ1RpbWVycyk7XG4gICAgICAgICAgICBkZWxldGUgZGVsYXllZFN0b3BUeXBpbmdUaW1lcnNbdXNlcklkXTtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBkZWxheWVkU3RvcFR5cGluZ1RpbWVycyB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyVHlwaW5nSW5kaWNhdG9yQXZhdGFycyh1c2VyczogUm9vbU1lbWJlcltdLCBsaW1pdDogbnVtYmVyKTogSlNYLkVsZW1lbnRbXSB7XG4gICAgICAgIGxldCBvdGhlcnNDb3VudCA9IDA7XG4gICAgICAgIGlmICh1c2Vycy5sZW5ndGggPiBsaW1pdCkge1xuICAgICAgICAgICAgb3RoZXJzQ291bnQgPSB1c2Vycy5sZW5ndGggLSBsaW1pdCArIDE7XG4gICAgICAgICAgICB1c2VycyA9IHVzZXJzLnNsaWNlKDAsIGxpbWl0IC0gMSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBhdmF0YXJzID0gdXNlcnMubWFwKCh1KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxNZW1iZXJBdmF0YXJcbiAgICAgICAgICAgICAgICAgICAga2V5PXt1LnVzZXJJZH1cbiAgICAgICAgICAgICAgICAgICAgbWVtYmVyPXt1fVxuICAgICAgICAgICAgICAgICAgICB3aWR0aD17MjR9XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodD17MjR9XG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZU1ldGhvZD1cImNyb3BcIlxuICAgICAgICAgICAgICAgICAgICB2aWV3VXNlck9uQ2xpY2s9e3RydWV9XG4gICAgICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT1cIm9mZlwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChvdGhlcnNDb3VudCA+IDApIHtcbiAgICAgICAgICAgIGF2YXRhcnMucHVzaChcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJteF9XaG9Jc1R5cGluZ1RpbGVfcmVtYWluaW5nQXZhdGFyUGxhY2Vob2xkZXJcIiBrZXk9XCJvdGhlcnNcIj5cbiAgICAgICAgICAgICAgICAgICAgK3sgb3RoZXJzQ291bnQgfVxuICAgICAgICAgICAgICAgIDwvc3Bhbj4sXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGF2YXRhcnM7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBsZXQgdXNlcnNUeXBpbmcgPSB0aGlzLnN0YXRlLnVzZXJzVHlwaW5nO1xuICAgICAgICBjb25zdCBzdG9wcGVkVXNlcnNPblRpbWVyID0gT2JqZWN0LmtleXModGhpcy5zdGF0ZS5kZWxheWVkU3RvcFR5cGluZ1RpbWVycylcbiAgICAgICAgICAgIC5tYXAoKHVzZXJJZCkgPT4gdGhpcy5wcm9wcy5yb29tLmdldE1lbWJlcih1c2VySWQpKTtcbiAgICAgICAgLy8gYXBwZW5kIHRoZSB1c2VycyB0aGF0IGhhdmUgYmVlbiByZXBvcnRlZCBub3QgdHlwaW5nIGFueW1vcmVcbiAgICAgICAgLy8gYnV0IGhhdmUgYSB0aW1lb3V0IHRpbWVyIHJ1bm5pbmcgc28gdGhleSBjYW4gZGlzYXBwZWFyXG4gICAgICAgIC8vIHdoZW4gYSBtZXNzYWdlIGNvbWVzIGluXG4gICAgICAgIHVzZXJzVHlwaW5nID0gdXNlcnNUeXBpbmcuY29uY2F0KHN0b3BwZWRVc2Vyc09uVGltZXIpO1xuICAgICAgICAvLyBzb3J0IHRoZW0gc28gdGhlIHR5cGluZyBtZW1iZXJzIGRvbid0IGNoYW5nZSBvcmRlciB3aGVuXG4gICAgICAgIC8vIG1vdmVkIHRvIGRlbGF5ZWRTdG9wVHlwaW5nVGltZXJzXG4gICAgICAgIHVzZXJzVHlwaW5nLnNvcnQoKGEsIGIpID0+IGNvbXBhcmUoYS5uYW1lLCBiLm5hbWUpKTtcblxuICAgICAgICBjb25zdCB0eXBpbmdTdHJpbmcgPSBXaG9Jc1R5cGluZy53aG9Jc1R5cGluZ1N0cmluZyhcbiAgICAgICAgICAgIHVzZXJzVHlwaW5nLFxuICAgICAgICAgICAgdGhpcy5wcm9wcy53aG9Jc1R5cGluZ0xpbWl0LFxuICAgICAgICApO1xuICAgICAgICBpZiAoIXR5cGluZ1N0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIm14X1dob0lzVHlwaW5nVGlsZVwiIGFyaWEtYXRvbWljPVwidHJ1ZVwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfV2hvSXNUeXBpbmdUaWxlX2F2YXRhcnNcIj5cbiAgICAgICAgICAgICAgICAgICAgeyB0aGlzLnJlbmRlclR5cGluZ0luZGljYXRvckF2YXRhcnModXNlcnNUeXBpbmcsIHRoaXMucHJvcHMud2hvSXNUeXBpbmdMaW1pdCkgfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfV2hvSXNUeXBpbmdUaWxlX2xhYmVsXCI+XG4gICAgICAgICAgICAgICAgICAgIHsgdHlwaW5nU3RyaW5nIH1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICk7XG4gICAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWlCQTs7QUFDQTs7QUFDQTs7QUFHQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7O0FBMUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBaUNlLE1BQU1BLGVBQU4sU0FBOEJDLGNBQUEsQ0FBTUMsU0FBcEMsQ0FBOEQ7RUFBQTtJQUFBO0lBQUEsNkNBS2pFO01BQ0pDLFdBQVcsRUFBRUMsV0FBVyxDQUFDQyxzQkFBWixDQUFtQyxLQUFLQyxLQUFMLENBQVdDLElBQTlDLENBRFQ7TUFFSkMsdUJBQXVCLEVBQUU7SUFGckIsQ0FMaUU7SUFBQSxpREF1Q3RELE1BQWU7TUFDOUIsT0FBT1IsZUFBZSxDQUFDUyxTQUFoQixDQUEwQixLQUFLQyxLQUEvQixDQUFQO0lBQ0gsQ0F6Q3dFO0lBQUEsc0RBMkNoRCxDQUFDQyxLQUFELEVBQXFCSixJQUFyQixLQUFpRDtNQUN0RSxJQUFJQSxJQUFJLEVBQUVLLE1BQU4sS0FBaUIsS0FBS04sS0FBTCxDQUFXQyxJQUFYLENBQWdCSyxNQUFyQyxFQUE2QztRQUN6QyxNQUFNQyxNQUFNLEdBQUdGLEtBQUssQ0FBQ0csU0FBTixFQUFmLENBRHlDLENBRXpDOztRQUNBLE1BQU1YLFdBQVcsR0FBRyxLQUFLTyxLQUFMLENBQVdQLFdBQVgsQ0FBdUJZLE1BQXZCLENBQStCQyxDQUFELElBQU9BLENBQUMsQ0FBQ0gsTUFBRixLQUFhQSxNQUFsRCxDQUFwQjs7UUFDQSxJQUFJVixXQUFXLENBQUNjLE1B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