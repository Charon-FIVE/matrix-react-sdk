"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RoomTileCallSummary = void 0;

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _languageHandler = require("../../../languageHandler");

var _useCall = require("../../../hooks/useCall");

var _Call = require("../../../models/Call");

/*
Copyright 2022 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const RoomTileCallSummary = _ref => {
  let {
    call
  } = _ref;
  const connectionState = (0, _useCall.useConnectionState)(call);
  const participants = (0, _useCall.useParticipants)(call);
  let text;
  let active;

  switch (connectionState) {
    case _Call.ConnectionState.Disconnected:
      text = (0, _languageHandler._t)("Video");
      active = false;
      break;

    case _Call.ConnectionState.Connecting:
      text = (0, _languageHandler._t)("Joining…");
      active = true;
      break;

    case _Call.ConnectionState.Connected:
    case _Call.ConnectionState.Disconnecting:
      text = (0, _languageHandler._t)("Joined");
      active = true;
      break;
  }

  return /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_RoomTileCallSummary"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: (0, _classnames.default)("mx_RoomTileCallSummary_text", {
      "mx_RoomTileCallSummary_text_active": active
    })
  }, text), participants.size ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, " · ", /*#__PURE__*/_react.default.createElement("span", {
    className: "mx_RoomTileCallSummary_participants",
    "aria-label": (0, _languageHandler._t)("%(count)s participants", {
      count: participants.size
    })
  }, participants.size)) : null);
};

exports.RoomTileCallSummary = RoomTileCallSummary;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSb29tVGlsZUNhbGxTdW1tYXJ5IiwiY2FsbCIsImNvbm5lY3Rpb25TdGF0ZSIsInVzZUNvbm5lY3Rpb25TdGF0ZSIsInBhcnRpY2lwYW50cyIsInVzZVBhcnRpY2lwYW50cyIsInRleHQiLCJhY3RpdmUiLCJDb25uZWN0aW9uU3RhdGUiLCJEaXNjb25uZWN0ZWQiLCJfdCIsIkNvbm5lY3RpbmciLCJDb25uZWN0ZWQiLCJEaXNjb25uZWN0aW5nIiwiY2xhc3NOYW1lcyIsInNpemUiLCJjb3VudCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL3Jvb21zL1Jvb21UaWxlQ2FsbFN1bW1hcnkudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMiBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCwgeyBGQyB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSBcImNsYXNzbmFtZXNcIjtcblxuaW1wb3J0IHR5cGUgeyBDYWxsIH0gZnJvbSBcIi4uLy4uLy4uL21vZGVscy9DYWxsXCI7XG5pbXBvcnQgeyBfdCwgVHJhbnNsYXRlZFN0cmluZyB9IGZyb20gXCIuLi8uLi8uLi9sYW5ndWFnZUhhbmRsZXJcIjtcbmltcG9ydCB7IHVzZUNvbm5lY3Rpb25TdGF0ZSwgdXNlUGFydGljaXBhbnRzIH0gZnJvbSBcIi4uLy4uLy4uL2hvb2tzL3VzZUNhbGxcIjtcbmltcG9ydCB7IENvbm5lY3Rpb25TdGF0ZSB9IGZyb20gXCIuLi8uLi8uLi9tb2RlbHMvQ2FsbFwiO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICAgIGNhbGw6IENhbGw7XG59XG5cbmV4cG9ydCBjb25zdCBSb29tVGlsZUNhbGxTdW1tYXJ5OiBGQzxQcm9wcz4gPSAoeyBjYWxsIH0pID0+IHtcbiAgICBjb25zdCBjb25uZWN0aW9uU3RhdGUgPSB1c2VDb25uZWN0aW9uU3RhdGUoY2FsbCk7XG4gICAgY29uc3QgcGFydGljaXBhbnRzID0gdXNlUGFydGljaXBhbnRzKGNhbGwpO1xuXG4gICAgbGV0IHRleHQ6IFRyYW5zbGF0ZWRTdHJpbmc7XG4gICAgbGV0IGFjdGl2ZTogYm9vbGVhbjtcblxuICAgIHN3aXRjaCAoY29ubmVjdGlvblN0YXRlKSB7XG4gICAgICAgIGNhc2UgQ29ubmVjdGlvblN0YXRlLkRpc2Nvbm5lY3RlZDpcbiAgICAgICAgICAgIHRleHQgPSBfdChcIlZpZGVvXCIpO1xuICAgICAgICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBDb25uZWN0aW9uU3RhdGUuQ29ubmVjdGluZzpcbiAgICAgICAgICAgIHRleHQgPSBfdChcIkpvaW5pbmfigKZcIik7XG4gICAgICAgICAgICBhY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQ29ubmVjdGlvblN0YXRlLkNvbm5lY3RlZDpcbiAgICAgICAgY2FzZSBDb25uZWN0aW9uU3RhdGUuRGlzY29ubmVjdGluZzpcbiAgICAgICAgICAgIHRleHQgPSBfdChcIkpvaW5lZFwiKTtcbiAgICAgICAgICAgIGFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICByZXR1cm4gPHNwYW4gY2xhc3NOYW1lPVwibXhfUm9vbVRpbGVDYWxsU3VtbWFyeVwiPlxuICAgICAgICA8c3BhblxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKFxuICAgICAgICAgICAgICAgIFwibXhfUm9vbVRpbGVDYWxsU3VtbWFyeV90ZXh0XCIsXG4gICAgICAgICAgICAgICAgeyBcIm14X1Jvb21UaWxlQ2FsbFN1bW1hcnlfdGV4dF9hY3RpdmVcIjogYWN0aXZlIH0sXG4gICAgICAgICAgICApfVxuICAgICAgICA+XG4gICAgICAgICAgICB7IHRleHQgfVxuICAgICAgICA8L3NwYW4+XG4gICAgICAgIHsgcGFydGljaXBhbnRzLnNpemUgPyA8PlxuICAgICAgICAgICAgeyBcIiDCtyBcIiB9XG4gICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm14X1Jvb21UaWxlQ2FsbFN1bW1hcnlfcGFydGljaXBhbnRzXCJcbiAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPXtfdChcIiUoY291bnQpcyBwYXJ0aWNpcGFudHNcIiwgeyBjb3VudDogcGFydGljaXBhbnRzLnNpemUgfSl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgeyBwYXJ0aWNpcGFudHMuc2l6ZSB9XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvPiA6IG51bGwgfVxuICAgIDwvc3Bhbj47XG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFnQkE7O0FBQ0E7O0FBR0E7O0FBQ0E7O0FBQ0E7O0FBdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWNPLE1BQU1BLG1CQUE4QixHQUFHLFFBQWM7RUFBQSxJQUFiO0lBQUVDO0VBQUYsQ0FBYTtFQUN4RCxNQUFNQyxlQUFlLEdBQUcsSUFBQUMsMkJBQUEsRUFBbUJGLElBQW5CLENBQXhCO0VBQ0EsTUFBTUcsWUFBWSxHQUFHLElBQUFDLHdCQUFBLEVBQWdCSixJQUFoQixDQUFyQjtFQUVBLElBQUlLLElBQUo7RUFDQSxJQUFJQyxNQUFKOztFQUVBLFFBQVFMLGVBQVI7SUFDSSxLQUFLTSxxQkFBQSxDQUFnQkMsWUFBckI7TUFDSUgsSUFBSSxHQUFHLElBQUFJLG1CQUFBLEVBQUcsT0FBSCxDQUFQO01BQ0FILE1BQU0sR0FBRyxLQUFUO01BQ0E7O0lBQ0osS0FBS0MscUJBQUEsQ0FBZ0JHLFVBQXJCO01BQ0lMLElBQUksR0FBRyxJQUFBSSxtQkFBQSxFQUFHLFVBQUgsQ0FBUDtNQUNBSCxNQUFNLEdBQUcsSUFBVDtNQUNBOztJQUNKLEtBQUtDLHFCQUFBLENBQWdCSSxTQUFyQjtJQUNBLEtBQUtKLHFCQUFBLENBQWdCSyxhQUFyQjtNQUNJUCxJQUFJLEdBQUcsSUFBQUksbUJBQUEsRUFBRyxRQUFILENBQVA7TUFDQUgsTUFBTSxHQUFHLElBQVQ7TUFDQTtFQWJSOztFQWdCQSxvQkFBTztJQUFNLFNBQVMsRUFBQztFQUFoQixnQkFDSDtJQUNJLFNBQVMsRUFBRSxJQUFBTyxtQkFBQSxFQUNQLDZCQURPLEVBRVA7TUFBRSxzQ0FBc0NQO0lBQXhDLENBRk87RUFEZixHQU1NRCxJQU5OLENBREcsRUFTREYsWUFBWSxDQUFDVyxJQUFiLGdCQUFvQiw0REFDaEIsS0FEZ0IsZUFFbEI7SUFDSSxTQUFTLEVBQUMscUNBRGQ7SUFFSSxjQUFZLElBQUFMLG1CQUFBLEVBQUcsd0JBQUgsRUFBNkI7TUFBRU0sS0FBSyxFQUFFWixZQUFZLENBQUNXO0lBQXRCLENBQTdCO0VBRmhCLEdBSU1YLFlBQVksQ0FBQ1csSUFKbkIsQ0FGa0IsQ0FBcEIsR0FRSSxJQWpCSCxDQUFQO0FBbUJILENBMUNNIn0=