"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _VerificationRequest = require("matrix-js-sdk/src/crypto/verification/request/VerificationRequest");

var _event = require("matrix-js-sdk/src/@types/event");

var _crypto = require("matrix-js-sdk/src/crypto");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _languageHandler = require("../../../languageHandler");

var _KeyVerificationStateObserver = require("../../../utils/KeyVerificationStateObserver");

var _EventTileBubble = _interopRequireDefault(require("./EventTileBubble"));

/*
Copyright 2019, 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class MKeyVerificationConclusion extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onRequestChanged", () => {
      this.forceUpdate();
    });
    (0, _defineProperty2.default)(this, "onTrustChanged", userId => {
      const {
        mxEvent
      } = this.props;
      const request = mxEvent.verificationRequest;

      if (!request || request.otherUserId !== userId) {
        return;
      }

      this.forceUpdate();
    });
  }

  componentDidMount() {
    const request = this.props.mxEvent.verificationRequest;

    if (request) {
      request.on(_VerificationRequest.VerificationRequestEvent.Change, this.onRequestChanged);
    }

    _MatrixClientPeg.MatrixClientPeg.get().on(_crypto.CryptoEvent.UserTrustStatusChanged, this.onTrustChanged);
  }

  componentWillUnmount() {
    const request = this.props.mxEvent.verificationRequest;

    if (request) {
      request.off(_VerificationRequest.VerificationRequestEvent.Change, this.onRequestChanged);
    }

    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    if (cli) {
      cli.removeListener(_crypto.CryptoEvent.UserTrustStatusChanged, this.onTrustChanged);
    }
  }

  static shouldRender(mxEvent, request) {
    // normally should not happen
    if (!request) {
      return false;
    } // .cancel event that was sent after the verification finished, ignore


    if (mxEvent.getType() === _event.EventType.KeyVerificationCancel && !request.cancelled) {
      return false;
    } // .done event that was sent after the verification cancelled, ignore


    if (mxEvent.getType() === _event.EventType.KeyVerificationDone && !request.done) {
      return false;
    } // request hasn't concluded yet


    if (request.pending) {
      return false;
    } // User isn't actually verified


    if (!_MatrixClientPeg.MatrixClientPeg.get().checkUserTrust(request.otherUserId).isCrossSigningVerified()) {
      return false;
    }

    return true;
  }

  render() {
    const {
      mxEvent
    } = this.props;
    const request = mxEvent.verificationRequest;

    if (!MKeyVerificationConclusion.shouldRender(mxEvent, request)) {
      return null;
    }

    const client = _MatrixClientPeg.MatrixClientPeg.get();

    const myUserId = client.getUserId();
    let title;

    if (request.done) {
      title = (0, _languageHandler._t)("You verified %(name)s", {
        name: (0, _KeyVerificationStateObserver.getNameForEventRoom)(request.otherUserId, mxEvent.getRoomId())
      });
    } else if (request.cancelled) {
      const userId = request.cancellingUserId;

      if (userId === myUserId) {
        title = (0, _languageHandler._t)("You cancelled verifying %(name)s", {
          name: (0, _KeyVerificationStateObserver.getNameForEventRoom)(request.otherUserId, mxEvent.getRoomId())
        });
      } else {
        title = (0, _languageHandler._t)("%(name)s cancelled verifying", {
          name: (0, _KeyVerificationStateObserver.getNameForEventRoom)(userId, mxEvent.getRoomId())
        });
      }
    }

    if (title) {
      const classes = (0, _classnames.default)("mx_cryptoEvent mx_cryptoEvent_icon", {
        mx_cryptoEvent_icon_verified: request.done
      });
      return /*#__PURE__*/_react.default.createElement(_EventTileBubble.default, {
        className: classes,
        title: title,
        subtitle: (0, _KeyVerificationStateObserver.userLabelForEventRoom)(request.otherUserId, mxEvent.getRoomId()),
        timestamp: this.props.timestamp
      });
    }

    return null;
  }

}

exports.default = MKeyVerificationConclusion;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,