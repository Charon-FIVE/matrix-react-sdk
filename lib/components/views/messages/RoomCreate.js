"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _actions = require("../../../dispatcher/actions");

var _Permalinks = require("../../../utils/permalinks/Permalinks");

var _languageHandler = require("../../../languageHandler");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _EventTileBubble = _interopRequireDefault(require("./EventTileBubble"));

/*
Copyright 2018 New Vector Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class RoomCreate extends _react.default.Component {
  constructor() {
    super(...arguments);
    (0, _defineProperty2.default)(this, "onLinkClicked", e => {
      e.preventDefault();
      const predecessor = this.props.mxEvent.getContent()['predecessor'];

      _dispatcher.default.dispatch({
        action: _actions.Action.ViewRoom,
        event_id: predecessor['event_id'],
        highlighted: true,
        room_id: predecessor['room_id'],
        metricsTrigger: "Predecessor",
        metricsViaKeyboard: e.type !== "click"
      });
    });
  }

  render() {
    const predecessor = this.props.mxEvent.getContent()['predecessor'];

    if (predecessor === undefined) {
      return /*#__PURE__*/_react.default.createElement("div", null); // We should never have been instantiated in this case
    }

    const prevRoom = _MatrixClientPeg.MatrixClientPeg.get().getRoom(predecessor['room_id']);

    const permalinkCreator = new _Permalinks.RoomPermalinkCreator(prevRoom, predecessor['room_id']);
    permalinkCreator.load();
    const predecessorPermalink = permalinkCreator.forEvent(predecessor['event_id']);

    const link = /*#__PURE__*/_react.default.createElement("a", {
      href: predecessorPermalink,
      onClick: this.onLinkClicked
    }, (0, _languageHandler._t)("Click here to see older messages."));

    return /*#__PURE__*/_react.default.createElement(_EventTileBubble.default, {
      className: "mx_CreateEvent",
      title: (0, _languageHandler._t)("This room is a continuation of another conversation."),
      subtitle: link,
      timestamp: this.props.timestamp
    });
  }

}

exports.default = RoomCreate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSb29tQ3JlYXRlIiwiUmVhY3QiLCJDb21wb25lbnQiLCJlIiwicHJldmVudERlZmF1bHQiLCJwcmVkZWNlc3NvciIsInByb3BzIiwibXhFdmVudCIsImdldENvbnRlbnQiLCJkaXMiLCJkaXNwYXRjaCIsImFjdGlvbiIsIkFjdGlvbiIsIlZpZXdSb29tIiwiZXZlbnRfaWQiLCJoaWdobGlnaHRlZCIsInJvb21faWQiLCJtZXRyaWNzVHJpZ2dlciIsIm1ldHJpY3NWaWFLZXlib2FyZCIsInR5cGUiLCJyZW5kZXIiLCJ1bmRlZmluZWQiLCJwcmV2Um9vbSIsIk1hdHJpeENsaWVudFBlZyIsImdldCIsImdldFJvb20iLCJwZXJtYWxpbmtDcmVhdG9yIiwiUm9vbVBlcm1hbGlua0NyZWF0b3IiLCJsb2FkIiwicHJlZGVjZXNzb3JQZXJtYWxpbmsiLCJmb3JFdmVudCIsImxpbmsiLCJvbkxpbmtDbGlja2VkIiwiX3QiLCJ0aW1lc3RhbXAiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy92aWV3cy9tZXNzYWdlcy9Sb29tQ3JlYXRlLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMTggTmV3IFZlY3RvciBMdGRcbkNvcHlyaWdodCAyMDE5IFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE1hdHJpeEV2ZW50IH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL21vZGVscy9ldmVudFwiO1xuXG5pbXBvcnQgZGlzIGZyb20gJy4uLy4uLy4uL2Rpc3BhdGNoZXIvZGlzcGF0Y2hlcic7XG5pbXBvcnQgeyBBY3Rpb24gfSBmcm9tICcuLi8uLi8uLi9kaXNwYXRjaGVyL2FjdGlvbnMnO1xuaW1wb3J0IHsgUm9vbVBlcm1hbGlua0NyZWF0b3IgfSBmcm9tICcuLi8uLi8uLi91dGlscy9wZXJtYWxpbmtzL1Blcm1hbGlua3MnO1xuaW1wb3J0IHsgX3QgfSBmcm9tICcuLi8uLi8uLi9sYW5ndWFnZUhhbmRsZXInO1xuaW1wb3J0IHsgTWF0cml4Q2xpZW50UGVnIH0gZnJvbSAnLi4vLi4vLi4vTWF0cml4Q2xpZW50UGVnJztcbmltcG9ydCBFdmVudFRpbGVCdWJibGUgZnJvbSBcIi4vRXZlbnRUaWxlQnViYmxlXCI7XG5pbXBvcnQgeyBWaWV3Um9vbVBheWxvYWQgfSBmcm9tIFwiLi4vLi4vLi4vZGlzcGF0Y2hlci9wYXlsb2Fkcy9WaWV3Um9vbVBheWxvYWRcIjtcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgLyogdGhlIE1hdHJpeEV2ZW50IHRvIHNob3cgKi9cbiAgICBteEV2ZW50OiBNYXRyaXhFdmVudDtcbiAgICB0aW1lc3RhbXA/OiBKU1guRWxlbWVudDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm9vbUNyZWF0ZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxJUHJvcHM+IHtcbiAgICBwcml2YXRlIG9uTGlua0NsaWNrZWQgPSAoZTogUmVhY3QuTW91c2VFdmVudCk6IHZvaWQgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgY29uc3QgcHJlZGVjZXNzb3IgPSB0aGlzLnByb3BzLm14RXZlbnQuZ2V0Q29udGVudCgpWydwcmVkZWNlc3NvciddO1xuXG4gICAgICAgIGRpcy5kaXNwYXRjaDxWaWV3Um9vbVBheWxvYWQ+KHtcbiAgICAgICAgICAgIGFjdGlvbjogQWN0aW9uLlZpZXdSb29tLFxuICAgICAgICAgICAgZXZlbnRfaWQ6IHByZWRlY2Vzc29yWydldmVudF9pZCddLFxuICAgICAgICAgICAgaGlnaGxpZ2h0ZWQ6IHRydWUsXG4gICAgICAgICAgICByb29tX2lkOiBwcmVkZWNlc3Nvclsncm9vbV9pZCddLFxuICAgICAgICAgICAgbWV0cmljc1RyaWdnZXI6IFwiUHJlZGVjZXNzb3JcIixcbiAgICAgICAgICAgIG1ldHJpY3NWaWFLZXlib2FyZDogZS50eXBlICE9PSBcImNsaWNrXCIsXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwdWJsaWMgcmVuZGVyKCk6IEpTWC5FbGVtZW50IHtcbiAgICAgICAgY29uc3QgcHJlZGVjZXNzb3IgPSB0aGlzLnByb3BzLm14RXZlbnQuZ2V0Q29udGVudCgpWydwcmVkZWNlc3NvciddO1xuICAgICAgICBpZiAocHJlZGVjZXNzb3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIDxkaXYgLz47IC8vIFdlIHNob3VsZCBuZXZlciBoYXZlIGJlZW4gaW5zdGFudGlhdGVkIGluIHRoaXMgY2FzZVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByZXZSb29tID0gTWF0cml4Q2xpZW50UGVnLmdldCgpLmdldFJvb20ocHJlZGVjZXNzb3JbJ3Jvb21faWQnXSk7XG4gICAgICAgIGNvbnN0IHBlcm1hbGlua0NyZWF0b3IgPSBuZXcgUm9vbVBlcm1hbGlua0NyZWF0b3IocHJldlJvb20sIHByZWRlY2Vzc29yWydyb29tX2lkJ10pO1xuICAgICAgICBwZXJtYWxpbmtDcmVhdG9yLmxvYWQoKTtcbiAgICAgICAgY29uc3QgcHJlZGVjZXNzb3JQZXJtYWxpbmsgPSBwZXJtYWxpbmtDcmVhdG9yLmZvckV2ZW50KHByZWRlY2Vzc29yWydldmVudF9pZCddKTtcbiAgICAgICAgY29uc3QgbGluayA9IChcbiAgICAgICAgICAgIDxhIGhyZWY9e3ByZWRlY2Vzc29yUGVybWFsaW5rfSBvbkNsaWNrPXt0aGlzLm9uTGlua0NsaWNrZWR9PlxuICAgICAgICAgICAgICAgIHsgX3QoXCJDbGljayBoZXJlIHRvIHNlZSBvbGRlciBtZXNzYWdlcy5cIikgfVxuICAgICAgICAgICAgPC9hPlxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiA8RXZlbnRUaWxlQnViYmxlXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJteF9DcmVhdGVFdmVudFwiXG4gICAgICAgICAgICB0aXRsZT17X3QoXCJUaGlzIHJvb20gaXMgYSBjb250aW51YXRpb24gb2YgYW5vdGhlciBjb252ZXJzYXRpb24uXCIpfVxuICAgICAgICAgICAgc3VidGl0bGU9e2xpbmt9XG4gICAgICAgICAgICB0aW1lc3RhbXA9e3RoaXMucHJvcHMudGltZXN0YW1wfVxuICAgICAgICAvPjtcbiAgICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBaUJBOztBQUdBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQXpCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQW1CZSxNQUFNQSxVQUFOLFNBQXlCQyxjQUFBLENBQU1DLFNBQS9CLENBQWlEO0VBQUE7SUFBQTtJQUFBLHFEQUNuQ0MsQ0FBRCxJQUErQjtNQUNuREEsQ0FBQyxDQUFDQyxjQUFGO01BRUEsTUFBTUMsV0FBVyxHQUFHLEtBQUtDLEtBQUwsQ0FBV0MsT0FBWCxDQUFtQkMsVUFBbkIsR0FBZ0MsYUFBaEMsQ0FBcEI7O01BRUFDLG1CQUFBLENBQUlDLFFBQUosQ0FBOEI7UUFDMUJDLE1BQU0sRUFBRUMsZUFBQSxDQUFPQyxRQURXO1FBRTFCQyxRQUFRLEVBQUVULFdBQVcsQ0FBQyxVQUFELENBRks7UUFHMUJVLFdBQVcsRUFBRSxJQUhhO1FBSTFCQyxPQUFPLEVBQUVYLFdBQVcsQ0FBQyxTQUFELENBSk07UUFLMUJZLGNBQWMsRUFBRSxhQUxVO1FBTTFCQyxrQkFBa0IsRUFBRWYsQ0FBQyxDQUFDZ0IsSUFBRixLQUFXO01BTkwsQ0FBOUI7SUFRSCxDQWQyRDtFQUFBOztFQWdCckRDLE1BQU0sR0FBZ0I7SUFDekIsTUFBTWYsV0FBVyxHQUFHLEtBQUtDLEtBQUwsQ0FBV0MsT0FBWCxDQUFtQkMsVUFBbkIsR0FBZ0MsYUFBaEMsQ0FBcEI7O0lBQ0EsSUFBSUgsV0FBVyxLQUFLZ0IsU0FBcEIsRUFBK0I7TUFDM0Isb0JBQU8seUNBQVAsQ0FEMkIsQ0FDWDtJQUNuQjs7SUFDRCxNQUFNQyxRQUFRLEdBQUdDLGdDQUFBLENBQWdCQyxHQUFoQixHQUFzQkMsT0FBdEIsQ0FBOEJwQixXQUFXLENBQUMsU0FBRCxDQUF6QyxDQUFqQjs7SUFDQSxNQUFNcUIsZ0JBQWdCLEdBQUcsSUFBSUMsZ0NBQUosQ0FBeUJMLFFBQXpCLEVBQW1DakIsV0FBVyxDQUFDLFNBQUQsQ0FBOUMsQ0FBekI7SUFDQXFCLGdCQUFnQixDQUFDRSxJQUFqQjtJQUNBLE1BQU1DLG9CQUFvQixHQUFHSCxnQkFBZ0IsQ0FBQ0ksUUFBakIsQ0FBMEJ6QixXQUFXLENBQUMsVUFBRCxDQUFyQyxDQUE3Qjs7SUFDQSxNQUFNMEIsSUFBSSxnQkFDTjtNQUFHLElBQUksRUFBRUYsb0JBQVQ7TUFBK0IsT0FBTyxFQUFFLEtBQUtHO0lBQTdDLEdBQ00sSUFBQUMsbUJBQUEsRUFBRyxtQ0FBSCxDQUROLENBREo7O0lBTUEsb0JBQU8sNkJBQUMsd0JBQUQ7TUFDSCxTQUFTLEVBQUMsZ0JBRFA7TUFFSCxLQUFLLEVBQUUsSUFBQUEsbUJBQUEsRUFBRyxzREFBSCxDQUZKO01BR0gsUUFBUSxFQUFFRixJQUhQO01BSUgsU0FBUyxFQUFFLEtBQUt6QixLQUFMLENBQVc0QjtJQUpuQixFQUFQO0VBTUg7O0FBckMyRCJ9