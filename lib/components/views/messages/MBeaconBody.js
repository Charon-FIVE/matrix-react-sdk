"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _matrix = require("matrix-js-sdk/src/matrix");

var _randomstring = require("matrix-js-sdk/src/randomstring");

var _beacon = require("matrix-js-sdk/src/@types/beacon");

var _classnames = _interopRequireDefault(require("classnames"));

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _useEventEmitter = require("../../../hooks/useEventEmitter");

var _languageHandler = require("../../../languageHandler");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _beacon2 = require("../../../utils/beacon");

var _location = require("../../../utils/location");

var _displayStatus = require("../beacon/displayStatus");

var _BeaconStatus = _interopRequireDefault(require("../beacon/BeaconStatus"));

var _OwnBeaconStatus = _interopRequireDefault(require("../beacon/OwnBeaconStatus"));

var _Map = _interopRequireDefault(require("../location/Map"));

var _MapError = require("../location/MapError");

var _MapFallback = _interopRequireDefault(require("../location/MapFallback"));

var _SmartMarker = _interopRequireDefault(require("../location/SmartMarker"));

var _BeaconViewDialog = _interopRequireDefault(require("../beacon/BeaconViewDialog"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2022 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const useBeaconState = beaconInfoEvent => {
  const beacon = (0, _beacon2.useBeacon)(beaconInfoEvent);
  const isLive = (0, _useEventEmitter.useEventEmitterState)(beacon, _matrix.BeaconEvent.LivenessChange, () => beacon?.isLive);
  const latestLocationState = (0, _useEventEmitter.useEventEmitterState)(beacon, _matrix.BeaconEvent.LocationUpdate, () => beacon?.latestLocationState);

  if (!beacon) {
    return {};
  } // a beacon's starting timestamp can be in the future
  // (either from small deviations in system clock times, or on purpose from another client)
  // a beacon is only live between its start timestamp and expiry
  // detect when a beacon is waiting to become live
  // and display a loading state


  const waitingToStart = !!beacon && (0, _beacon2.isBeaconWaitingToStart)(beacon);
  const {
    description
  } = beacon.beaconInfo;
  return {
    beacon,
    description,
    isLive,
    waitingToStart,
    latestLocationState
  };
}; // multiple instances of same map might be in document
// eg thread and main timeline, reply
// maplibregl needs a unique id to attach the map instance to


const useUniqueId = eventId => {
  const [id, setId] = (0, _react.useState)(`${eventId}_${(0, _randomstring.randomString)(8)}`);
  (0, _react.useEffect)(() => {
    setId(`${eventId}_${(0, _randomstring.randomString)(8)}`);
  }, [eventId]);
  return id;
}; // remove related beacon locations on beacon redaction


const useHandleBeaconRedaction = (event, getRelationsForEvent, cli) => {
  const onBeforeBeaconInfoRedaction = (0, _react.useCallback)((_event, redactionEvent) => {
    const relations = getRelationsForEvent ? getRelationsForEvent(event.getId(), _matrix.RelationType.Reference, _beacon.M_BEACON.name) : undefined;
    relations?.getRelations()?.forEach(locationEvent => {
      cli.redactEvent(locationEvent.getRoomId(), locationEvent.getId(), undefined, redactionEvent.getContent());
    });
  }, [event, getRelationsForEvent, cli]);
  (0, _react.useEffect)(() => {
    event.addListener(_matrix.MatrixEventEvent.BeforeRedaction, onBeforeBeaconInfoRedaction);
    return () => {
      event.removeListener(_matrix.MatrixEventEvent.BeforeRedaction, onBeforeBeaconInfoRedaction);
    };
  }, [event, onBeforeBeaconInfoRedaction]);
};

const MBeaconBody = /*#__PURE__*/_react.default.forwardRef((_ref, ref) => {
  let {
    mxEvent,
    getRelationsForEvent
  } = _ref;
  const {
    beacon,
    isLive,
    latestLocationState,
    waitingToStart
  } = useBeaconState(mxEvent);
  const mapId = useUniqueId(mxEvent.getId());
  const matrixClient = (0, _react.useContext)(_MatrixClientContext.default);
  const [error, setError] = (0, _react.useState)();
  const isMapDisplayError = error?.message === _location.LocationShareError.MapStyleUrlNotConfigured || error?.message === _location.LocationShareError.MapStyleUrlNotReachable;
  const displayStatus = (0, _displayStatus.getBeaconDisplayStatus)(isLive, latestLocationState, // if we are unable to display maps because it is not configured for the server
  // don't display an error
  isMapDisplayError ? undefined : error, waitingToStart);
  const markerRoomMember = (0, _location.isSelfLocation)(mxEvent.getContent()) ? mxEvent.sender : undefined;
  const isOwnBeacon = beacon?.beaconInfoOwner === matrixClient.getUserId();
  useHandleBeaconRedaction(mxEvent, getRelationsForEvent, matrixClient);

  const onClick = () => {
    if (displayStatus !== _displayStatus.BeaconDisplayStatus.Active) {
      return;
    }

    _Modal.default.createDialog(_BeaconViewDialog.default, {
      roomId: mxEvent.getRoomId(),
      matrixClient,
      initialFocusedBeacon: beacon,
      isMapDisplayError
    }, "mx_BeaconViewDialog_wrapper", false, // isPriority
    true // isStatic
    );
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_MBeaconBody",
    ref: ref
  }, displayStatus === _displayStatus.BeaconDisplayStatus.Active && !isMapDisplayError ? /*#__PURE__*/_react.default.createElement(_Map.default, {
    id: mapId,
    centerGeoUri: latestLocationState.uri,
    onError: setError,
    onClick: onClick,
    className: "mx_MBeaconBody_map"
  }, _ref2 => {
    let {
      map
    } = _ref2;
    return /*#__PURE__*/_react.default.createElement(_SmartMarker.default, {
      map: map,
      id: `${mapId}-marker`,
      geoUri: latestLocationState.uri,
      roomMember: markerRoomMember,
      useMemberColor: true
    });
  }) : isMapDisplayError ? /*#__PURE__*/_react.default.createElement(_MapError.MapError, {
    error: error.message,
    onClick: onClick,
    className: (0, _classnames.default)('mx_MBeaconBody_mapError', // set interactive class when maximised map can be opened
    {
      'mx_MBeaconBody_mapErrorInteractive': displayStatus === _displayStatus.BeaconDisplayStatus.Active
    }),
    isMinimised: true
  }) : /*#__PURE__*/_react.default.createElement(_MapFallback.default, {
    isLoading: displayStatus === _displayStatus.BeaconDisplayStatus.Loading,
    className: "mx_MBeaconBody_map mx_MBeaconBody_mapFallback"
  }), isOwnBeacon ? /*#__PURE__*/_react.default.createElement(_OwnBeaconStatus.default, {
    className: "mx_MBeaconBody_chin",
    beacon: beacon,
    displayStatus: displayStatus,
    withIcon: true
  }) : /*#__PURE__*/_react.default.createElement(_BeaconStatus.default, {
    className: "mx_MBeaconBody_chin",
    beacon: beacon,
    displayStatus: displayStatus,
    label: (0, _languageHandler._t)('View live location'),
    withIcon: true
  }));
});

var _default = MBeaconBody;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,