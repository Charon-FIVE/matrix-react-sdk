"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _WidgetStore = _interopRequireDefault(require("../../../stores/WidgetStore"));

var _EventTileBubble = _interopRequireDefault(require("./EventTileBubble"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _WidgetLayoutStore = require("../../../stores/widgets/WidgetLayoutStore");

/*
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class MJitsiWidgetEvent extends _react.default.PureComponent {
  constructor(props) {
    super(props);
  }

  render() {
    const url = this.props.mxEvent.getContent()['url'];
    const prevUrl = this.props.mxEvent.getPrevContent()['url'];
    const senderName = this.props.mxEvent.sender?.name || this.props.mxEvent.getSender();

    const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(this.props.mxEvent.getRoomId());

    const widgetId = this.props.mxEvent.getStateKey();

    const widget = _WidgetStore.default.instance.getRoom(room.roomId, true).widgets.find(w => w.id === widgetId);

    let joinCopy = (0, _languageHandler._t)('Join the conference at the top of this room');

    if (widget && _WidgetLayoutStore.WidgetLayoutStore.instance.isInContainer(room, widget, _WidgetLayoutStore.Container.Right)) {
      joinCopy = (0, _languageHandler._t)('Join the conference from the room information card on the right');
    } else if (!widget) {
      joinCopy = null;
    }

    if (!url) {
      // removed
      return /*#__PURE__*/_react.default.createElement(_EventTileBubble.default, {
        className: "mx_MJitsiWidgetEvent",
        title: (0, _languageHandler._t)('Video conference ended by %(senderName)s', {
          senderName
        }),
        timestamp: this.props.timestamp
      });
    } else if (prevUrl) {
      // modified
      return /*#__PURE__*/_react.default.createElement(_EventTileBubble.default, {
        className: "mx_MJitsiWidgetEvent",
        title: (0, _languageHandler._t)('Video conference updated by %(senderName)s', {
          senderName
        }),
        subtitle: joinCopy,
        timestamp: this.props.timestamp
      });
    } else {
      // assume added
      return /*#__PURE__*/_react.default.createElement(_EventTileBubble.default, {
        className: "mx_MJitsiWidgetEvent",
        title: (0, _languageHandler._t)("Video conference started by %(senderName)s", {
          senderName
        }),
        subtitle: joinCopy,
        timestamp: this.props.timestamp
      });
    }
  }

}

exports.default = MJitsiWidgetEvent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNSml0c2lXaWRnZXRFdmVudCIsIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJyZW5kZXIiLCJ1cmwiLCJteEV2ZW50IiwiZ2V0Q29udGVudCIsInByZXZVcmwiLCJnZXRQcmV2Q29udGVudCIsInNlbmRlck5hbWUiLCJzZW5kZXIiLCJuYW1lIiwiZ2V0U2VuZGVyIiwicm9vbSIsIk1hdHJpeENsaWVudFBlZyIsImdldCIsImdldFJvb20iLCJnZXRSb29tSWQiLCJ3aWRnZXRJZCIsImdldFN0YXRlS2V5Iiwid2lkZ2V0IiwiV2lkZ2V0U3RvcmUiLCJpbnN0YW5jZSIsInJvb21JZCIsIndpZGdldHMiLCJmaW5kIiwidyIsImlkIiwiam9pbkNvcHkiLCJfdCIsIldpZGdldExheW91dFN0b3JlIiwiaXNJbkNvbnRhaW5lciIsIkNvbnRhaW5lciIsIlJpZ2h0IiwidGltZXN0YW1wIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvdmlld3MvbWVzc2FnZXMvTUppdHNpV2lkZ2V0RXZlbnQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMCBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBNYXRyaXhFdmVudCB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9tb2RlbHMvZXZlbnRcIjtcblxuaW1wb3J0IHsgX3QgfSBmcm9tIFwiLi4vLi4vLi4vbGFuZ3VhZ2VIYW5kbGVyXCI7XG5pbXBvcnQgV2lkZ2V0U3RvcmUgZnJvbSBcIi4uLy4uLy4uL3N0b3Jlcy9XaWRnZXRTdG9yZVwiO1xuaW1wb3J0IEV2ZW50VGlsZUJ1YmJsZSBmcm9tIFwiLi9FdmVudFRpbGVCdWJibGVcIjtcbmltcG9ydCB7IE1hdHJpeENsaWVudFBlZyB9IGZyb20gXCIuLi8uLi8uLi9NYXRyaXhDbGllbnRQZWdcIjtcbmltcG9ydCB7IENvbnRhaW5lciwgV2lkZ2V0TGF5b3V0U3RvcmUgfSBmcm9tIFwiLi4vLi4vLi4vc3RvcmVzL3dpZGdldHMvV2lkZ2V0TGF5b3V0U3RvcmVcIjtcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgbXhFdmVudDogTWF0cml4RXZlbnQ7XG4gICAgdGltZXN0YW1wPzogSlNYLkVsZW1lbnQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1KaXRzaVdpZGdldEV2ZW50IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxJUHJvcHM+IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB1cmwgPSB0aGlzLnByb3BzLm14RXZlbnQuZ2V0Q29udGVudCgpWyd1cmwnXTtcbiAgICAgICAgY29uc3QgcHJldlVybCA9IHRoaXMucHJvcHMubXhFdmVudC5nZXRQcmV2Q29udGVudCgpWyd1cmwnXTtcbiAgICAgICAgY29uc3Qgc2VuZGVyTmFtZSA9IHRoaXMucHJvcHMubXhFdmVudC5zZW5kZXI/Lm5hbWUgfHwgdGhpcy5wcm9wcy5teEV2ZW50LmdldFNlbmRlcigpO1xuICAgICAgICBjb25zdCByb29tID0gTWF0cml4Q2xpZW50UGVnLmdldCgpLmdldFJvb20odGhpcy5wcm9wcy5teEV2ZW50LmdldFJvb21JZCgpKTtcbiAgICAgICAgY29uc3Qgd2lkZ2V0SWQgPSB0aGlzLnByb3BzLm14RXZlbnQuZ2V0U3RhdGVLZXkoKTtcbiAgICAgICAgY29uc3Qgd2lkZ2V0ID0gV2lkZ2V0U3RvcmUuaW5zdGFuY2UuZ2V0Um9vbShyb29tLnJvb21JZCwgdHJ1ZSkud2lkZ2V0cy5maW5kKHcgPT4gdy5pZCA9PT0gd2lkZ2V0SWQpO1xuXG4gICAgICAgIGxldCBqb2luQ29weSA9IF90KCdKb2luIHRoZSBjb25mZXJlbmNlIGF0IHRoZSB0b3Agb2YgdGhpcyByb29tJyk7XG4gICAgICAgIGlmICh3aWRnZXQgJiYgV2lkZ2V0TGF5b3V0U3RvcmUuaW5zdGFuY2UuaXNJbkNvbnRhaW5lcihyb29tLCB3aWRnZXQsIENvbnRhaW5lci5SaWdodCkpIHtcbiAgICAgICAgICAgIGpvaW5Db3B5ID0gX3QoJ0pvaW4gdGhlIGNvbmZlcmVuY2UgZnJvbSB0aGUgcm9vbSBpbmZvcm1hdGlvbiBjYXJkIG9uIHRoZSByaWdodCcpO1xuICAgICAgICB9IGVsc2UgaWYgKCF3aWRnZXQpIHtcbiAgICAgICAgICAgIGpvaW5Db3B5ID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdXJsKSB7XG4gICAgICAgICAgICAvLyByZW1vdmVkXG4gICAgICAgICAgICByZXR1cm4gPEV2ZW50VGlsZUJ1YmJsZVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm14X01KaXRzaVdpZGdldEV2ZW50XCJcbiAgICAgICAgICAgICAgICB0aXRsZT17X3QoJ1ZpZGVvIGNvbmZlcmVuY2UgZW5kZWQgYnkgJShzZW5kZXJOYW1lKXMnLCB7IHNlbmRlck5hbWUgfSl9XG4gICAgICAgICAgICAgICAgdGltZXN0YW1wPXt0aGlzLnByb3BzLnRpbWVzdGFtcH1cbiAgICAgICAgICAgIC8+O1xuICAgICAgICB9IGVsc2UgaWYgKHByZXZVcmwpIHtcbiAgICAgICAgICAgIC8vIG1vZGlmaWVkXG4gICAgICAgICAgICByZXR1cm4gPEV2ZW50VGlsZUJ1YmJsZVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm14X01KaXRzaVdpZGdldEV2ZW50XCJcbiAgICAgICAgICAgICAgICB0aXRsZT17X3QoJ1ZpZGVvIGNvbmZlcmVuY2UgdXBkYXRlZCBieSAlKHNlbmRlck5hbWUpcycsIHsgc2VuZGVyTmFtZSB9KX1cbiAgICAgICAgICAgICAgICBzdWJ0aXRsZT17am9pbkNvcHl9XG4gICAgICAgICAgICAgICAgdGltZXN0YW1wPXt0aGlzLnByb3BzLnRpbWVzdGFtcH1cbiAgICAgICAgICAgIC8+O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gYXNzdW1lIGFkZGVkXG4gICAgICAgICAgICByZXR1cm4gPEV2ZW50VGlsZUJ1YmJsZVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm14X01KaXRzaVdpZGdldEV2ZW50XCJcbiAgICAgICAgICAgICAgICB0aXRsZT17X3QoXCJWaWRlbyBjb25mZXJlbmNlIHN0YXJ0ZWQgYnkgJShzZW5kZXJOYW1lKXNcIiwgeyBzZW5kZXJOYW1lIH0pfVxuICAgICAgICAgICAgICAgIHN1YnRpdGxlPXtqb2luQ29weX1cbiAgICAgICAgICAgICAgICB0aW1lc3RhbXA9e3RoaXMucHJvcHMudGltZXN0YW1wfVxuICAgICAgICAgICAgLz47XG4gICAgICAgIH1cbiAgICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztB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