"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _download = require("../../../../res/img/download.svg");

var _RovingTabIndex = require("../../../accessibility/RovingTabIndex");

var _Spinner = _interopRequireDefault(require("../elements/Spinner"));

var _languageHandler = require("../../../languageHandler");

var _FileDownloader = require("../../../utils/FileDownloader");

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class DownloadActionButton extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "downloader", new _FileDownloader.FileDownloader());
    (0, _defineProperty2.default)(this, "onDownloadClick", async () => {
      if (this.state.loading) return;

      if (this.props.mediaEventHelperGet().media.isEncrypted) {
        this.setState({
          tooltip: (0, _languageHandler._td)("Decrypting")
        });
      }

      this.setState({
        loading: true
      });

      if (this.state.blob) {
        // Cheat and trigger a download, again.
        return this.doDownload();
      }

      const blob = await this.props.mediaEventHelperGet().sourceBlob.value;
      this.setState({
        blob
      });
      await this.doDownload();
    });
    this.state = {
      loading: false,
      tooltip: (0, _languageHandler._td)("Downloading")
    };
  }

  async doDownload() {
    await this.downloader.download({
      blob: this.state.blob,
      name: this.props.mediaEventHelperGet().fileName
    });
    this.setState({
      loading: false
    });
  }

  render() {
    let spinner;

    if (this.state.loading) {
      spinner = /*#__PURE__*/_react.default.createElement(_Spinner.default, {
        w: 18,
        h: 18
      });
    }

    const classes = (0, _classnames.default)({
      'mx_MessageActionBar_iconButton': true,
      'mx_MessageActionBar_downloadButton': true,
      'mx_MessageActionBar_downloadSpinnerButton': !!spinner
    });
    return /*#__PURE__*/_react.default.createElement(_RovingTabIndex.RovingAccessibleTooltipButton, {
      className: classes,
      title: spinner ? (0, _languageHandler._t)(this.state.tooltip) : (0, _languageHandler._t)("Download"),
      onClick: this.onDownloadClick,
      disabled: !!spinner
    }, /*#__PURE__*/_react.default.createElement(_download.Icon, null), spinner);
  }

}

exports.default = DownloadActionButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEb3dubG9hZEFjdGlvbkJ1dHRvbiIsIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJGaWxlRG93bmxvYWRlciIsInN0YXRlIiwibG9hZGluZyIsIm1lZGlhRXZlbnRIZWxwZXJHZXQiLCJtZWRpYSIsImlzRW5jcnlwdGVkIiwic2V0U3RhdGUiLCJ0b29sdGlwIiwiX3RkIiwiYmxvYiIsImRvRG93bmxvYWQiLCJzb3VyY2VCbG9iIiwidmFsdWUiLCJkb3dubG9hZGVyIiwiZG93bmxvYWQiLCJuYW1lIiwiZmlsZU5hbWUiLCJyZW5kZXIiLCJzcGlubmVyIiwiY2xhc3NlcyIsImNsYXNzTmFtZXMiLCJfdCIsIm9uRG93bmxvYWRDbGljayJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL21lc3NhZ2VzL0Rvd25sb2FkQWN0aW9uQnV0dG9uLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMjEgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgeyBNYXRyaXhFdmVudCB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9tYXRyaXhcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gXCJjbGFzc25hbWVzXCI7XG5cbmltcG9ydCB7IEljb24gYXMgRG93bmxvYWRJY29uIH0gZnJvbSBcIi4uLy4uLy4uLy4uL3Jlcy9pbWcvZG93bmxvYWQuc3ZnXCI7XG5pbXBvcnQgeyBNZWRpYUV2ZW50SGVscGVyIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL01lZGlhRXZlbnRIZWxwZXJcIjtcbmltcG9ydCB7IFJvdmluZ0FjY2Vzc2libGVUb29sdGlwQnV0dG9uIH0gZnJvbSBcIi4uLy4uLy4uL2FjY2Vzc2liaWxpdHkvUm92aW5nVGFiSW5kZXhcIjtcbmltcG9ydCBTcGlubmVyIGZyb20gXCIuLi9lbGVtZW50cy9TcGlubmVyXCI7XG5pbXBvcnQgeyBfdCwgX3RkIH0gZnJvbSBcIi4uLy4uLy4uL2xhbmd1YWdlSGFuZGxlclwiO1xuaW1wb3J0IHsgRmlsZURvd25sb2FkZXIgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvRmlsZURvd25sb2FkZXJcIjtcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgbXhFdmVudDogTWF0cml4RXZlbnQ7XG5cbiAgICAvLyBYWFg6IEl0IGNhbiB0YWtlIGEgY3ljbGUgb3IgdHdvIGZvciB0aGUgTWVzc2FnZUFjdGlvbkJhciB0byBoYXZlIGFsbCB0aGUgcHJvcHMvc2V0dXBcbiAgICAvLyByZXF1aXJlZCB0byBnZXQgdXMgYSBNZWRpYUV2ZW50SGVscGVyLCBzbyB3ZSB1c2UgYSBnZXR0ZXIgZnVuY3Rpb24gaW5zdGVhZCB0byBwcm9kIGZvclxuICAgIC8vIG9uZS5cbiAgICBtZWRpYUV2ZW50SGVscGVyR2V0OiAoKSA9PiBNZWRpYUV2ZW50SGVscGVyO1xufVxuXG5pbnRlcmZhY2UgSVN0YXRlIHtcbiAgICBsb2FkaW5nOiBib29sZWFuO1xuICAgIGJsb2I/OiBCbG9iO1xuICAgIHRvb2x0aXA6IHN0cmluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRG93bmxvYWRBY3Rpb25CdXR0b24gZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PElQcm9wcywgSVN0YXRlPiB7XG4gICAgcHJpdmF0ZSBkb3dubG9hZGVyID0gbmV3IEZpbGVEb3dubG9hZGVyKCk7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IocHJvcHM6IElQcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgdG9vbHRpcDogX3RkKFwiRG93bmxvYWRpbmdcIiksXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkRvd25sb2FkQ2xpY2sgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmxvYWRpbmcpIHJldHVybjtcblxuICAgICAgICBpZiAodGhpcy5wcm9wcy5tZWRpYUV2ZW50SGVscGVyR2V0KCkubWVkaWEuaXNFbmNyeXB0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyB0b29sdGlwOiBfdGQoXCJEZWNyeXB0aW5nXCIpIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGxvYWRpbmc6IHRydWUgfSk7XG5cbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuYmxvYikge1xuICAgICAgICAgICAgLy8gQ2hlYXQgYW5kIHRyaWdnZXIgYSBkb3dubG9hZCwgYWdhaW4uXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kb0Rvd25sb2FkKCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBibG9iID0gYXdhaXQgdGhpcy5wcm9wcy5tZWRpYUV2ZW50SGVscGVyR2V0KCkuc291cmNlQmxvYi52YWx1ZTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGJsb2IgfSk7XG4gICAgICAgIGF3YWl0IHRoaXMuZG9Eb3dubG9hZCgpO1xuICAgIH07XG5cbiAgICBwcml2YXRlIGFzeW5jIGRvRG93bmxvYWQoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuZG93bmxvYWRlci5kb3dubG9hZCh7XG4gICAgICAgICAgICBibG9iOiB0aGlzLnN0YXRlLmJsb2IsXG4gICAgICAgICAgICBuYW1lOiB0aGlzLnByb3BzLm1lZGlhRXZlbnRIZWxwZXJHZXQoKS5maWxlTmFtZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBsb2FkaW5nOiBmYWxzZSB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVuZGVyKCkge1xuICAgICAgICBsZXQgc3Bpbm5lcjogSlNYLkVsZW1lbnQ7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmxvYWRpbmcpIHtcbiAgICAgICAgICAgIHNwaW5uZXIgPSA8U3Bpbm5lciB3PXsxOH0gaD17MTh9IC8+O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY2xhc3NlcyA9IGNsYXNzTmFtZXMoe1xuICAgICAgICAgICAgJ214X01lc3NhZ2VBY3Rpb25CYXJfaWNvbkJ1dHRvbic6IHRydWUsXG4gICAgICAgICAgICAnbXhfTWVzc2FnZUFjdGlvbkJhcl9kb3dubG9hZEJ1dHRvbic6IHRydWUsXG4gICAgICAgICAgICAnbXhfTWVzc2FnZUFjdGlvbkJhcl9kb3dubG9hZFNwaW5uZXJCdXR0b24nOiAhIXNwaW5uZXIsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiA8Um92aW5nQWNjZXNzaWJsZVRvb2x0aXBCdXR0b25cbiAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlc31cbiAgICAgICAgICAgIHRpdGxlPXtzcGlubmVyID8gX3QodGhpcy5zdGF0ZS50b29sdGlwKSA6IF90KFwiRG93bmxvYWRcIil9XG4gICAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9uRG93bmxvYWRDbGlja31cbiAgICAgICAgICAgIGRpc2FibGVkPXshIXNwaW5uZXJ9XG4gICAgICAgID5cbiAgICAgICAgICAgIDxEb3dubG9hZEljb24gLz5cbiAgICAgICAgICAgIHsgc3Bpbm5lciB9XG4gICAgICAgIDwvUm92aW5nQWNjZXNzaWJsZVRvb2x0aXBCdXR0b24+O1xuICAgIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFpQkE7O0FBQ0E7O0FBRUE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQTRCZSxNQUFNQSxvQkFBTixTQUFtQ0MsY0FBQSxDQUFNQyxhQUF6QyxDQUF1RTtFQUczRUMsV0FBVyxDQUFDQyxLQUFELEVBQWdCO0lBQzlCLE1BQU1BLEtBQU47SUFEOEIsa0RBRmIsSUFBSUMsOEJBQUosRUFFYTtJQUFBLHVEQVNSLFlBQVk7TUFDbEMsSUFBSSxLQUFLQyxLQUFMLENBQVdDLE9BQWYsRUFBd0I7O01BRXhCLElBQUksS0FBS0gsS0FBTCxDQUFXSSxtQkFBWCxHQUFpQ0MsS0FBakMsQ0FBdUNDLFdBQTNDLEVBQXdEO1FBQ3BELEtBQUtDLFFBQUwsQ0FBYztVQUFFQyxPQUFPLEVBQUUsSUFBQUMsb0JBQUEsRUFBSSxZQUFKO1FBQVgsQ0FBZDtNQUNIOztNQUVELEtBQUtGLFFBQUwsQ0FBYztRQUFFSixPQUFPLEVBQUU7TUFBWCxDQUFkOztNQUVBLElBQUksS0FBS0QsS0FBTCxDQUFXUSxJQUFmLEVBQXFCO1FBQ2pCO1FBQ0EsT0FBTyxLQUFLQyxVQUFMLEVBQVA7TUFDSDs7TUFFRCxNQUFNRCxJQUFJLEdBQUcsTUFBTSxLQUFLVixLQUFMLENBQVdJLG1CQUFYLEdBQWlDUSxVQUFqQyxDQUE0Q0MsS0FBL0Q7TUFDQSxLQUFLTixRQUFMLENBQWM7UUFBRUc7TUFBRixDQUFkO01BQ0EsTUFBTSxLQUFLQyxVQUFMLEVBQU47SUFDSCxDQTFCaUM7SUFHOUIsS0FBS1QsS0FBTCxHQUFhO01BQ1RDLE9BQU8sRUFBRSxLQURBO01BRVRLLE9BQU8sRUFBRSxJQUFBQyxvQkFBQSxFQUFJLGFBQUo7SUFGQSxDQUFiO0VBSUg7O0VBcUJ1QixNQUFWRSxVQUFVLEdBQUc7SUFDdkIsTUFBTSxLQUFLRyxVQUFMLENBQWdCQyxRQUFoQixDQUF5QjtNQUMzQkwsSUFBSSxFQUFFLEtBQUtSLEtBQUwsQ0FBV1EsSUFEVTtNQUUzQk0sSUFBSSxFQUFFLEtBQUtoQixLQUFMLENBQVdJLG1CQUFYLEdBQWlDYTtJQUZaLENBQXpCLENBQU47SUFJQSxLQUFLVixRQUFMLENBQWM7TUFBRUosT0FBTyxFQUFFO0lBQVgsQ0FBZDtFQUNIOztFQUVNZSxNQUFNLEdBQUc7SUFDWixJQUFJQyxPQUFKOztJQUNBLElBQUksS0FBS2pCLEtBQUwsQ0FBV0MsT0FBZixFQUF3QjtNQUNwQmdCLE9BQU8sZ0JBQUcsNkJBQUMsZ0JBQUQ7UUFBUyxDQUFDLEVBQUUsRUFBWjtRQUFnQixDQUFDLEVBQUU7TUFBbkIsRUFBVjtJQUNIOztJQUVELE1BQU1DLE9BQU8sR0FBRyxJQUFBQyxtQkFBQSxFQUFXO01BQ3ZCLGtDQUFrQyxJQURYO01BRXZCLHNDQUFzQyxJQUZmO01BR3ZCLDZDQUE2QyxDQUFDLENBQUNGO0lBSHhCLENBQVgsQ0FBaEI7SUFNQSxvQkFBTyw2QkFBQyw2Q0FBRDtNQUNILFNBQVMsRUFBRUMsT0FEUjtNQUVILEtBQUssRUFBRUQsT0FBTyxHQUFHLElBQUFHLG1CQUFBLEVBQUcsS0FBS3BCLEtBQUwsQ0FBV00sT0FBZCxDQUFILEdBQTRCLElBQUFjLG1CQUFBLEVBQUcsVUFBSCxDQUZ2QztNQUdILE9BQU8sRUFBRSxLQUFLQyxlQUhYO01BSUgsUUFBUSxFQUFFLENBQUMsQ0FBQ0o7SUFKVCxnQkFNSCw2QkFBQyxjQUFELE9BTkcsRUFPREEsT0FQQyxDQUFQO0VBU0g7O0FBNURpRiJ9