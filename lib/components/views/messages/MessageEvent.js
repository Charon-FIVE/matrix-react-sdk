"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _event = require("matrix-js-sdk/src/@types/event");

var _beacon = require("matrix-js-sdk/src/@types/beacon");

var _location = require("matrix-js-sdk/src/@types/location");

var _matrixEventsSdk = require("matrix-events-sdk");

var _event2 = require("matrix-js-sdk/src/models/event");

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _Mjolnir = require("../../../mjolnir/Mjolnir");

var _RedactedBody = _interopRequireDefault(require("./RedactedBody"));

var _UnknownBody = _interopRequireDefault(require("./UnknownBody"));

var _MediaEventHelper = require("../../../utils/MediaEventHelper");

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _TextualBody = _interopRequireDefault(require("./TextualBody"));

var _MImageBody = _interopRequireDefault(require("./MImageBody"));

var _MFileBody = _interopRequireDefault(require("./MFileBody"));

var _MVoiceOrAudioBody = _interopRequireDefault(require("./MVoiceOrAudioBody"));

var _MVideoBody = _interopRequireDefault(require("./MVideoBody"));

var _MStickerBody = _interopRequireDefault(require("./MStickerBody"));

var _MPollBody = _interopRequireDefault(require("./MPollBody"));

var _MLocationBody = _interopRequireDefault(require("./MLocationBody"));

var _MjolnirBody = _interopRequireDefault(require("./MjolnirBody"));

var _MBeaconBody = _interopRequireDefault(require("./MBeaconBody"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2015 - 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const baseBodyTypes = new Map([[_event.MsgType.Text, _TextualBody.default], [_event.MsgType.Notice, _TextualBody.default], [_event.MsgType.Emote, _TextualBody.default], [_event.MsgType.Image, _MImageBody.default], [_event.MsgType.File, _MFileBody.default], [_event.MsgType.Audio, _MVoiceOrAudioBody.default], [_event.MsgType.Video, _MVideoBody.default]]);
const baseEvTypes = new Map([[_event.EventType.Sticker, _MStickerBody.default], [_matrixEventsSdk.M_POLL_START.name, _MPollBody.default], [_matrixEventsSdk.M_POLL_START.altName, _MPollBody.default], [_beacon.M_BEACON_INFO.name, _MBeaconBody.default], [_beacon.M_BEACON_INFO.altName, _MBeaconBody.default]]);

class MessageEvent extends _react.default.Component {
  constructor(props, context) {
    super(props, context);
    (0, _defineProperty2.default)(this, "body", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "mediaHelper", void 0);
    (0, _defineProperty2.default)(this, "bodyTypes", new Map(baseBodyTypes.entries()));
    (0, _defineProperty2.default)(this, "evTypes", new Map(baseEvTypes.entries()));
    (0, _defineProperty2.default)(this, "context", void 0);
    (0, _defineProperty2.default)(this, "getEventTileOps", () => {
      return this.body.current?.getEventTileOps?.() || null;
    });
    (0, _defineProperty2.default)(this, "onDecrypted", () => {
      // Recheck MediaEventHelper eligibility as it can change when the event gets decrypted
      if (_MediaEventHelper.MediaEventHelper.isEligible(this.props.mxEvent)) {
        this.mediaHelper?.destroy();
        this.mediaHelper = new _MediaEventHelper.MediaEventHelper(this.props.mxEvent);
      }
    });
    (0, _defineProperty2.default)(this, "onTileUpdate", () => {
      this.forceUpdate();
    });

    if (_MediaEventHelper.MediaEventHelper.isEligible(this.props.mxEvent)) {
      this.mediaHelper = new _MediaEventHelper.MediaEventHelper(this.props.mxEvent);
    }

    this.updateComponentMaps();
  }

  componentDidMount() {
    this.props.mxEvent.addListener(_event2.MatrixEventEvent.Decrypted, this.onDecrypted);
  }

  componentWillUnmount() {
    this.props.mxEvent.removeListener(_event2.MatrixEventEvent.Decrypted, this.onDecrypted);
    this.mediaHelper?.destroy();
  }

  componentDidUpdate(prevProps) {
    if (this.props.mxEvent !== prevProps.mxEvent && _MediaEventHelper.MediaEventHelper.isEligible(this.props.mxEvent)) {
      this.mediaHelper?.destroy();
      this.mediaHelper = new _MediaEventHelper.MediaEventHelper(this.props.mxEvent);
    }

    this.updateComponentMaps();
  }

  updateComponentMaps() {
    this.bodyTypes = new Map(baseBodyTypes.entries());

    for (const [bodyType, bodyComponent] of Object.entries(this.props.overrideBodyTypes ?? {})) {
      this.bodyTypes.set(bodyType, bodyComponent);
    }

    this.evTypes = new Map(baseEvTypes.entries());

    for (const [evType, evComponent] of Object.entries(this.props.overrideEventTypes ?? {})) {
      this.evTypes.set(evType, evComponent);
    }
  }

  getMediaHelper() {
    return this.mediaHelper;
  }

  render() {
    const content = this.props.mxEvent.getContent();
    const type = this.props.mxEvent.getType();
    const msgtype = content.msgtype;
    let BodyType = _RedactedBody.default;

    if (!this.props.mxEvent.isRedacted()) {
      // only resolve BodyType if event is not redacted
      if (type && this.evTypes.has(type)) {
        BodyType = this.evTypes.get(type);
      } else if (msgtype && this.bodyTypes.has(msgtype)) {
        BodyType = this.bodyTypes.get(msgtype);
      } else if (content.url) {
        // Fallback to MFileBody if there's a content URL
        BodyType = this.bodyTypes.get(_event.MsgType.File);
      } else {
        // Fallback to UnknownBody otherwise if not redacted
        BodyType = _UnknownBody.default;
      } // TODO: move to eventTypes when location sharing spec stabilises


      if (_location.M_LOCATION.matches(type) || type === _event.EventType.RoomMessage && msgtype === _event.MsgType.Location) {
        BodyType = _MLocationBody.default;
      }
    }

    if (_SettingsStore.default.getValue("feature_mjolnir")) {
      const key = `mx_mjolnir_render_${this.props.mxEvent.getRoomId()}__${this.props.mxEvent.getId()}`;
      const allowRender = localStorage.getItem(key) === "true";

      if (!allowRender) {
        const userDomain = this.props.mxEvent.getSender().split(':').slice(1).join(':');

        const userBanned = _Mjolnir.Mjolnir.sharedInstance().isUserBanned(this.props.mxEvent.getSender());

        const serverBanned = _Mjolnir.Mjolnir.sharedInstance().isServerBanned(userDomain);

        if (userBanned || serverBanned) {
          BodyType = _MjolnirBody.default;
        }
      }
    } // @ts-ignore - this is a dynamic react component


    return BodyType ? /*#__PURE__*/_react.default.createElement(BodyType, {
      ref: this.body,
      mxEvent: this.props.mxEvent,
      highlights: this.props.highlights,
      highlightLink: this.props.highlightLink,
      showUrlPreview: this.props.showUrlPreview,
      forExport: this.props.forExport,
      maxImageHeight: this.props.maxImageHeight,
      replacingEventId: this.props.replacingEventId,
      editState: this.props.editState,
      onHeightChanged: this.props.onHeightChanged,
      onMessageAllowed: this.onTileUpdate,
      permalinkCreator: this.props.permalinkCreator,
      mediaEventHelper: this.mediaHelper,
      getRelationsForEvent: this.props.getRelationsForEvent,
      isSeeingThroughMessageHiddenForModeration: this.props.isSeeingThroughMessageHiddenForModeration
    }) : null;
  }

}

exports.default = MessageEvent;
(0, _defineProperty2.default)(MessageEvent, "contextType", _MatrixClientContext.default);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJiYXNlQm9keVR5cGVzIiwiTWFwIiwiTXNnVHlwZSIsIlRleHQiLCJUZXh0dWFsQm9keSIsIk5vdGljZSIsIkVtb3RlIiwiSW1hZ2UiLCJNSW1hZ2VCb2R5IiwiRmlsZSIsIk1GaWxlQm9keSIsIkF1ZGlvIiwiTVZvaWNlT3JBdWRpb0JvZHkiLCJWaWRlbyIsIk1WaWRlb0JvZHkiLCJiYXNlRXZUeXBlcyIsIkV2ZW50VHlwZSIsIlN0aWNrZXIiLCJNU3RpY2tlckJvZHkiLCJNX1BPTExfU1RBUlQiLCJuYW1lIiwiTVBvbGxCb2R5IiwiYWx0TmFtZSIsIk1fQkVBQ09OX0lORk8iLCJNQmVhY29uQm9keSIsIk1lc3NhZ2VFdmVudCIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsImNvbnRleHQiLCJjcmVhdGVSZWYiLCJlbnRyaWVzIiwiYm9keSIsImN1cnJlbnQiLCJnZXRFdmVudFRpbGVPcHMiLCJNZWRpYUV2ZW50SGVscGVyIiwiaXNFbGlnaWJsZSIsIm14RXZlbnQiLCJtZWRpYUhlbHBlciIsImRlc3Ryb3kiLCJmb3JjZVVwZGF0ZSIsInVwZGF0ZUNvbXBvbmVudE1hcHMiLCJjb21wb25lbnREaWRNb3VudCIsImFkZExpc3RlbmVyIiwiTWF0cml4RXZlbnRFdmVudCIsIkRlY3J5cHRlZCIsIm9uRGVjcnlwdGVkIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJyZW1vdmVMaXN0ZW5lciIsImNvbXBvbmVudERpZFVwZGF0ZSIsInByZXZQcm9wcyIsImJvZHlUeXBlcyIsImJvZHlUeXBlIiwiYm9keUNvbXBvbmVudCIsIk9iamVjdCIsIm92ZXJyaWRlQm9keVR5cGVzIiwic2V0IiwiZXZUeXBlcyIsImV2VHlwZSIsImV2Q29tcG9uZW50Iiwib3ZlcnJpZGVFdmVudFR5cGVzIiwiZ2V0TWVkaWFIZWxwZXIiLCJyZW5kZXIiLCJjb250ZW50IiwiZ2V0Q29udGVudCIsInR5cGUiLCJnZXRUeXBlIiwibXNndHlwZSIsIkJvZHlUeXBlIiwiUmVkYWN0ZWRCb2R5IiwiaXNSZWRhY3RlZCIsImhhcyIsImdldCIsInVybCIsIlVua25vd25Cb2R5IiwiTV9MT0NBVElPTiIsIm1hdGNoZXMiLCJSb29tTWVzc2FnZSIsIkxvY2F0aW9uIiwiTUxvY2F0aW9uQm9keSIsIlNldHRpbmdzU3RvcmUiLCJnZXRWYWx1ZSIsImtleSIsImdldFJvb21JZCIsImdldElkIiwiYWxsb3dSZW5kZXIiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwidXNlckRvbWFpbiIsImdldFNlbmRlciIsInNwbGl0Iiwic2xpY2UiLCJqb2luIiwidXNlckJhbm5lZCIsIk1qb2xuaXIiLCJzaGFyZWRJbnN0YW5jZSIsImlzVXNlckJhbm5lZCIsInNlcnZlckJhbm5lZCIsImlzU2VydmVyQmFubmVkIiwiTWpvbG5pckJvZHkiLCJoaWdobGlnaHRzIiwiaGlnaGxpZ2h0TGluayIsInNob3dVcmxQcmV2aWV3IiwiZm9yRXhwb3J0IiwibWF4SW1hZ2VIZWlnaHQiLCJyZXBsYWNpbmdFdmVudElkIiwiZWRpdFN0YXRlIiwib25IZWlnaHRDaGFuZ2VkIiwib25UaWxlVXBkYXRlIiwicGVybWFsaW5rQ3JlYXRvciIsImdldFJlbGF0aW9uc0ZvckV2ZW50IiwiaXNTZWVpbmdUaHJvdWdoTWVzc2FnZUhpZGRlbkZvck1vZGVyYXRpb24iLCJNYXRyaXhDbGllbnRDb250ZXh0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvdmlld3MvbWVzc2FnZXMvTWVzc2FnZUV2ZW50LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMTUgLSAyMDIxIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0LCB7IGNyZWF0ZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEV2ZW50VHlwZSwgTXNnVHlwZSB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9AdHlwZXMvZXZlbnRcIjtcbmltcG9ydCB7IFJlbGF0aW9ucyB9IGZyb20gJ21hdHJpeC1qcy1zZGsvc3JjL21vZGVscy9yZWxhdGlvbnMnO1xuaW1wb3J0IHsgTV9CRUFDT05fSU5GTyB9IGZyb20gJ21hdHJpeC1qcy1zZGsvc3JjL0B0eXBlcy9iZWFjb24nO1xuaW1wb3J0IHsgTV9MT0NBVElPTiB9IGZyb20gJ21hdHJpeC1qcy1zZGsvc3JjL0B0eXBlcy9sb2NhdGlvbic7XG5pbXBvcnQgeyBNX1BPTExfU1RBUlQgfSBmcm9tIFwibWF0cml4LWV2ZW50cy1zZGtcIjtcbmltcG9ydCB7IE1hdHJpeEV2ZW50RXZlbnQgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbW9kZWxzL2V2ZW50XCI7XG5cbmltcG9ydCBTZXR0aW5nc1N0b3JlIGZyb20gXCIuLi8uLi8uLi9zZXR0aW5ncy9TZXR0aW5nc1N0b3JlXCI7XG5pbXBvcnQgeyBNam9sbmlyIH0gZnJvbSBcIi4uLy4uLy4uL21qb2xuaXIvTWpvbG5pclwiO1xuaW1wb3J0IFJlZGFjdGVkQm9keSBmcm9tIFwiLi9SZWRhY3RlZEJvZHlcIjtcbmltcG9ydCBVbmtub3duQm9keSBmcm9tIFwiLi9Vbmtub3duQm9keVwiO1xuaW1wb3J0IHsgSU1lZGlhQm9keSB9IGZyb20gXCIuL0lNZWRpYUJvZHlcIjtcbmltcG9ydCB7IE1lZGlhRXZlbnRIZWxwZXIgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvTWVkaWFFdmVudEhlbHBlclwiO1xuaW1wb3J0IHsgUmVhY3RBbnlDb21wb25lbnQgfSBmcm9tIFwiLi4vLi4vLi4vQHR5cGVzL2NvbW1vblwiO1xuaW1wb3J0IHsgSUJvZHlQcm9wcyB9IGZyb20gXCIuL0lCb2R5UHJvcHNcIjtcbmltcG9ydCBNYXRyaXhDbGllbnRDb250ZXh0IGZyb20gJy4uLy4uLy4uL2NvbnRleHRzL01hdHJpeENsaWVudENvbnRleHQnO1xuaW1wb3J0IFRleHR1YWxCb2R5IGZyb20gXCIuL1RleHR1YWxCb2R5XCI7XG5pbXBvcnQgTUltYWdlQm9keSBmcm9tIFwiLi9NSW1hZ2VCb2R5XCI7XG5pbXBvcnQgTUZpbGVCb2R5IGZyb20gXCIuL01GaWxlQm9keVwiO1xuaW1wb3J0IE1Wb2ljZU9yQXVkaW9Cb2R5IGZyb20gXCIuL01Wb2ljZU9yQXVkaW9Cb2R5XCI7XG5pbXBvcnQgTVZpZGVvQm9keSBmcm9tIFwiLi9NVmlkZW9Cb2R5XCI7XG5pbXBvcnQgTVN0aWNrZXJCb2R5IGZyb20gXCIuL01TdGlja2VyQm9keVwiO1xuaW1wb3J0IE1Qb2xsQm9keSBmcm9tIFwiLi9NUG9sbEJvZHlcIjtcbmltcG9ydCBNTG9jYXRpb25Cb2R5IGZyb20gXCIuL01Mb2NhdGlvbkJvZHlcIjtcbmltcG9ydCBNam9sbmlyQm9keSBmcm9tIFwiLi9Nam9sbmlyQm9keVwiO1xuaW1wb3J0IE1CZWFjb25Cb2R5IGZyb20gXCIuL01CZWFjb25Cb2R5XCI7XG5pbXBvcnQgeyBJRXZlbnRUaWxlT3BzIH0gZnJvbSBcIi4uL3Jvb21zL0V2ZW50VGlsZVwiO1xuXG4vLyBvbk1lc3NhZ2VBbGxvd2VkIGlzIGhhbmRsZWQgaW50ZXJuYWxseVxuaW50ZXJmYWNlIElQcm9wcyBleHRlbmRzIE9taXQ8SUJvZHlQcm9wcywgXCJvbk1lc3NhZ2VBbGxvd2VkXCIgfCBcIm1lZGlhRXZlbnRIZWxwZXJcIj4ge1xuICAgIC8qIG92ZXJyaWRlcyBmb3IgdGhlIG1zZ3R5cGUtc3BlY2lmaWMgY29tcG9uZW50cywgdXNlZCBieSBSZXBseVRpbGUgdG8gb3ZlcnJpZGUgZmlsZSByZW5kZXJpbmcgKi9cbiAgICBvdmVycmlkZUJvZHlUeXBlcz86IFJlY29yZDxzdHJpbmcsIHR5cGVvZiBSZWFjdC5Db21wb25lbnQ+O1xuICAgIG92ZXJyaWRlRXZlbnRUeXBlcz86IFJlY29yZDxzdHJpbmcsIHR5cGVvZiBSZWFjdC5Db21wb25lbnQ+O1xuXG4gICAgLy8gaGVscGVyIGZ1bmN0aW9uIHRvIGFjY2VzcyByZWxhdGlvbnMgZm9yIHRoaXMgZXZlbnRcbiAgICBnZXRSZWxhdGlvbnNGb3JFdmVudD86IChldmVudElkOiBzdHJpbmcsIHJlbGF0aW9uVHlwZTogc3RyaW5nLCBldmVudFR5cGU6IHN0cmluZykgPT4gUmVsYXRpb25zO1xuXG4gICAgaXNTZWVpbmdUaHJvdWdoTWVzc2FnZUhpZGRlbkZvck1vZGVyYXRpb24/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElPcGVyYWJsZUV2ZW50VGlsZSB7XG4gICAgZ2V0RXZlbnRUaWxlT3BzKCk6IElFdmVudFRpbGVPcHM7XG59XG5cbmNvbnN0IGJhc2VCb2R5VHlwZXMgPSBuZXcgTWFwPHN0cmluZywgdHlwZW9mIFJlYWN0LkNvbXBvbmVudD4oW1xuICAgIFtNc2dUeXBlLlRleHQsIFRleHR1YWxCb2R5XSxcbiAgICBbTXNnVHlwZS5Ob3RpY2UsIFRleHR1YWxCb2R5XSxcbiAgICBbTXNnVHlwZS5FbW90ZSwgVGV4dHVhbEJvZHldLFxuICAgIFtNc2dUeXBlLkltYWdlLCBNSW1hZ2VCb2R5XSxcbiAgICBbTXNnVHlwZS5GaWxlLCBNRmlsZUJvZHldLFxuICAgIFtNc2dUeXBlLkF1ZGlvLCBNVm9pY2VPckF1ZGlvQm9keV0sXG4gICAgW01zZ1R5cGUuVmlkZW8sIE1WaWRlb0JvZHldLFxuXSk7XG5jb25zdCBiYXNlRXZUeXBlcyA9IG5ldyBNYXA8c3RyaW5nLCBSZWFjdC5Db21wb25lbnRUeXBlPFBhcnRpYWw8SUJvZHlQcm9wcz4+PihbXG4gICAgW0V2ZW50VHlwZS5TdGlja2VyLCBNU3RpY2tlckJvZHldLFxuICAgIFtNX1BPTExfU1RBUlQubmFtZSwgTVBvbGxCb2R5XSxcbiAgICBbTV9QT0xMX1NUQVJULmFsdE5hbWUsIE1Qb2xsQm9keV0sXG4gICAgW01fQkVBQ09OX0lORk8ubmFtZSwgTUJlYWNvbkJvZHldLFxuICAgIFtNX0JFQUNPTl9JTkZPLmFsdE5hbWUsIE1CZWFjb25Cb2R5XSxcbl0pO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZXNzYWdlRXZlbnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzPiBpbXBsZW1lbnRzIElNZWRpYUJvZHksIElPcGVyYWJsZUV2ZW50VGlsZSB7XG4gICAgcHJpdmF0ZSBib2R5OiBSZWFjdC5SZWZPYmplY3Q8UmVhY3QuQ29tcG9uZW50IHwgSU9wZXJhYmxlRXZlbnRUaWxlPiA9IGNyZWF0ZVJlZigpO1xuICAgIHByaXZhdGUgbWVkaWFIZWxwZXI6IE1lZGlhRXZlbnRIZWxwZXI7XG4gICAgcHJpdmF0ZSBib2R5VHlwZXMgPSBuZXcgTWFwPHN0cmluZywgdHlwZW9mIFJlYWN0LkNvbXBvbmVudD4oYmFzZUJvZHlUeXBlcy5lbnRyaWVzKCkpO1xuICAgIHByaXZhdGUgZXZUeXBlcyA9IG5ldyBNYXA8c3RyaW5nLCBSZWFjdC5Db21wb25lbnRUeXBlPFBhcnRpYWw8SUJvZHlQcm9wcz4+PihiYXNlRXZUeXBlcy5lbnRyaWVzKCkpO1xuXG4gICAgcHVibGljIHN0YXRpYyBjb250ZXh0VHlwZSA9IE1hdHJpeENsaWVudENvbnRleHQ7XG4gICAgcHVibGljIGNvbnRleHQhOiBSZWFjdC5Db250ZXh0VHlwZTx0eXBlb2YgTWF0cml4Q2xpZW50Q29udGV4dD47XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IocHJvcHM6IElQcm9wcywgY29udGV4dDogUmVhY3QuQ29udGV4dFR5cGU8dHlwZW9mIE1hdHJpeENsaWVudENvbnRleHQ+KSB7XG4gICAgICAgIHN1cGVyKHByb3BzLCBjb250ZXh0KTtcblxuICAgICAgICBpZiAoTWVkaWFFdmVudEhlbHBlci5pc0VsaWdpYmxlKHRoaXMucHJvcHMubXhFdmVudCkpIHtcbiAgICAgICAgICAgIHRoaXMubWVkaWFIZWxwZXIgPSBuZXcgTWVkaWFFdmVudEhlbHBlcih0aGlzLnByb3BzLm14RXZlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy51cGRhdGVDb21wb25lbnRNYXBzKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGNvbXBvbmVudERpZE1vdW50KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnByb3BzLm14RXZlbnQuYWRkTGlzdGVuZXIoTWF0cml4RXZlbnRFdmVudC5EZWNyeXB0ZWQsIHRoaXMub25EZWNyeXB0ZWQpO1xuICAgIH1cblxuICAgIHB1YmxpYyBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5teEV2ZW50LnJlbW92ZUxpc3RlbmVyKE1hdHJpeEV2ZW50RXZlbnQuRGVjcnlwdGVkLCB0aGlzLm9uRGVjcnlwdGVkKTtcbiAgICAgICAgdGhpcy5tZWRpYUhlbHBlcj8uZGVzdHJveSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzOiBSZWFkb25seTxJUHJvcHM+KSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLm14RXZlbnQgIT09IHByZXZQcm9wcy5teEV2ZW50ICYmIE1lZGlhRXZlbnRIZWxwZXIuaXNFbGlnaWJsZSh0aGlzLnByb3BzLm14RXZlbnQpKSB7XG4gICAgICAgICAgICB0aGlzLm1lZGlhSGVscGVyPy5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLm1lZGlhSGVscGVyID0gbmV3IE1lZGlhRXZlbnRIZWxwZXIodGhpcy5wcm9wcy5teEV2ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudXBkYXRlQ29tcG9uZW50TWFwcygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlQ29tcG9uZW50TWFwcygpIHtcbiAgICAgICAgdGhpcy5ib2R5VHlwZXMgPSBuZXcgTWFwPHN0cmluZywgdHlwZW9mIFJlYWN0LkNvbXBvbmVudD4oYmFzZUJvZHlUeXBlcy5lbnRyaWVzKCkpO1xuICAgICAgICBmb3IgKGNvbnN0IFtib2R5VHlwZSwgYm9keUNvbXBvbmVudF0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5wcm9wcy5vdmVycmlkZUJvZHlUeXBlcyA/PyB7fSkpIHtcbiAgICAgICAgICAgIHRoaXMuYm9keVR5cGVzLnNldChib2R5VHlwZSwgYm9keUNvbXBvbmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmV2VHlwZXMgPSBuZXcgTWFwPHN0cmluZywgUmVhY3QuQ29tcG9uZW50VHlwZTxQYXJ0aWFsPElCb2R5UHJvcHM+Pj4oYmFzZUV2VHlwZXMuZW50cmllcygpKTtcbiAgICAgICAgZm9yIChjb25zdCBbZXZUeXBlLCBldkNvbXBvbmVudF0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5wcm9wcy5vdmVycmlkZUV2ZW50VHlwZXMgPz8ge30pKSB7XG4gICAgICAgICAgICB0aGlzLmV2VHlwZXMuc2V0KGV2VHlwZSwgZXZDb21wb25lbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdldEV2ZW50VGlsZU9wcyA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmJvZHkuY3VycmVudCBhcyBJT3BlcmFibGVFdmVudFRpbGUpPy5nZXRFdmVudFRpbGVPcHM/LigpIHx8IG51bGw7XG4gICAgfTtcblxuICAgIHB1YmxpYyBnZXRNZWRpYUhlbHBlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVkaWFIZWxwZXI7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkRlY3J5cHRlZCA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgLy8gUmVjaGVjayBNZWRpYUV2ZW50SGVscGVyIGVsaWdpYmlsaXR5IGFzIGl0IGNhbiBjaGFuZ2Ugd2hlbiB0aGUgZXZlbnQgZ2V0cyBkZWNyeXB0ZWRcbiAgICAgICAgaWYgKE1lZGlhRXZlbnRIZWxwZXIuaXNFbGlnaWJsZSh0aGlzLnByb3BzLm14RXZlbnQpKSB7XG4gICAgICAgICAgICB0aGlzLm1lZGlhSGVscGVyPy5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLm1lZGlhSGVscGVyID0gbmV3IE1lZGlhRXZlbnRIZWxwZXIodGhpcy5wcm9wcy5teEV2ZW50KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwcml2YXRlIG9uVGlsZVVwZGF0ZSA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgIH07XG5cbiAgICBwdWJsaWMgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCBjb250ZW50ID0gdGhpcy5wcm9wcy5teEV2ZW50LmdldENvbnRlbnQoKTtcbiAgICAgICAgY29uc3QgdHlwZSA9IHRoaXMucHJvcHMubXhFdmVudC5nZXRUeXBlKCk7XG4gICAgICAgIGNvbnN0IG1zZ3R5cGUgPSBjb250ZW50Lm1zZ3R5cGU7XG4gICAgICAgIGxldCBCb2R5VHlwZTogUmVhY3QuQ29tcG9uZW50VHlwZTxQYXJ0aWFsPElCb2R5UHJvcHM+PiB8IFJlYWN0QW55Q29tcG9uZW50ID0gUmVkYWN0ZWRCb2R5O1xuICAgICAgICBpZiAoIXRoaXMucHJvcHMubXhFdmVudC5pc1JlZGFjdGVkKCkpIHtcbiAgICAgICAgICAgIC8vIG9ubHkgcmVzb2x2ZSBCb2R5VHlwZSBpZiBldmVudCBpcyBub3QgcmVkYWN0ZWRcbiAgICAgICAgICAgIGlmICh0eXBlICYmIHRoaXMuZXZUeXBlcy5oYXModHlwZSkpIHtcbiAgICAgICAgICAgICAgICBCb2R5VHlwZSA9IHRoaXMuZXZUeXBlcy5nZXQodHlwZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1zZ3R5cGUgJiYgdGhpcy5ib2R5VHlwZXMuaGFzKG1zZ3R5cGUpKSB7XG4gICAgICAgICAgICAgICAgQm9keVR5cGUgPSB0aGlzLmJvZHlUeXBlcy5nZXQobXNndHlwZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbnRlbnQudXJsKSB7XG4gICAgICAgICAgICAgICAgLy8gRmFsbGJhY2sgdG8gTUZpbGVCb2R5IGlmIHRoZXJlJ3MgYSBjb250ZW50IFVSTFxuICAgICAgICAgICAgICAgIEJvZHlUeXBlID0gdGhpcy5ib2R5VHlwZXMuZ2V0KE1zZ1R5cGUuRmlsZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEZhbGxiYWNrIHRvIFVua25vd25Cb2R5IG90aGVyd2lzZSBpZiBub3QgcmVkYWN0ZWRcbiAgICAgICAgICAgICAgICBCb2R5VHlwZSA9IFVua25vd25Cb2R5O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUT0RPOiBtb3ZlIHRvIGV2ZW50VHlwZXMgd2hlbiBsb2NhdGlvbiBzaGFyaW5nIHNwZWMgc3RhYmlsaXNlc1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIE1fTE9DQVRJT04ubWF0Y2hlcyh0eXBlKSB8fFxuICAgICAgICAgICAgICAgICh0eXBlID09PSBFdmVudFR5cGUuUm9vbU1lc3NhZ2UgJiYgbXNndHlwZSA9PT0gTXNnVHlwZS5Mb2NhdGlvbilcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIEJvZHlUeXBlID0gTUxvY2F0aW9uQm9keTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChTZXR0aW5nc1N0b3JlLmdldFZhbHVlKFwiZmVhdHVyZV9tam9sbmlyXCIpKSB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSBgbXhfbWpvbG5pcl9yZW5kZXJfJHt0aGlzLnByb3BzLm14RXZlbnQuZ2V0Um9vbUlkKCl9X18ke3RoaXMucHJvcHMubXhFdmVudC5nZXRJZCgpfWA7XG4gICAgICAgICAgICBjb25zdCBhbGxvd1JlbmRlciA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSkgPT09IFwidHJ1ZVwiO1xuXG4gICAgICAgICAgICBpZiAoIWFsbG93UmVuZGVyKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdXNlckRvbWFpbiA9IHRoaXMucHJvcHMubXhFdmVudC5nZXRTZW5kZXIoKS5zcGxpdCgnOicpLnNsaWNlKDEpLmpvaW4oJzonKTtcbiAgICAgICAgICAgICAgICBjb25zdCB1c2VyQmFubmVkID0gTWpvbG5pci5zaGFyZWRJbnN0YW5jZSgpLmlzVXNlckJhbm5lZCh0aGlzLnByb3BzLm14RXZlbnQuZ2V0U2VuZGVyKCkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlcnZlckJhbm5lZCA9IE1qb2xuaXIuc2hhcmVkSW5zdGFuY2UoKS5pc1NlcnZlckJhbm5lZCh1c2VyRG9tYWluKTtcblxuICAgICAgICAgICAgICAgIGlmICh1c2VyQmFubmVkIHx8IHNlcnZlckJhbm5lZCkge1xuICAgICAgICAgICAgICAgICAgICBCb2R5VHlwZSA9IE1qb2xuaXJCb2R5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEB0cy1pZ25vcmUgLSB0aGlzIGlzIGEgZHluYW1pYyByZWFjdCBjb21wb25lbnRcbiAgICAgICAgcmV0dXJuIEJvZHlUeXBlID8gPEJvZHlUeXBlXG4gICAgICAgICAgICByZWY9e3RoaXMuYm9keX1cbiAgICAgICAgICAgIG14RXZlbnQ9e3RoaXMucHJvcHMubXhFdmVudH1cbiAgICAgICAgICAgIGhpZ2hsaWdodHM9e3RoaXMucHJvcHMuaGlnaGxpZ2h0c31cbiAgICAgICAgICAgIGhpZ2hsaWdodExpbms9e3RoaXMucHJvcHMuaGlnaGxpZ2h0TGlua31cbiAgICAgICAgICAgIHNob3dVcmxQcmV2aWV3PXt0aGlzLnByb3BzLnNob3dVcmxQcmV2aWV3fVxuICAgICAgICAgICAgZm9yRXhwb3J0PXt0aGlzLnByb3BzLmZvckV4cG9ydH1cbiAgICAgICAgICAgIG1heEltYWdlSGVpZ2h0PXt0aGlzLnByb3BzLm1heEltYWdlSGVpZ2h0fVxuICAgICAgICAgICAgcmVwbGFjaW5nRXZlbnRJZD17dGhpcy5wcm9wcy5yZXBsYWNpbmdFdmVudElkfVxuICAgICAgICAgICAgZWRpdFN0YXRlPXt0aGlzLnByb3BzLmVkaXRTdGF0ZX1cbiAgICAgICAgICAgIG9uSGVpZ2h0Q2hhbmdlZD17dGhpcy5wcm9wcy5vbkhlaWdodENoYW5nZWR9XG4gICAgICAgICAgICBvbk1lc3NhZ2VBbGxvd2VkPXt0aGlzLm9uVGlsZVVwZGF0ZX1cbiAgICAgICAgICAgIHBlcm1hbGlua0NyZWF0b3I9e3RoaXMucHJvcHMucGVybWFsaW5rQ3JlYXRvcn1cbiAgICAgICAgICAgIG1lZGlhRXZlbnRIZWxwZXI9e3RoaXMubWVkaWFIZWxwZXJ9XG4gICAgICAgICAgICBnZXRSZWxhdGlvbnNGb3JFdmVudD17dGhpcy5wcm9wcy5nZXRSZWxhdGlvbnNGb3JFdmVudH1cbiAgICAgICAgICAgIGlzU2VlaW5nVGhyb3VnaE1lc3NhZ2VIaWRkZW5Gb3JNb2RlcmF0aW9uPXt0aGlzLnByb3BzLmlzU2VlaW5nVGhyb3VnaE1lc3NhZ2VIaWRkZW5Gb3JNb2RlcmF0aW9ufVxuICAgICAgICAvPiA6IG51bGw7XG4gICAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWdCQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFHQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7O0FBMUNBO0FBQ0E7QUFDQTtBQUNBO0FB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