"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _languageHandler = require("../../../languageHandler");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _Media = require("../../../customisations/Media");

var _RoomAvatar = _interopRequireDefault(require("../avatars/RoomAvatar"));

var _ImageView = _interopRequireDefault(require("../elements/ImageView"));

/*
Copyright 2017 Vector Creations Ltd
Copyright 2019 Michael Telatynski <7t3chguy@gmail.com>
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class RoomAvatarEvent extends _react.default.Component {
  constructor() {
    super(...arguments);
    (0, _defineProperty2.default)(this, "onAvatarClick", () => {
      const cli = _MatrixClientPeg.MatrixClientPeg.get();

      const ev = this.props.mxEvent;
      const httpUrl = (0, _Media.mediaFromMxc)(ev.getContent().url).srcHttp;
      const room = cli.getRoom(this.props.mxEvent.getRoomId());
      const text = (0, _languageHandler._t)('%(senderDisplayName)s changed the avatar for %(roomName)s', {
        senderDisplayName: ev.sender && ev.sender.name ? ev.sender.name : ev.getSender(),
        roomName: room ? room.name : ''
      });
      const params = {
        src: httpUrl,
        name: text
      };

      _Modal.default.createDialog(_ImageView.default, params, "mx_Dialog_lightbox", null, true);
    });
  }

  render() {
    const ev = this.props.mxEvent;
    const senderDisplayName = ev.sender && ev.sender.name ? ev.sender.name : ev.getSender();

    if (!ev.getContent().url || ev.getContent().url.trim().length === 0) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_TextualEvent"
      }, (0, _languageHandler._t)('%(senderDisplayName)s removed the room avatar.', {
        senderDisplayName
      }));
    }

    const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(ev.getRoomId()); // Provide all arguments to RoomAvatar via oobData because the avatar is historic


    const oobData = {
      avatarUrl: ev.getContent().url,
      name: room ? room.name : ""
    };
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomAvatarEvent"
    }, (0, _languageHandler._t)('%(senderDisplayName)s changed the room avatar to <img/>', {
      senderDisplayName: senderDisplayName
    }, {
      'img': () => /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        key: "avatar",
        className: "mx_RoomAvatarEvent_avatar",
        onClick: this.onAvatarClick
      }, /*#__PURE__*/_react.default.createElement(_RoomAvatar.default, {
        width: 14,
        height: 14,
        oobData: oobData
      }))
    }));
  }

}

exports.default = RoomAvatarEvent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSb29tQXZhdGFyRXZlbnQiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNsaSIsIk1hdHJpeENsaWVudFBlZyIsImdldCIsImV2IiwicHJvcHMiLCJteEV2ZW50IiwiaHR0cFVybCIsIm1lZGlhRnJvbU14YyIsImdldENvbnRlbnQiLCJ1cmwiLCJzcmNIdHRwIiwicm9vbSIsImdldFJvb20iLCJnZXRSb29tSWQiLCJ0ZXh0IiwiX3QiLCJzZW5kZXJEaXNwbGF5TmFtZSIsInNlbmRlciIsIm5hbWUiLCJnZXRTZW5kZXIiLCJyb29tTmFtZSIsInBhcmFtcyIsInNyYyIsIk1vZGFsIiwiY3JlYXRlRGlhbG9nIiwiSW1hZ2VWaWV3IiwicmVuZGVyIiwidHJpbSIsImxlbmd0aCIsIm9vYkRhdGEiLCJhdmF0YXJVcmwiLCJvbkF2YXRhckNsaWNrIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvdmlld3MvbWVzc2FnZXMvUm9vbUF2YXRhckV2ZW50LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMTcgVmVjdG9yIENyZWF0aW9ucyBMdGRcbkNvcHlyaWdodCAyMDE5IE1pY2hhZWwgVGVsYXR5bnNraSA8N3QzY2hndXlAZ21haWwuY29tPlxuQ29weXJpZ2h0IDIwMTkgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTWF0cml4RXZlbnQgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbW9kZWxzL2V2ZW50XCI7XG5cbmltcG9ydCB7IE1hdHJpeENsaWVudFBlZyB9IGZyb20gJy4uLy4uLy4uL01hdHJpeENsaWVudFBlZyc7XG5pbXBvcnQgeyBfdCB9IGZyb20gJy4uLy4uLy4uL2xhbmd1YWdlSGFuZGxlcic7XG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vLi4vLi4vTW9kYWwnO1xuaW1wb3J0IEFjY2Vzc2libGVCdXR0b24gZnJvbSAnLi4vZWxlbWVudHMvQWNjZXNzaWJsZUJ1dHRvbic7XG5pbXBvcnQgeyBtZWRpYUZyb21NeGMgfSBmcm9tIFwiLi4vLi4vLi4vY3VzdG9taXNhdGlvbnMvTWVkaWFcIjtcbmltcG9ydCBSb29tQXZhdGFyIGZyb20gXCIuLi9hdmF0YXJzL1Jvb21BdmF0YXJcIjtcbmltcG9ydCBJbWFnZVZpZXcgZnJvbSBcIi4uL2VsZW1lbnRzL0ltYWdlVmlld1wiO1xuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgICAvKiB0aGUgTWF0cml4RXZlbnQgdG8gc2hvdyAqL1xuICAgIG14RXZlbnQ6IE1hdHJpeEV2ZW50O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSb29tQXZhdGFyRXZlbnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzPiB7XG4gICAgcHJpdmF0ZSBvbkF2YXRhckNsaWNrID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICBjb25zdCBjbGkgPSBNYXRyaXhDbGllbnRQZWcuZ2V0KCk7XG4gICAgICAgIGNvbnN0IGV2ID0gdGhpcy5wcm9wcy5teEV2ZW50O1xuICAgICAgICBjb25zdCBodHRwVXJsID0gbWVkaWFGcm9tTXhjKGV2LmdldENvbnRlbnQoKS51cmwpLnNyY0h0dHA7XG5cbiAgICAgICAgY29uc3Qgcm9vbSA9IGNsaS5nZXRSb29tKHRoaXMucHJvcHMubXhFdmVudC5nZXRSb29tSWQoKSk7XG4gICAgICAgIGNvbnN0IHRleHQgPSBfdCgnJShzZW5kZXJEaXNwbGF5TmFtZSlzIGNoYW5nZWQgdGhlIGF2YXRhciBmb3IgJShyb29tTmFtZSlzJywge1xuICAgICAgICAgICAgc2VuZGVyRGlzcGxheU5hbWU6IGV2LnNlbmRlciAmJiBldi5zZW5kZXIubmFtZSA/IGV2LnNlbmRlci5uYW1lIDogZXYuZ2V0U2VuZGVyKCksXG4gICAgICAgICAgICByb29tTmFtZTogcm9vbSA/IHJvb20ubmFtZSA6ICcnLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgICAgICBzcmM6IGh0dHBVcmwsXG4gICAgICAgICAgICBuYW1lOiB0ZXh0LFxuICAgICAgICB9O1xuICAgICAgICBNb2RhbC5jcmVhdGVEaWFsb2coSW1hZ2VWaWV3LCBwYXJhbXMsIFwibXhfRGlhbG9nX2xpZ2h0Ym94XCIsIG51bGwsIHRydWUpO1xuICAgIH07XG5cbiAgICBwdWJsaWMgcmVuZGVyKCk6IEpTWC5FbGVtZW50IHtcbiAgICAgICAgY29uc3QgZXYgPSB0aGlzLnByb3BzLm14RXZlbnQ7XG4gICAgICAgIGNvbnN0IHNlbmRlckRpc3BsYXlOYW1lID0gZXYuc2VuZGVyICYmIGV2LnNlbmRlci5uYW1lID8gZXYuc2VuZGVyLm5hbWUgOiBldi5nZXRTZW5kZXIoKTtcblxuICAgICAgICBpZiAoIWV2LmdldENvbnRlbnQoKS51cmwgfHwgZXYuZ2V0Q29udGVudCgpLnVybC50cmltKCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfVGV4dHVhbEV2ZW50XCI+XG4gICAgICAgICAgICAgICAgICAgIHsgX3QoJyUoc2VuZGVyRGlzcGxheU5hbWUpcyByZW1vdmVkIHRoZSByb29tIGF2YXRhci4nLCB7IHNlbmRlckRpc3BsYXlOYW1lIH0pIH1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByb29tID0gTWF0cml4Q2xpZW50UGVnLmdldCgpLmdldFJvb20oZXYuZ2V0Um9vbUlkKCkpO1xuICAgICAgICAvLyBQcm92aWRlIGFsbCBhcmd1bWVudHMgdG8gUm9vbUF2YXRhciB2aWEgb29iRGF0YSBiZWNhdXNlIHRoZSBhdmF0YXIgaXMgaGlzdG9yaWNcbiAgICAgICAgY29uc3Qgb29iRGF0YSA9IHtcbiAgICAgICAgICAgIGF2YXRhclVybDogZXYuZ2V0Q29udGVudCgpLnVybCxcbiAgICAgICAgICAgIG5hbWU6IHJvb20gPyByb29tLm5hbWUgOiBcIlwiLFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X1Jvb21BdmF0YXJFdmVudFwiPlxuICAgICAgICAgICAgICAgIHsgX3QoJyUoc2VuZGVyRGlzcGxheU5hbWUpcyBjaGFuZ2VkIHRoZSByb29tIGF2YXRhciB0byA8aW1nLz4nLFxuICAgICAgICAgICAgICAgICAgICB7IHNlbmRlckRpc3BsYXlOYW1lOiBzZW5kZXJEaXNwbGF5TmFtZSB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnaW1nJzogKCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QWNjZXNzaWJsZUJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9XCJhdmF0YXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJteF9Sb29tQXZhdGFyRXZlbnRfYXZhdGFyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5vbkF2YXRhckNsaWNrfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFJvb21BdmF0YXIgd2lkdGg9ezE0fSBoZWlnaHQ9ezE0fSBvb2JEYXRhPXtvb2JEYXRhfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQWNjZXNzaWJsZUJ1dHRvbj4sXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWtCQTs7QUFHQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUEzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWtCZSxNQUFNQSxlQUFOLFNBQThCQyxjQUFBLENBQU1DLFNBQXBDLENBQXNEO0VBQUE7SUFBQTtJQUFBLHFEQUN6QyxNQUFZO01BQ2hDLE1BQU1DLEdBQUcsR0FBR0MsZ0NBQUEsQ0FBZ0JDLEdBQWhCLEVBQVo7O01BQ0EsTUFBTUMsRUFBRSxHQUFHLEtBQUtDLEtBQUwsQ0FBV0MsT0FBdEI7TUFDQSxNQUFNQyxPQUFPLEdBQUcsSUFBQUMsbUJBQUEsRUFBYUosRUFBRSxDQUFDSyxVQUFILEdBQWdCQyxHQUE3QixFQUFrQ0MsT0FBbEQ7TUFFQSxNQUFNQyxJQUFJLEdBQUdYLEdBQUcsQ0FBQ1ksT0FBSixDQUFZLEtBQUtSLEtBQUwsQ0FBV0MsT0FBWCxDQUFtQlEsU0FBbkIsRUFBWixDQUFiO01BQ0EsTUFBTUMsSUFBSSxHQUFHLElBQUFDLG1CQUFBLEVBQUcsMkRBQUgsRUFBZ0U7UUFDekVDLGlCQUFpQixFQUFFYixFQUFFLENBQUNjLE1BQUgsSUFBYWQsRUFBRSxDQUFDYyxNQUFILENBQVVDLElBQXZCLEdBQThCZixFQUFFLENBQUNjLE1BQUgsQ0FBVUMsSUFBeEMsR0FBK0NmLEVBQUUsQ0FBQ2dCLFNBQUgsRUFETztRQUV6RUMsUUFBUSxFQUFFVCxJQUFJLEdBQUdBLElBQUksQ0FBQ08sSUFBUixHQUFlO01BRjRDLENBQWhFLENBQWI7TUFLQSxNQUFNRyxNQUFNLEdBQUc7UUFDWEMsR0FBRyxFQUFFaEIsT0FETTtRQUVYWSxJQUFJLEVBQUVKO01BRkssQ0FBZjs7TUFJQVMsY0FBQSxDQUFNQyxZQUFOLENBQW1CQyxrQkFBbkIsRUFBOEJKLE1BQTlCLEVBQXNDLG9CQUF0QyxFQUE0RCxJQUE1RCxFQUFrRSxJQUFsRTtJQUNILENBakJnRTtFQUFBOztFQW1CMURLLE1BQU0sR0FBZ0I7SUFDekIsTUFBTXZCLEVBQUUsR0FBRyxLQUFLQyxLQUFMLENBQVdDLE9BQXRCO0lBQ0EsTUFBTVcsaUJBQWlCLEdBQUdiLEVBQUUsQ0FBQ2MsTUFBSCxJQUFhZCxFQUFFLENBQUNjLE1BQUgsQ0FBVUMsSUFBdkIsR0FBOEJmLEVBQUUsQ0FBQ2MsTUFBSCxDQUFVQyxJQUF4QyxHQUErQ2YsRUFBRSxDQUFDZ0IsU0FBSCxFQUF6RTs7SUFFQSxJQUFJLENBQUNoQixFQUFFLENBQUNLLFVBQUgsR0FBZ0JDLEdBQWpCLElBQXdCTixFQUFFLENBQUNLLFVBQUgsR0FBZ0JDLEdBQWhCLENBQW9Ca0IsSUFBcEIsR0FBMkJDLE1BQTNCLEtBQXNDLENBQWxFLEVBQXFFO01BQ2pFLG9CQUNJO1FBQUssU0FBUyxFQUFDO01BQWYsR0FDTSxJQUFBYixtQkFBQSxFQUFHLGdEQUFILEVBQXFEO1FBQUVDO01BQUYsQ0FBckQsQ0FETixDQURKO0lBS0g7O0lBRUQsTUFBTUwsSUFBSSxHQUFHVixnQ0FBQSxDQUFnQkMsR0FBaEIsR0FBc0JVLE9BQXRCLENBQThCVCxFQUFFLENBQUNVLFNBQUgsRUFBOUIsQ0FBYixDQVp5QixDQWF6Qjs7O0lBQ0EsTUFBTWdCLE9BQU8sR0FBRztNQUNaQyxTQUFTLEVBQUUzQixFQUFFLENBQUNLLFVBQUgsR0FBZ0JDLEdBRGY7TUFFWlMsSUFBSSxFQUFFUCxJQUFJLEdBQUdBLElBQUksQ0FBQ08sSUFBUixHQUFlO0lBRmIsQ0FBaEI7SUFLQSxvQkFDSTtNQUFLLFNBQVMsRUFBQztJQUFmLEdBQ00sSUFBQUgsbUJBQUEsRUFBRyx5REFBSCxFQUNFO01BQUVDLGlCQUFpQixFQUFFQTtJQUFyQixDQURGLEVBRUU7TUFDSSxPQUFPLG1CQUNILDZCQUFDLHlCQUFEO1FBQ0ksR0FBRyxFQUFDLFFBRFI7UUFFSSxTQUFTLEVBQUMsMkJBRmQ7UUFHSSxPQUFPLEVBQUUsS0FBS2U7TUFIbEIsZ0JBS0ksNkJBQUMsbUJBQUQ7UUFBWSxLQUFLLEVBQUUsRUFBbkI7UUFBdUIsTUFBTSxFQUFFLEVBQS9CO1FBQW1DLE9BQU8sRUFBRUY7TUFBNUMsRUFMSjtJQUZSLENBRkYsQ0FETixDQURKO0VBaUJIOztBQXZEZ0UifQ==