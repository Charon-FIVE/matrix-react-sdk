"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.LocationBodyFallbackContent = exports.LocationBodyContent = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _randomstring = require("matrix-js-sdk/src/randomstring");

var _matrix = require("matrix-js-sdk/src/matrix");

var _languageHandler = require("../../../languageHandler");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _location = require("../../../utils/location");

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _TooltipTarget = _interopRequireDefault(require("../elements/TooltipTarget"));

var _Tooltip = require("../elements/Tooltip");

var _LocationViewDialog = _interopRequireDefault(require("../location/LocationViewDialog"));

var _Map = _interopRequireDefault(require("../location/Map"));

var _SmartMarker = _interopRequireDefault(require("../location/SmartMarker"));

var _connection = require("../../../utils/connection");

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class MLocationBody extends _react.default.Component {
  constructor(props) {
    super(props); // multiple instances of same map might be in document
    // eg thread and main timeline, reply

    (0, _defineProperty2.default)(this, "context", void 0);
    (0, _defineProperty2.default)(this, "mapId", void 0);
    (0, _defineProperty2.default)(this, "reconnectedListener", void 0);
    (0, _defineProperty2.default)(this, "onClick", () => {
      _Modal.default.createDialog(_LocationViewDialog.default, {
        matrixClient: this.context,
        mxEvent: this.props.mxEvent
      }, "mx_LocationViewDialog_wrapper", false, // isPriority
      true // isStatic
      );
    });
    (0, _defineProperty2.default)(this, "clearError", () => {
      this.context.off(_matrix.ClientEvent.Sync, this.reconnectedListener);
      this.setState({
        error: undefined
      });
    });
    (0, _defineProperty2.default)(this, "onError", error => {
      this.setState({
        error
      });
      this.context.on(_matrix.ClientEvent.Sync, this.reconnectedListener);
    });
    const idSuffix = `${props.mxEvent.getId()}_${(0, _randomstring.randomString)(8)}`;
    this.mapId = `mx_MLocationBody_${idSuffix}`;
    this.reconnectedListener = (0, _connection.createReconnectedListener)(this.clearError);
    this.state = {
      error: undefined
    };
  }

  componentWillUnmount() {
    this.context.off(_matrix.ClientEvent.Sync, this.reconnectedListener);
  }

  render() {
    return this.state.error ? /*#__PURE__*/_react.default.createElement(LocationBodyFallbackContent, {
      error: this.state.error,
      event: this.props.mxEvent
    }) : /*#__PURE__*/_react.default.createElement(LocationBodyContent, {
      mxEvent: this.props.mxEvent,
      mapId: this.mapId,
      onError: this.onError,
      tooltip: (0, _languageHandler._t)("Expand map"),
      onClick: this.onClick
    });
  }

}

exports.default = MLocationBody;
(0, _defineProperty2.default)(MLocationBody, "contextType", _MatrixClientContext.default);

const LocationBodyFallbackContent = _ref => {
  let {
    error,
    event
  } = _ref;
  const errorType = error?.message;
  const message = `${(0, _languageHandler._t)('Unable to load map')}: ${(0, _location.getLocationShareErrorMessage)(errorType)}`;
  const locationFallback = (0, _location.isSelfLocation)(event.getContent()) ? (0, _languageHandler._t)('Shared their location: ') + event.getContent()?.body : (0, _languageHandler._t)('Shared a location: ') + event.getContent()?.body;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_EventTile_body mx_MLocationBody"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: errorType !== _location.LocationShareError.MapStyleUrlNotConfigured ? "mx_EventTile_tileError" : ''
  }, message), /*#__PURE__*/_react.default.createElement("br", null), locationFallback);
};

exports.LocationBodyFallbackContent = LocationBodyFallbackContent;

const LocationBodyContent = _ref2 => {
  let {
    mxEvent,
    mapId,
    tooltip,
    onError,
    onClick
  } = _ref2;
  // only pass member to marker when should render avatar marker
  const markerRoomMember = (0, _location.isSelfLocation)(mxEvent.getContent()) ? mxEvent.sender : undefined;
  const geoUri = (0, _location.locationEventGeoUri)(mxEvent);

  const mapElement = /*#__PURE__*/_react.default.createElement(_Map.default, {
    id: mapId,
    centerGeoUri: geoUri,
    onClick: onClick,
    onError: onError,
    className: "mx_MLocationBody_map"
  }, _ref3 => {
    let {
      map
    } = _ref3;
    return /*#__PURE__*/_react.default.createElement(_SmartMarker.default, {
      map: map,
      id: `${mapId}-marker`,
      geoUri: geoUri,
      roomMember: markerRoomMember
    });
  });

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_MLocationBody"
  }, tooltip ? /*#__PURE__*/_react.default.createElement(_TooltipTarget.default, {
    label: tooltip,
    alignment: _Tooltip.Alignment.InnerBottom,
    maxParentWidth: 450
  }, mapElement) : mapElement);
};

exports.LocationBodyContent = LocationBodyContent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,