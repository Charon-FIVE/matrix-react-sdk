"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _partials = require("matrix-js-sdk/src/@types/partials");

var _LabelledToggleSwitch = _interopRequireDefault(require("../elements/LabelledToggleSwitch"));

var _languageHandler = require("../../../languageHandler");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _Directory = _interopRequireDefault(require("../../../customisations/Directory"));

/*
Copyright 2020 - 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class RoomPublishSetting extends _react.default.PureComponent {
  constructor(props, context) {
    super(props, context);
    (0, _defineProperty2.default)(this, "onRoomPublishChange", e => {
      const valueBefore = this.state.isRoomPublished;
      const newValue = !valueBefore;
      this.setState({
        isRoomPublished: newValue
      });

      const client = _MatrixClientPeg.MatrixClientPeg.get();

      client.setRoomDirectoryVisibility(this.props.roomId, newValue ? _partials.Visibility.Public : _partials.Visibility.Private).catch(() => {
        // Roll back the local echo on the change
        this.setState({
          isRoomPublished: valueBefore
        });
      });
    });
    this.state = {
      isRoomPublished: false
    };
  }

  componentDidMount() {
    const client = _MatrixClientPeg.MatrixClientPeg.get();

    client.getRoomDirectoryVisibility(this.props.roomId).then(result => {
      this.setState({
        isRoomPublished: result.visibility === 'public'
      });
    });
  }

  render() {
    const client = _MatrixClientPeg.MatrixClientPeg.get();

    const room = client.getRoom(this.props.roomId);
    const isRoomPublishable = room.getJoinRule() !== "invite";
    const enabled = (_Directory.default.requireCanonicalAliasAccessToPublish?.() === false || this.props.canSetCanonicalAlias) && (isRoomPublishable || this.state.isRoomPublished);
    return /*#__PURE__*/_react.default.createElement(_LabelledToggleSwitch.default, {
      value: this.state.isRoomPublished,
      onChange: this.onRoomPublishChange,
      disabled: !enabled,
      label: (0, _languageHandler._t)("Publish this room to the public in %(domain)s's room directory?", {
        domain: client.getDomain()
      })
    });
  }

}

exports.default = RoomPublishSetting;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSb29tUHVibGlzaFNldHRpbmciLCJSZWFjdCIsIlB1cmVDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwiY29udGV4dCIsImUiLCJ2YWx1ZUJlZm9yZSIsInN0YXRlIiwiaXNSb29tUHVibGlzaGVkIiwibmV3VmFsdWUiLCJzZXRTdGF0ZSIsImNsaWVudCIsIk1hdHJpeENsaWVudFBlZyIsImdldCIsInNldFJvb21EaXJlY3RvcnlWaXNpYmlsaXR5Iiwicm9vbUlkIiwiVmlzaWJpbGl0eSIsIlB1YmxpYyIsIlByaXZhdGUiLCJjYXRjaCIsImNvbXBvbmVudERpZE1vdW50IiwiZ2V0Um9vbURpcmVjdG9yeVZpc2liaWxpdHkiLCJ0aGVuIiwicmVzdWx0IiwidmlzaWJpbGl0eSIsInJlbmRlciIsInJvb20iLCJnZXRSb29tIiwiaXNSb29tUHVibGlzaGFibGUiLCJnZXRKb2luUnVsZSIsImVuYWJsZWQiLCJEaXJlY3RvcnlDdXN0b21pc2F0aW9ucyIsInJlcXVpcmVDYW5vbmljYWxBbGlhc0FjY2Vzc1RvUHVibGlzaCIsImNhblNldENhbm9uaWNhbEFsaWFzIiwib25Sb29tUHVibGlzaENoYW5nZSIsIl90IiwiZG9tYWluIiwiZ2V0RG9tYWluIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvdmlld3Mvcm9vbV9zZXR0aW5ncy9Sb29tUHVibGlzaFNldHRpbmcudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMCAtIDIwMjEgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBWaXNpYmlsaXR5IH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL0B0eXBlcy9wYXJ0aWFsc1wiO1xuXG5pbXBvcnQgTGFiZWxsZWRUb2dnbGVTd2l0Y2ggZnJvbSBcIi4uL2VsZW1lbnRzL0xhYmVsbGVkVG9nZ2xlU3dpdGNoXCI7XG5pbXBvcnQgeyBfdCB9IGZyb20gXCIuLi8uLi8uLi9sYW5ndWFnZUhhbmRsZXJcIjtcbmltcG9ydCB7IE1hdHJpeENsaWVudFBlZyB9IGZyb20gXCIuLi8uLi8uLi9NYXRyaXhDbGllbnRQZWdcIjtcbmltcG9ydCBEaXJlY3RvcnlDdXN0b21pc2F0aW9ucyBmcm9tICcuLi8uLi8uLi9jdXN0b21pc2F0aW9ucy9EaXJlY3RvcnknO1xuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgICByb29tSWQ6IHN0cmluZztcbiAgICBsYWJlbD86IHN0cmluZztcbiAgICBjYW5TZXRDYW5vbmljYWxBbGlhcz86IGJvb2xlYW47XG59XG5cbmludGVyZmFjZSBJU3RhdGUge1xuICAgIGlzUm9vbVB1Ymxpc2hlZDogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm9vbVB1Ymxpc2hTZXR0aW5nIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxJUHJvcHMsIElTdGF0ZT4ge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzLCBjb250ZXh0KSB7XG4gICAgICAgIHN1cGVyKHByb3BzLCBjb250ZXh0KTtcblxuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgaXNSb29tUHVibGlzaGVkOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uUm9vbVB1Ymxpc2hDaGFuZ2UgPSAoZSkgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZUJlZm9yZSA9IHRoaXMuc3RhdGUuaXNSb29tUHVibGlzaGVkO1xuICAgICAgICBjb25zdCBuZXdWYWx1ZSA9ICF2YWx1ZUJlZm9yZTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzUm9vbVB1Ymxpc2hlZDogbmV3VmFsdWUgfSk7XG4gICAgICAgIGNvbnN0IGNsaWVudCA9IE1hdHJpeENsaWVudFBlZy5nZXQoKTtcblxuICAgICAgICBjbGllbnQuc2V0Um9vbURpcmVjdG9yeVZpc2liaWxpdHkoXG4gICAgICAgICAgICB0aGlzLnByb3BzLnJvb21JZCxcbiAgICAgICAgICAgIG5ld1ZhbHVlID8gVmlzaWJpbGl0eS5QdWJsaWMgOiBWaXNpYmlsaXR5LlByaXZhdGUsXG4gICAgICAgICkuY2F0Y2goKCkgPT4ge1xuICAgICAgICAgICAgLy8gUm9sbCBiYWNrIHRoZSBsb2NhbCBlY2hvIG9uIHRoZSBjaGFuZ2VcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc1Jvb21QdWJsaXNoZWQ6IHZhbHVlQmVmb3JlIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIGNvbnN0IGNsaWVudCA9IE1hdHJpeENsaWVudFBlZy5nZXQoKTtcbiAgICAgICAgY2xpZW50LmdldFJvb21EaXJlY3RvcnlWaXNpYmlsaXR5KHRoaXMucHJvcHMucm9vbUlkKS50aGVuKChyZXN1bHQgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzUm9vbVB1Ymxpc2hlZDogcmVzdWx0LnZpc2liaWxpdHkgPT09ICdwdWJsaWMnIH0pO1xuICAgICAgICB9KSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCBjbGllbnQgPSBNYXRyaXhDbGllbnRQZWcuZ2V0KCk7XG5cbiAgICAgICAgY29uc3Qgcm9vbSA9IGNsaWVudC5nZXRSb29tKHRoaXMucHJvcHMucm9vbUlkKTtcbiAgICAgICAgY29uc3QgaXNSb29tUHVibGlzaGFibGUgPSByb29tLmdldEpvaW5SdWxlKCkgIT09IFwiaW52aXRlXCI7XG5cbiAgICAgICAgY29uc3QgZW5hYmxlZCA9IChcbiAgICAgICAgICAgIChEaXJlY3RvcnlDdXN0b21pc2F0aW9ucy5yZXF1aXJlQ2Fub25pY2FsQWxpYXNBY2Nlc3NUb1B1Ymxpc2g/LigpID09PSBmYWxzZSB8fFxuICAgICAgICAgICAgdGhpcy5wcm9wcy5jYW5TZXRDYW5vbmljYWxBbGlhcykgJiYgKGlzUm9vbVB1Ymxpc2hhYmxlIHx8IHRoaXMuc3RhdGUuaXNSb29tUHVibGlzaGVkKVxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8TGFiZWxsZWRUb2dnbGVTd2l0Y2ggdmFsdWU9e3RoaXMuc3RhdGUuaXNSb29tUHVibGlzaGVkfVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uUm9vbVB1Ymxpc2hDaGFuZ2V9XG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9eyFlbmFibGVkfVxuICAgICAgICAgICAgICAgIGxhYmVsPXtfdChcIlB1Ymxpc2ggdGhpcyByb29tIHRvIHRoZSBwdWJsaWMgaW4gJShkb21haW4pcydzIHJvb20gZGlyZWN0b3J5P1wiLCB7XG4gICAgICAgICAgICAgICAgICAgIGRvbWFpbjogY2xpZW50LmdldERvbWFpbigpLFxuICAgICAgICAgICAg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