"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _event = require("matrix-js-sdk/src/@types/event");

var _partials = require("matrix-js-sdk/src/@types/partials");

var _languageHandler = require("../../../languageHandler");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _AliasSettings = _interopRequireDefault(require("../room_settings/AliasSettings"));

var _useStateToggle = require("../../../hooks/useStateToggle");

var _LabelledToggleSwitch = _interopRequireDefault(require("../elements/LabelledToggleSwitch"));

var _useLocalEcho = require("../../../hooks/useLocalEcho");

var _JoinRuleSettings = _interopRequireDefault(require("../settings/JoinRuleSettings"));

var _useRoomState = require("../../../hooks/useRoomState");

var _SettingsFieldset = _interopRequireDefault(require("../settings/SettingsFieldset"));

var _useAsyncMemo = require("../../../hooks/useAsyncMemo");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const SpaceSettingsVisibilityTab = _ref => {
  let {
    matrixClient: cli,
    space,
    closeSettingsFn
  } = _ref;
  const [error, setError] = (0, _react.useState)("");
  const serverSupportsExploringSpaces = (0, _useAsyncMemo.useAsyncMemo)(async () => {
    return cli.doesServerSupportUnstableFeature("org.matrix.msc3827.stable");
  }, [cli], false);
  const userId = cli.getUserId();
  const joinRule = (0, _useRoomState.useRoomState)(space, state => state.getJoinRule());
  const [guestAccessEnabled, setGuestAccessEnabled] = (0, _useLocalEcho.useLocalEcho)(() => space.currentState.getStateEvents(_event.EventType.RoomGuestAccess, "")?.getContent()?.guest_access === _partials.GuestAccess.CanJoin, guestAccessEnabled => cli.sendStateEvent(space.roomId, _event.EventType.RoomGuestAccess, {
    guest_access: guestAccessEnabled ? _partials.GuestAccess.CanJoin : _partials.GuestAccess.Forbidden
  }, ""), () => setError((0, _languageHandler._t)("Failed to update the guest access of this space")));
  const [historyVisibility, setHistoryVisibility] = (0, _useLocalEcho.useLocalEcho)(() => space.currentState.getStateEvents(_event.EventType.RoomHistoryVisibility, "")?.getContent()?.history_visibility || _partials.HistoryVisibility.Shared, historyVisibility => cli.sendStateEvent(space.roomId, _event.EventType.RoomHistoryVisibility, {
    history_visibility: historyVisibility
  }, ""), () => setError((0, _languageHandler._t)("Failed to update the history visibility of this space")));
  const [showAdvancedSection, toggleAdvancedSection] = (0, _useStateToggle.useStateToggle)();
  const canSetGuestAccess = space.currentState.maySendStateEvent(_event.EventType.RoomGuestAccess, userId);
  const canSetHistoryVisibility = space.currentState.maySendStateEvent(_event.EventType.RoomHistoryVisibility, userId);
  const canSetCanonical = space.currentState.mayClientSendStateEvent(_event.EventType.RoomCanonicalAlias, cli);
  const canonicalAliasEv = space.currentState.getStateEvents(_event.EventType.RoomCanonicalAlias, "");
  let advancedSection;

  if (joinRule === _partials.JoinRule.Public) {
    advancedSection = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      "data-test-id": "toggle-guest-access-btn",
      onClick: toggleAdvancedSection,
      kind: "link",
      className: "mx_SettingsTab_showAdvanced"
    }, showAdvancedSection ? (0, _languageHandler._t)("Hide advanced") : (0, _languageHandler._t)("Show advanced")), showAdvancedSection && /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_toggleWithDescription"
    }, /*#__PURE__*/_react.default.createElement(_LabelledToggleSwitch.default, {
      value: guestAccessEnabled,
      onChange: setGuestAccessEnabled,
      disabled: !canSetGuestAccess,
      label: (0, _languageHandler._t)("Enable guest access")
    }), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Guests can join a space without having an account."), /*#__PURE__*/_react.default.createElement("br", null), (0, _languageHandler._t)("This may be useful for public spaces."))));
  }

  let addressesSection;

  if (space.getJoinRule() === _partials.JoinRule.Public) {
    addressesSection = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Address")), /*#__PURE__*/_react.default.createElement(_AliasSettings.default, {
      roomId: space.roomId,
      canSetCanonicalAlias: canSetCanonical,
      canSetAliases: true,
      canonicalAliasEvent: canonicalAliasEv,
      hidePublishSetting: !serverSupportsExploringSpaces
    }));
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SettingsTab"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SettingsTab_heading"
  }, (0, _languageHandler._t)("Visibility")), error && /*#__PURE__*/_react.default.createElement("div", {
    "data-test-id": "space-settings-error",
    className: "mx_SpaceRoomView_errorText"
  }, error), /*#__PURE__*/_react.default.createElement(_SettingsFieldset.default, {
    "data-test-id": "access-fieldset",
    legend: (0, _languageHandler._t)("Access"),
    description: (0, _languageHandler._t)("Decide who can view and join %(spaceName)s.", {
      spaceName: space.name
    })
  }, /*#__PURE__*/_react.default.createElement(_JoinRuleSettings.default, {
    room: space,
    onError: () => setError((0, _languageHandler._t)("Failed to update the visibility of this space")),
    closeSettingsFn: closeSettingsFn
  }), advancedSection, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_SettingsTab_toggleWithDescription"
  }, /*#__PURE__*/_react.default.createElement(_LabelledToggleSwitch.default, {
    value: historyVisibility === _partials.HistoryVisibility.WorldReadable,
    onChange: checked => {
      setHistoryVisibility(checked ? _partials.HistoryVisibility.WorldReadable : _partials.HistoryVisibility.Shared);
    },
    disabled: !canSetHistoryVisibility,
    label: (0, _languageHandler._t)("Preview Space")
  }), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Allow people to preview your space before they join."), /*#__PURE__*/_react.default.createElement("br", null), /*#__PURE__*/_react.default.createElement("b", null, (0, _languageHandler._t)("Recommended for public spaces."))))), addressesSection);
};

var _default = SpaceSettingsVisibilityTab;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,