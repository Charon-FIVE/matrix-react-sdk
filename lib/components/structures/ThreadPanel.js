"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ThreadPanelHeaderFilterOptionItem = exports.ThreadPanelHeader = exports.ThreadFilterType = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _thread = require("matrix-js-sdk/src/models/thread");

var _BaseCard = _interopRequireDefault(require("../views/right_panel/BaseCard"));

var _MatrixClientContext = _interopRequireDefault(require("../../contexts/MatrixClientContext"));

var _languageHandler = require("../../languageHandler");

var _ContextMenuButton = require("../../accessibility/context_menu/ContextMenuButton");

var _ContextMenu = _interopRequireWildcard(require("./ContextMenu"));

var _RoomContext = _interopRequireWildcard(require("../../contexts/RoomContext"));

var _TimelinePanel = _interopRequireDefault(require("./TimelinePanel"));

var _Layout = require("../../settings/enums/Layout");

var _Measured = _interopRequireDefault(require("../views/elements/Measured"));

var _PosthogTrackers = _interopRequireDefault(require("../../PosthogTrackers"));

var _AccessibleButton = _interopRequireDefault(require("../views/elements/AccessibleButton"));

var _BetaCard = require("../views/beta/BetaCard");

var _SdkConfig = _interopRequireDefault(require("../../SdkConfig"));

var _Modal = _interopRequireDefault(require("../../Modal"));

var _BetaFeedbackDialog = _interopRequireDefault(require("../views/dialogs/BetaFeedbackDialog"));

var _actions = require("../../dispatcher/actions");

var _UserTab = require("../views/dialogs/UserTab");

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var _Spinner = _interopRequireDefault(require("../views/elements/Spinner"));

var _Heading = _interopRequireDefault(require("../views/typography/Heading"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

let ThreadFilterType;
exports.ThreadFilterType = ThreadFilterType;

(function (ThreadFilterType) {
  ThreadFilterType[ThreadFilterType["My"] = 0] = "My";
  ThreadFilterType[ThreadFilterType["All"] = 1] = "All";
})(ThreadFilterType || (exports.ThreadFilterType = ThreadFilterType = {}));

const ThreadPanelHeaderFilterOptionItem = _ref => {
  let {
    label,
    description,
    onClick,
    isSelected
  } = _ref;
  return /*#__PURE__*/_react.default.createElement(_ContextMenu.MenuItemRadio, {
    active: isSelected,
    className: "mx_ThreadPanel_Header_FilterOptionItem",
    onClick: onClick
  }, /*#__PURE__*/_react.default.createElement("span", null, label), /*#__PURE__*/_react.default.createElement("span", null, description));
};

exports.ThreadPanelHeaderFilterOptionItem = ThreadPanelHeaderFilterOptionItem;

const ThreadPanelHeader = _ref2 => {
  let {
    filterOption,
    setFilterOption,
    empty
  } = _ref2;
  const [menuDisplayed, button, openMenu, closeMenu] = (0, _ContextMenu.useContextMenu)();
  const options = [{
    label: (0, _languageHandler._t)("All threads"),
    description: (0, _languageHandler._t)('Shows all threads from current room'),
    key: ThreadFilterType.All
  }, {
    label: (0, _languageHandler._t)("My threads"),
    description: (0, _languageHandler._t)("Shows all threads you've participated in"),
    key: ThreadFilterType.My
  }];
  const value = options.find(option => option.key === filterOption);
  const contextMenuOptions = options.map(opt => /*#__PURE__*/_react.default.createElement(ThreadPanelHeaderFilterOptionItem, {
    key: opt.key,
    label: opt.label,
    description: opt.description,
    onClick: () => {
      setFilterOption(opt.key);
      closeMenu();
    },
    isSelected: opt === value
  }));
  const contextMenu = menuDisplayed ? /*#__PURE__*/_react.default.createElement(_ContextMenu.default, {
    top: 108,
    right: 33,
    onFinished: closeMenu,
    chevronFace: _ContextMenu.ChevronFace.Top,
    wrapperClassName: "mx_BaseCard_header_title"
  }, contextMenuOptions) : null;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_BaseCard_header_title"
  }, /*#__PURE__*/_react.default.createElement(_Heading.default, {
    size: "h4",
    className: "mx_BaseCard_header_title_heading"
  }, (0, _languageHandler._t)("Threads")), !empty && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ContextMenuButton.ContextMenuButton, {
    className: "mx_ThreadPanel_dropdown",
    inputRef: button,
    isExpanded: menuDisplayed,
    onClick: ev => {
      openMenu();

      _PosthogTrackers.default.trackInteraction("WebRightPanelThreadPanelFilterDropdown", ev);
    }
  }, `${(0, _languageHandler._t)('Show:')} ${value.label}`), contextMenu));
};

exports.ThreadPanelHeader = ThreadPanelHeader;

const EmptyThread = _ref3 => {
  let {
    hasThreads,
    filterOption,
    showAllThreadsCallback
  } = _ref3;
  let body;

  if (hasThreads) {
    body = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Reply to an ongoing thread or use “%(replyInThread)s” " + "when hovering over a message to start a new one.", {
      replyInThread: (0, _languageHandler._t)("Reply in thread")
    })), /*#__PURE__*/_react.default.createElement("p", null, filterOption === ThreadFilterType.My ? /*#__PURE__*/_react.default.createElement("button", {
      onClick: showAllThreadsCallback
    }, (0, _languageHandler._t)("Show all threads")) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "\xA0")));
  } else {
    body = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Threads help keep your conversations on-topic and easy to track.")), /*#__PURE__*/_react.default.createElement("p", {
      className: "mx_ThreadPanel_empty_tip"
    }, (0, _languageHandler._t)('<b>Tip:</b> Use “%(replyInThread)s” when hovering over a message.', {
      replyInThread: (0, _languageHandler._t)("Reply in thread")
    }, {
      b: sub => /*#__PURE__*/_react.default.createElement("b", null, sub)
    })));
  }

  return /*#__PURE__*/_react.default.createElement("aside", {
    className: "mx_ThreadPanel_empty"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_ThreadPanel_largeIcon"
  }), /*#__PURE__*/_react.default.createElement("h2", null, (0, _languageHandler._t)("Keep discussions organised with threads")), body);
};

const ThreadPanel = _ref4 => {
  let {
    roomId,
    onClose,
    permalinkCreator
  } = _ref4;
  const mxClient = (0, _react.useContext)(_MatrixClientContext.default);
  const roomContext = (0, _react.useContext)(_RoomContext.default);
  const timelinePanel = (0, _react.useRef)();
  const card = (0, _react.useRef)();
  const [filterOption, setFilterOption] = (0, _react.useState)(ThreadFilterType.All);
  const [room, setRoom] = (0, _react.useState)(null);
  const [timelineSet, setTimelineSet] = (0, _react.useState)(null);
  const [narrow, setNarrow] = (0, _react.useState)(false);
  (0, _react.useEffect)(() => {
    const room = mxClient.getRoom(roomId);
    room.createThreadsTimelineSets().then(() => {
      return room.fetchRoomThreads();
    }).then(() => {
      setFilterOption(ThreadFilterType.All);
      setRoom(room);
    });
  }, [mxClient, roomId]);
  (0, _react.useEffect)(() => {
    function refreshTimeline() {
      timelinePanel?.current.refreshTimeline();
    }

    room?.on(_thread.ThreadEvent.Update, refreshTimeline);
    return () => {
      room?.removeListener(_thread.ThreadEvent.Update, refreshTimeline);
    };
  }, [room, mxClient, timelineSet]);
  (0, _react.useEffect)(() => {
    if (room) {
      if (filterOption === ThreadFilterType.My) {
        setTimelineSet(room.threadsTimelineSets[1]);
      } else {
        setTimelineSet(room.threadsTimelineSets[0]);
      }
    }
  }, [room, filterOption]);
  (0, _react.useEffect)(() => {
    if (timelineSet && !_thread.Thread.hasServerSideSupport) {
      timelinePanel.current.refreshTimeline();
    }
  }, [timelineSet, timelinePanel]);
  const openFeedback = _SdkConfig.default.get().bug_report_endpoint_url ? () => {
    _Modal.default.createDialog(_BetaFeedbackDialog.default, {
      featureId: "feature_thread"
    });
  } : null;
  return /*#__PURE__*/_react.default.createElement(_RoomContext.default.Provider, {
    value: _objectSpread(_objectSpread({}, roomContext), {}, {
      timelineRenderingType: _RoomContext.TimelineRenderingType.ThreadsList,
      showHiddenEvents: true,
      narrow
    })
  }, /*#__PURE__*/_react.default.createElement(_BaseCard.default, {
    header: /*#__PURE__*/_react.default.createElement(ThreadPanelHeader, {
      filterOption: filterOption,
      setFilterOption: setFilterOption,
      empty: !timelineSet?.getLiveTimeline()?.getEvents().length
    }),
    footer: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_BetaCard.BetaPill, {
      tooltipTitle: (0, _languageHandler._t)("Threads are a beta feature"),
      tooltipCaption: (0, _languageHandler._t)("Click for more info"),
      onClick: () => {
        _dispatcher.default.dispatch({
          action: _actions.Action.ViewUserSettings,
          initialTabId: _UserTab.UserTab.Labs
        });
      }
    }), openFeedback && (0, _languageHandler._t)("<a>Give feedback</a>", {}, {
      a: sub => /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        kind: "link_inline",
        onClick: openFeedback
      }, sub)
    })),
    className: "mx_ThreadPanel",
    onClose: onClose,
    withoutScrollContainer: true,
    ref: card
  }, /*#__PURE__*/_react.default.createElement(_Measured.default, {
    sensor: card.current,
    onMeasurement: setNarrow
  }), timelineSet ? /*#__PURE__*/_react.default.createElement(_TimelinePanel.default, {
    key: timelineSet.getFilter()?.filterId ?? roomId + ":" + filterOption,
    ref: timelinePanel,
    showReadReceipts: false // No RR support in thread's MVP
    ,
    manageReadReceipts: false // No RR support in thread's MVP
    ,
    manageReadMarkers: false // No RM support in thread's MVP
    ,
    sendReadReceiptOnLoad: false // No RR support in thread's MVP
    ,
    timelineSet: timelineSet,
    showUrlPreview: false // No URL previews at the threads list level
    ,
    empty: /*#__PURE__*/_react.default.createElement(EmptyThread, {
      hasThreads: room.threadsTimelineSets?.[0]?.getLiveTimeline().getEvents().length > 0,
      filterOption: filterOption,
      showAllThreadsCallback: () => setFilterOption(ThreadFilterType.All)
    }),
    alwaysShowTimestamps: true,
    layout: _Layout.Layout.Group,
    hideThreadedMessages: false,
    hidden: false,
    showReactions: false,
    className: "mx_RoomView_messagePanel",
    membersLoaded: true,
    permalinkCreator: permalinkCreator,
    disableGrouping: true
  }) : /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_AutoHideScrollbar"
  }, /*#__PURE__*/_react.default.createElement(_Spinner.default, null))));
};

var _default = ThreadPanel;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,