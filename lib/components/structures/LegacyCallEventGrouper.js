"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LegacyCallEventGrouperEvent = exports.CustomCallState = void 0;
exports.buildLegacyCallEventGroupers = buildLegacyCallEventGroupers;
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _event = require("matrix-js-sdk/src/@types/event");

var _call = require("matrix-js-sdk/src/webrtc/call");

var _events = require("events");

var _LegacyCallHandler = _interopRequireWildcard(require("../../LegacyCallHandler"));

var _MatrixClientPeg = require("../../MatrixClientPeg");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2021 Å imon Brandner <simon.bra.ag@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
let LegacyCallEventGrouperEvent;
exports.LegacyCallEventGrouperEvent = LegacyCallEventGrouperEvent;

(function (LegacyCallEventGrouperEvent) {
  LegacyCallEventGrouperEvent["StateChanged"] = "state_changed";
  LegacyCallEventGrouperEvent["SilencedChanged"] = "silenced_changed";
  LegacyCallEventGrouperEvent["LengthChanged"] = "length_changed";
})(LegacyCallEventGrouperEvent || (exports.LegacyCallEventGrouperEvent = LegacyCallEventGrouperEvent = {}));

const CONNECTING_STATES = [_call.CallState.Connecting, _call.CallState.WaitLocalMedia, _call.CallState.CreateOffer, _call.CallState.CreateAnswer];
const SUPPORTED_STATES = [_call.CallState.Connected, _call.CallState.Ringing];
let CustomCallState;
exports.CustomCallState = CustomCallState;

(function (CustomCallState) {
  CustomCallState["Missed"] = "missed";
})(CustomCallState || (exports.CustomCallState = CustomCallState = {}));

function buildLegacyCallEventGroupers(callEventGroupers, events) {
  const newCallEventGroupers = new Map();
  events?.forEach(ev => {
    if (!ev.getType().startsWith("m.call.") && !ev.getType().startsWith("org.matrix.call.")) {
      return;
    }

    const callId = ev.getContent().call_id;

    if (!newCallEventGroupers.has(callId)) {
      if (callEventGroupers.has(callId)) {
        // reuse the LegacyCallEventGrouper object where possible
        newCallEventGroupers.set(callId, callEventGroupers.get(callId));
      } else {
        newCallEventGroupers.set(callId, new LegacyCallEventGrouper());
      }
    }

    newCallEventGroupers.get(callId).add(ev);
  });
  return newCallEventGroupers;
}

class LegacyCallEventGrouper extends _events.EventEmitter {
  constructor() {
    super();
    (0, _defineProperty2.default)(this, "events", new Set());
    (0, _defineProperty2.default)(this, "call", void 0);
    (0, _defineProperty2.default)(this, "state", void 0);
    (0, _defineProperty2.default)(this, "onSilencedCallsChanged", () => {
      const newState = _LegacyCallHandler.default.instance.isCallSilenced(this.callId);

      this.emit(LegacyCallEventGrouperEvent.SilencedChanged, newState);
    });
    (0, _defineProperty2.default)(this, "onLengthChanged", length => {
      this.emit(LegacyCallEventGrouperEvent.LengthChanged, length);
    });
    (0, _defineProperty2.default)(this, "answerCall", () => {
      _LegacyCallHandler.default.instance.answerCall(this.roomId);
    });
    (0, _defineProperty2.default)(this, "rejectCall", () => {
      _LegacyCallHandler.default.instance.hangupOrReject(this.roomId, true);
    });
    (0, _defineProperty2.default)(this, "callBack", () => {
      _LegacyCallHandler.default.instance.placeCall(this.roomId, this.isVoice ? _call.CallType.Voice : _call.CallType.Video);
    });
    (0, _defineProperty2.default)(this, "toggleSilenced", () => {
      const silenced = _LegacyCallHandler.default.instance.isCallSilenced(this.callId);

      silenced ? _LegacyCallHandler.default.instance.unSilenceCall(this.callId) : _LegacyCallHandler.default.instance.silenceCall(this.callId);
    });
    (0, _defineProperty2.default)(this, "setState", () => {
      if (CONNECTING_STATES.includes(this.call?.state)) {
        this.state = _call.CallState.Connecting;
      } else if (SUPPORTED_STATES.includes(this.call?.state)) {
        this.state = this.call.state;
      } else {
        if (this.callWasMissed) this.state = CustomCallState.Missed;else if (this.reject) this.state = _call.CallState.Ended;else if (this.hangup) this.state = _call.CallState.Ended;else if (this.invite && this.call) this.state = _call.CallState.Connecting;
      }

      this.emit(LegacyCallEventGrouperEvent.StateChanged, this.state);
    });
    (0, _defineProperty2.default)(this, "setCall", () => {
      if (this.call) return;
      this.call = _LegacyCallHandler.default.instance.getCallById(this.callId);
      this.setCallListeners();
      this.setState();
    });

    _LegacyCallHandler.default.instance.addListener(_LegacyCallHandler.LegacyCallHandlerEvent.CallsChanged, this.setCall);

    _LegacyCallHandler.default.instance.addListener(_LegacyCallHandler.LegacyCallHandlerEvent.SilencedCallsChanged, this.onSilencedCallsChanged);
  }

  get invite() {
    return [...this.events].find(event => event.getType() === _event.EventType.CallInvite);
  }

  get hangup() {
    return [...this.events].find(event => event.getType() === _event.EventType.CallHangup);
  }

  get reject() {
    return [...this.events].find(event => event.getType() === _event.EventType.CallReject);
  }

  get selectAnswer() {
    return [...this.events].find(event => event.getType() === _event.EventType.CallSelectAnswer);
  }

  get isVoice() {
    const invite = this.invite;
    if (!invite) return; // FIXME: Find a better way to determine this from the event?

    if (invite.getContent()?.offer?.sdp?.indexOf('m=video') !== -1) return false;
    return true;
  }

  get hangupReason() {
    return this.hangup?.getContent()?.reason;
  }

  get rejectParty() {
    return this.reject?.getSender();
  }

  get gotRejected() {
    return Boolean(this.reject);
  }

  get duration() {
    if (!this.hangup || !this.selectAnswer) return;
    return new Date(this.hangup.getDate().getTime() - this.selectAnswer.getDate().getTime());
  }
  /**
   * Returns true if there are only events from the other side - we missed the call
   */


  get callWasMissed() {
    return ![...this.events].some(event => event.sender?.userId === _MatrixClientPeg.MatrixClientPeg.get().getUserId());
  }

  get callId() {
    return [...this.events][0]?.getContent()?.call_id;
  }

  get roomId() {
    return [...this.events][0]?.getRoomId();
  }

  setCallListeners() {
    if (!this.call) return;
    this.call.addListener(_call.CallEvent.State, this.setState);
    this.call.addListener(_call.CallEvent.LengthChanged, this.onLengthChanged);
  }

  add(event) {
    if (this.events.has(event)) return; // nothing to do

    this.events.add(event);
    this.setCall();
  }

}

exports.default = LegacyCallEventGrouper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJMZWdhY3lDYWxsRXZlbnRHcm91cGVyRXZlbnQiLCJDT05ORUNUSU5HX1NUQVRFUyIsIkNhbGxTdGF0ZSIsIkNvbm5lY3RpbmciLCJXYWl0TG9jYWxNZWRpYSIsIkNyZWF0ZU9mZmVyIiwiQ3JlYXRlQW5zd2VyIiwiU1VQUE9SVEVEX1NUQVRFUyIsIkNvbm5lY3RlZCIsIlJpbmdpbmciLCJDdXN0b21DYWxsU3RhdGUiLCJidWlsZExlZ2FjeUNhbGxFdmVudEdyb3VwZXJzIiwiY2FsbEV2ZW50R3JvdXBlcnMiLCJldmVudHMiLCJuZXdDYWxsRXZlbnRHcm91cGVycyIsIk1hcCIsImZvckVhY2giLCJldiIsImdldFR5cGUiLCJzdGFydHNXaXRoIiwiY2FsbElkIiwiZ2V0Q29udGVudCIsImNhbGxfaWQiLCJoYXMiLCJzZXQiLCJnZXQiLCJMZWdhY3lDYWxsRXZlbnRHcm91cGVyIiwiYWRkIiwiRXZlbnRFbWl0dGVyIiwiY29uc3RydWN0b3IiLCJTZXQiLCJuZXdTdGF0ZSIsIkxlZ2FjeUNhbGxIYW5kbGVyIiwiaW5zdGFuY2UiLCJpc0NhbGxTaWxlbmNlZCIsImVtaXQiLCJTaWxlbmNlZENoYW5nZWQiLCJsZW5ndGgiLCJMZW5ndGhDaGFuZ2VkIiwiYW5zd2VyQ2FsbCIsInJvb21JZCIsImhhbmd1cE9yUmVqZWN0IiwicGxhY2VDYWxsIiwiaXNWb2ljZSIsIkNhbGxUeXBlIiwiVm9pY2UiLCJWaWRlbyIsInNpbGVuY2VkIiwidW5TaWxlbmNlQ2FsbCIsInNpbGVuY2VDYWxsIiwiaW5jbHVkZXMiLCJjYWxsIiwic3RhdGUiLCJjYWxsV2FzTWlzc2VkIiwiTWlzc2VkIiwicmVqZWN0IiwiRW5kZWQiLCJoYW5ndXAiLCJpbnZpdGUiLCJTdGF0ZUNoYW5nZWQiLCJnZXRDYWxsQnlJZCIsInNldENhbGxMaXN0ZW5lcnMiLCJzZXRTdGF0ZSIsImFkZExpc3RlbmVyIiwiTGVnYWN5Q2FsbEhhbmRsZXJFdmVudCIsIkNhbGxzQ2hhbmdlZCIsInNldENhbGwiLCJTaWxlbmNlZENhbGxzQ2hhbmdlZCIsIm9uU2lsZW5jZWRDYWxsc0NoYW5nZWQiLCJmaW5kIiwiZXZlbnQiLCJFdmVudFR5cGUiLCJDYWxsSW52aXRlIiwiQ2FsbEhhbmd1cCIsIkNhbGxSZWplY3QiLCJzZWxlY3RBbnN3ZXIiLCJDYWxsU2VsZWN0QW5zd2VyIiwib2ZmZXIiLCJzZHAiLCJpbmRleE9mIiwiaGFuZ3VwUmVhc29uIiwicmVhc29uIiwicmVqZWN0UGFydHkiLCJnZXRTZW5kZXIiLCJnb3RSZWplY3RlZCIsIkJvb2xlYW4iLCJkdXJhdGlvbiIsIkRhdGUiLCJnZXREYXRlIiwiZ2V0VGltZSIsInNvbWUiLCJzZW5kZXIiLCJ1c2VySWQiLCJNYXRyaXhDbGllbnRQZWciLCJnZXRVc2VySWQiLCJnZXRSb29tSWQiLCJDYWxsRXZlbnQiLCJTdGF0ZSIsIm9uTGVuZ3RoQ2hhbmdlZCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3N0cnVjdHVyZXMvTGVnYWN5Q2FsbEV2ZW50R3JvdXBlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMjEgxaBpbW9uIEJyYW5kbmVyIDxzaW1vbi5icmEuYWdAZ21haWwuY29tPlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCB7IEV2ZW50VHlwZSB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9AdHlwZXMvZXZlbnRcIjtcbmltcG9ydCB7IE1hdHJpeEV2ZW50IH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL21vZGVscy9ldmVudFwiO1xuaW1wb3J0IHsgQ2FsbEV2ZW50LCBDYWxsU3RhdGUsIENhbGxUeXBlLCBNYXRyaXhDYWxsIH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL3dlYnJ0Yy9jYWxsXCI7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdldmVudHMnO1xuXG5pbXBvcnQgTGVnYWN5Q2FsbEhhbmRsZXIsIHsgTGVnYWN5Q2FsbEhhbmRsZXJFdmVudCB9IGZyb20gJy4uLy4uL0xlZ2FjeUNhbGxIYW5kbGVyJztcbmltcG9ydCB7IE1hdHJpeENsaWVudFBlZyB9IGZyb20gXCIuLi8uLi9NYXRyaXhDbGllbnRQZWdcIjtcblxuZXhwb3J0IGVudW0gTGVnYWN5Q2FsbEV2ZW50R3JvdXBlckV2ZW50IHtcbiAgICBTdGF0ZUNoYW5nZWQgPSBcInN0YXRlX2NoYW5nZWRcIixcbiAgICBTaWxlbmNlZENoYW5nZWQgPSBcInNpbGVuY2VkX2NoYW5nZWRcIixcbiAgICBMZW5ndGhDaGFuZ2VkID0gXCJsZW5ndGhfY2hhbmdlZFwiLFxufVxuXG5jb25zdCBDT05ORUNUSU5HX1NUQVRFUyA9IFtcbiAgICBDYWxsU3RhdGUuQ29ubmVjdGluZyxcbiAgICBDYWxsU3RhdGUuV2FpdExvY2FsTWVkaWEsXG4gICAgQ2FsbFN0YXRlLkNyZWF0ZU9mZmVyLFxuICAgIENhbGxTdGF0ZS5DcmVhdGVBbnN3ZXIsXG5dO1xuXG5jb25zdCBTVVBQT1JURURfU1RBVEVTID0gW1xuICAgIENhbGxTdGF0ZS5Db25uZWN0ZWQsXG4gICAgQ2FsbFN0YXRlLlJpbmdpbmcsXG5dO1xuXG5leHBvcnQgZW51bSBDdXN0b21DYWxsU3RhdGUge1xuICAgIE1pc3NlZCA9IFwibWlzc2VkXCIsXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZExlZ2FjeUNhbGxFdmVudEdyb3VwZXJzKFxuICAgIGNhbGxFdmVudEdyb3VwZXJzOiBNYXA8c3RyaW5nLCBMZWdhY3lDYWxsRXZlbnRHcm91cGVyPixcbiAgICBldmVudHM/OiBNYXRyaXhFdmVudFtdLFxuKTogTWFwPHN0cmluZywgTGVnYWN5Q2FsbEV2ZW50R3JvdXBlcj4ge1xuICAgIGNvbnN0IG5ld0NhbGxFdmVudEdyb3VwZXJzID0gbmV3IE1hcCgpO1xuICAgIGV2ZW50cz8uZm9yRWFjaChldiA9PiB7XG4gICAgICAgIGlmICghZXYuZ2V0VHlwZSgpLnN0YXJ0c1dpdGgoXCJtLmNhbGwuXCIpICYmICFldi5nZXRUeXBlKCkuc3RhcnRzV2l0aChcIm9yZy5tYXRyaXguY2FsbC5cIikpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNhbGxJZCA9IGV2LmdldENvbnRlbnQoKS5jYWxsX2lkO1xuICAgICAgICBpZiAoIW5ld0NhbGxFdmVudEdyb3VwZXJzLmhhcyhjYWxsSWQpKSB7XG4gICAgICAgICAgICBpZiAoY2FsbEV2ZW50R3JvdXBlcnMuaGFzKGNhbGxJZCkpIHtcbiAgICAgICAgICAgICAgICAvLyByZXVzZSB0aGUgTGVnYWN5Q2FsbEV2ZW50R3JvdXBlciBvYmplY3Qgd2hlcmUgcG9zc2libGVcbiAgICAgICAgICAgICAgICBuZXdDYWxsRXZlbnRHcm91cGVycy5zZXQoY2FsbElkLCBjYWxsRXZlbnRHcm91cGVycy5nZXQoY2FsbElkKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5ld0NhbGxFdmVudEdyb3VwZXJzLnNldChjYWxsSWQsIG5ldyBMZWdhY3lDYWxsRXZlbnRHcm91cGVyKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG5ld0NhbGxFdmVudEdyb3VwZXJzLmdldChjYWxsSWQpLmFkZChldik7XG4gICAgfSk7XG4gICAgcmV0dXJuIG5ld0NhbGxFdmVudEdyb3VwZXJzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMZWdhY3lDYWxsRXZlbnRHcm91cGVyIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgICBwcml2YXRlIGV2ZW50czogU2V0PE1hdHJpeEV2ZW50PiA9IG5ldyBTZXQ8TWF0cml4RXZlbnQ+KCk7XG4gICAgcHJpdmF0ZSBjYWxsOiBNYXRyaXhDYWxsO1xuICAgIHB1YmxpYyBzdGF0ZTogQ2FsbFN0YXRlIHwgQ3VzdG9tQ2FsbFN0YXRlO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgTGVnYWN5Q2FsbEhhbmRsZXIuaW5zdGFuY2UuYWRkTGlzdGVuZXIoTGVnYWN5Q2FsbEhhbmRsZXJFdmVudC5DYWxsc0NoYW5nZWQsIHRoaXMuc2V0Q2FsbCk7XG4gICAgICAgIExlZ2FjeUNhbGxIYW5kbGVyLmluc3RhbmNlLmFkZExpc3RlbmVyKFxuICAgICAgICAgICAgTGVnYWN5Q2FsbEhhbmRsZXJFdmVudC5TaWxlbmNlZENhbGxzQ2hhbmdlZCwgdGhpcy5vblNpbGVuY2VkQ2FsbHNDaGFuZ2VkLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0IGludml0ZSgpOiBNYXRyaXhFdmVudCB7XG4gICAgICAgIHJldHVybiBbLi4udGhpcy5ldmVudHNdLmZpbmQoKGV2ZW50KSA9PiBldmVudC5nZXRUeXBlKCkgPT09IEV2ZW50VHlwZS5DYWxsSW52aXRlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldCBoYW5ndXAoKTogTWF0cml4RXZlbnQge1xuICAgICAgICByZXR1cm4gWy4uLnRoaXMuZXZlbnRzXS5maW5kKChldmVudCkgPT4gZXZlbnQuZ2V0VHlwZSgpID09PSBFdmVudFR5cGUuQ2FsbEhhbmd1cCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXQgcmVqZWN0KCk6IE1hdHJpeEV2ZW50IHtcbiAgICAgICAgcmV0dXJuIFsuLi50aGlzLmV2ZW50c10uZmluZCgoZXZlbnQpID0+IGV2ZW50LmdldFR5cGUoKSA9PT0gRXZlbnRUeXBlLkNhbGxSZWplY3QpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0IHNlbGVjdEFuc3dlcigpOiBNYXRyaXhFdmVudCB7XG4gICAgICAgIHJldHVybiBbLi4udGhpcy5ldmVudHNdLmZpbmQoKGV2ZW50KSA9PiBldmVudC5nZXRUeXBlKCkgPT09IEV2ZW50VHlwZS5DYWxsU2VsZWN0QW5zd2VyKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGlzVm9pY2UoKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IGludml0ZSA9IHRoaXMuaW52aXRlO1xuICAgICAgICBpZiAoIWludml0ZSkgcmV0dXJuO1xuXG4gICAgICAgIC8vIEZJWE1FOiBGaW5kIGEgYmV0dGVyIHdheSB0byBkZXRlcm1pbmUgdGhpcyBmcm9tIHRoZSBldmVudD9cbiAgICAgICAgaWYgKGludml0ZS5nZXRDb250ZW50KCk/Lm9mZmVyPy5zZHA/LmluZGV4T2YoJ209dmlkZW8nKSAhPT0gLTEpIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBoYW5ndXBSZWFzb24oKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhbmd1cD8uZ2V0Q29udGVudCgpPy5yZWFzb247XG4gICAgfVxuXG4gICAgcHVibGljIGdldCByZWplY3RQYXJ0eSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWplY3Q/LmdldFNlbmRlcigpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgZ290UmVqZWN0ZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBCb29sZWFuKHRoaXMucmVqZWN0KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGR1cmF0aW9uKCk6IERhdGUge1xuICAgICAgICBpZiAoIXRoaXMuaGFuZ3VwIHx8ICF0aGlzLnNlbGVjdEFuc3dlcikgcmV0dXJuO1xuICAgICAgICByZXR1cm4gbmV3IERhdGUodGhpcy5oYW5ndXAuZ2V0RGF0ZSgpLmdldFRpbWUoKSAtIHRoaXMuc2VsZWN0QW5zd2VyLmdldERhdGUoKS5nZXRUaW1lKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGVyZSBhcmUgb25seSBldmVudHMgZnJvbSB0aGUgb3RoZXIgc2lkZSAtIHdlIG1pc3NlZCB0aGUgY2FsbFxuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0IGNhbGxXYXNNaXNzZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhWy4uLnRoaXMuZXZlbnRzXS5zb21lKChldmVudCkgPT4gZXZlbnQuc2VuZGVyPy51c2VySWQgPT09IE1hdHJpeENsaWVudFBlZy5nZXQoKS5nZXRVc2VySWQoKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXQgY2FsbElkKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiBbLi4udGhpcy5ldmVudHNdWzBdPy5nZXRDb250ZW50KCk/LmNhbGxfaWQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXQgcm9vbUlkKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiBbLi4udGhpcy5ldmVudHNdWzBdPy5nZXRSb29tSWQoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uU2lsZW5jZWRDYWxsc0NoYW5nZWQgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld1N0YXRlID0gTGVnYWN5Q2FsbEhhbmRsZXIuaW5zdGFuY2UuaXNDYWxsU2lsZW5jZWQodGhpcy5jYWxsSWQpO1xuICAgICAgICB0aGlzLmVtaXQoTGVnYWN5Q2FsbEV2ZW50R3JvdXBlckV2ZW50LlNpbGVuY2VkQ2hhbmdlZCwgbmV3U3RhdGUpO1xuICAgIH07XG5cbiAgICBwcml2YXRlIG9uTGVuZ3RoQ2hhbmdlZCA9IChsZW5ndGg6IG51bWJlcik6IHZvaWQgPT4ge1xuICAgICAgICB0aGlzLmVtaXQoTGVnYWN5Q2FsbEV2ZW50R3JvdXBlckV2ZW50Lkxlbmd0aENoYW5nZWQsIGxlbmd0aCk7XG4gICAgfTtcblxuICAgIHB1YmxpYyBhbnN3ZXJDYWxsID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICBMZWdhY3lDYWxsSGFuZGxlci5pbnN0YW5jZS5hbnN3ZXJDYWxsKHRoaXMucm9vbUlkKTtcbiAgICB9O1xuXG4gICAgcHVibGljIHJlamVjdENhbGwgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgIExlZ2FjeUNhbGxIYW5kbGVyLmluc3RhbmNlLmhhbmd1cE9yUmVqZWN0KHRoaXMucm9vbUlkLCB0cnVlKTtcbiAgICB9O1xuXG4gICAgcHVibGljIGNhbGxCYWNrID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICBMZWdhY3lDYWxsSGFuZGxlci5pbnN0YW5jZS5wbGFjZUNhbGwodGhpcy5yb29tSWQsIHRoaXMuaXNWb2ljZSA/IENhbGxUeXBlLlZvaWNlIDogQ2FsbFR5cGUuVmlkZW8pO1xuICAgIH07XG5cbiAgICBwdWJsaWMgdG9nZ2xlU2lsZW5jZWQgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNpbGVuY2VkID0gTGVnYWN5Q2FsbEhhbmRsZXIuaW5zdGFuY2UuaXNDYWxsU2lsZW5jZWQodGhpcy5jYWxsSWQpO1xuICAgICAgICBzaWxlbmNlZCA/XG4gICAgICAgICAgICBMZWdhY3lDYWxsSGFuZGxlci5pbnN0YW5jZS51blNpbGVuY2VDYWxsKHRoaXMuY2FsbElkKSA6XG4gICAgICAgICAgICBMZWdhY3lDYWxsSGFuZGxlci5pbnN0YW5jZS5zaWxlbmNlQ2FsbCh0aGlzLmNhbGxJZCk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgc2V0Q2FsbExpc3RlbmVycygpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNhbGwpIHJldHVybjtcbiAgICAgICAgdGhpcy5jYWxsLmFkZExpc3RlbmVyKENhbGxFdmVudC5TdGF0ZSwgdGhpcy5zZXRTdGF0ZSk7XG4gICAgICAgIHRoaXMuY2FsbC5hZGRMaXN0ZW5lcihDYWxsRXZlbnQuTGVuZ3RoQ2hhbmdlZCwgdGhpcy5vbkxlbmd0aENoYW5nZWQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0U3RhdGUgPSAoKSA9PiB7XG4gICAgICAgIGlmIChDT05ORUNUSU5HX1NUQVRFUy5pbmNsdWRlcyh0aGlzLmNhbGw/LnN0YXRlKSkge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IENhbGxTdGF0ZS5Db25uZWN0aW5nO1xuICAgICAgICB9IGVsc2UgaWYgKFNVUFBPUlRFRF9TVEFURVMuaW5jbHVkZXModGhpcy5jYWxsPy5zdGF0ZSkpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSB0aGlzLmNhbGwuc3RhdGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jYWxsV2FzTWlzc2VkKSB0aGlzLnN0YXRlID0gQ3VzdG9tQ2FsbFN0YXRlLk1pc3NlZDtcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMucmVqZWN0KSB0aGlzLnN0YXRlID0gQ2FsbFN0YXRlLkVuZGVkO1xuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5oYW5ndXApIHRoaXMuc3RhdGUgPSBDYWxsU3RhdGUuRW5kZWQ7XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmludml0ZSAmJiB0aGlzLmNhbGwpIHRoaXMuc3RhdGUgPSBDYWxsU3RhdGUuQ29ubmVjdGluZztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVtaXQoTGVnYWN5Q2FsbEV2ZW50R3JvdXBlckV2ZW50LlN0YXRlQ2hhbmdlZCwgdGhpcy5zdGF0ZSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgc2V0Q2FsbCA9ICgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuY2FsbCkgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMuY2FsbCA9IExlZ2FjeUNhbGxIYW5kbGVyLmluc3RhbmNlLmdldENhbGxCeUlkKHRoaXMuY2FsbElkKTtcbiAgICAgICAgdGhpcy5zZXRDYWxsTGlzdGVuZXJzKCk7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoKTtcbiAgICB9O1xuXG4gICAgcHVibGljIGFkZChldmVudDogTWF0cml4RXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuZXZlbnRzLmhhcyhldmVudCkpIHJldHVybjsgLy8gbm90aGluZyB0byBkb1xuICAgICAgICB0aGlzLmV2ZW50cy5hZGQoZXZlbnQpO1xuICAgICAgICB0aGlzLnNldENhbGwoKTtcbiAgICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFnQkE7O0FBRUE7O0FBQ0E7O0FBRUE7O0FBQ0E7Ozs7OztBQXRCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7SUFVWUEsMkI7OztXQUFBQSwyQjtFQUFBQSwyQjtFQUFBQSwyQjtFQUFBQSwyQjtHQUFBQSwyQiwyQ0FBQUEsMkI7O0FBTVosTUFBTUMsaUJBQWlCLEdBQUcsQ0FDdEJDLGVBQUEsQ0FBVUMsVUFEWSxFQUV0QkQsZUFBQSxDQUFVRSxjQUZZLEVBR3RCRixlQUFBLENBQVVHLFdBSFksRUFJdEJILGVBQUEsQ0FBVUksWUFKWSxDQUExQjtBQU9BLE1BQU1DLGdCQUFnQixHQUFHLENBQ3JCTCxlQUFBLENBQVVNLFNBRFcsRUFFckJOLGVBQUEsQ0FBVU8sT0FGVyxDQUF6QjtJQUtZQyxlOzs7V0FBQUEsZTtFQUFBQSxlO0dBQUFBLGUsK0JBQUFBLGU7O0FBSUwsU0FBU0MsNEJBQVQsQ0FDSEMsaUJBREcsRUFFSEMsTUFGRyxFQUdnQztFQUNuQyxNQUFNQyxvQkFBb0IsR0FBRyxJQUFJQyxHQUFKLEVBQTdCO0VBQ0FGLE1BQU0sRUFBRUcsT0FBUixDQUFnQkMsRUFBRSxJQUFJO0lB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