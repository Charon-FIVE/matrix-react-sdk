"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GenericDropdownMenu = GenericDropdownMenu;
exports.GenericDropdownMenuGroup = GenericDropdownMenuGroup;
exports.GenericDropdownMenuOption = GenericDropdownMenuOption;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

var _MenuItemRadio = require("../../accessibility/context_menu/MenuItemRadio");

var _ContextMenu = _interopRequireWildcard(require("./ContextMenu"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2022 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
function GenericDropdownMenuOption(_ref) {
  let {
    label,
    description,
    onClick,
    isSelected,
    adornment
  } = _ref;
  return /*#__PURE__*/_react.default.createElement(_MenuItemRadio.MenuItemRadio, {
    active: isSelected,
    className: "mx_GenericDropdownMenu_Option mx_GenericDropdownMenu_Option--item",
    onClick: onClick
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_GenericDropdownMenu_Option--label"
  }, /*#__PURE__*/_react.default.createElement("span", null, label), /*#__PURE__*/_react.default.createElement("span", null, description)), adornment);
}

function GenericDropdownMenuGroup(_ref2) {
  let {
    label,
    description,
    adornment,
    children
  } = _ref2;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_GenericDropdownMenu_Option mx_GenericDropdownMenu_Option--header"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_GenericDropdownMenu_Option--label"
  }, /*#__PURE__*/_react.default.createElement("span", null, label), /*#__PURE__*/_react.default.createElement("span", null, description)), adornment), children);
}

function isGenericDropdownMenuGroup(item) {
  return "options" in item;
}

function GenericDropdownMenu(_ref3) {
  let {
    value,
    onChange,
    options,
    selectedLabel,
    onOpen,
    onClose,
    toKey,
    className,
    AdditionalOptions
  } = _ref3;
  const [menuDisplayed, button, openMenu, closeMenu] = (0, _ContextMenu.useContextMenu)();
  const selected = options.flatMap(it => isGenericDropdownMenuGroup(it) ? [it, ...it.options] : [it]).find(option => toKey ? toKey(option.key) === toKey(value) : option.key === value);
  let contextMenuOptions;

  if (options && isGenericDropdownMenuGroup(options[0])) {
    contextMenuOptions = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, options.map(group => /*#__PURE__*/_react.default.createElement(GenericDropdownMenuGroup, {
      key: toKey?.(group.key) ?? group.key,
      label: group.label,
      description: group.description,
      adornment: group.adornment
    }, group.options.map(option => /*#__PURE__*/_react.default.createElement(GenericDropdownMenuOption, {
      key: toKey?.(option.key) ?? option.key,
      label: option.label,
      description: option.description,
      onClick: ev => {
        onChange(option.key);
        closeMenu();
        onClose?.(ev);
      },
      adornment: option.adornment,
      isSelected: option === selected
    })))));
  } else {
    contextMenuOptions = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, options.map(option => /*#__PURE__*/_react.default.createElement(GenericDropdownMenuOption, {
      key: toKey?.(option.key) ?? option.key,
      label: option.label,
      description: option.description,
      onClick: ev => {
        onChange(option.key);
        closeMenu();
        onClose?.(ev);
      },
      adornment: option.adornment,
      isSelected: option === selected
    })));
  }

  const contextMenu = menuDisplayed ? /*#__PURE__*/_react.default.createElement(_ContextMenu.default, (0, _extends2.default)({
    onFinished: closeMenu,
    chevronFace: _ContextMenu.ChevronFace.Top,
    wrapperClassName: (0, _classnames.default)("mx_GenericDropdownMenu_wrapper", className)
  }, (0, _ContextMenu.aboveLeftOf)(button.current.getBoundingClientRect())), contextMenuOptions, AdditionalOptions && /*#__PURE__*/_react.default.createElement(AdditionalOptions, {
    menuDisplayed: menuDisplayed,
    openMenu: openMenu,
    closeMenu: closeMenu
  })) : null;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ContextMenu.ContextMenuButton, {
    className: "mx_GenericDropdownMenu_button",
    inputRef: button,
    isExpanded: menuDisplayed,
    onClick: ev => {
      openMenu();
      onOpen?.(ev);
    }
  }, selectedLabel(selected)), contextMenu);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHZW5lcmljRHJvcGRvd25NZW51T3B0aW9uIiwibGFiZWwiLCJkZXNjcmlwdGlvbiIsIm9uQ2xpY2siLCJpc1NlbGVjdGVkIiwiYWRvcm5tZW50IiwiR2VuZXJpY0Ryb3Bkb3duTWVudUdyb3VwIiwiY2hpbGRyZW4iLCJpc0dlbmVyaWNEcm9wZG93bk1lbnVHcm91cCIsIml0ZW0iLCJHZW5lcmljRHJvcGRvd25NZW51IiwidmFsdWUiLCJvbkNoYW5nZSIsIm9wdGlvbnMiLCJzZWxlY3RlZExhYmVsIiwib25PcGVuIiwib25DbG9zZSIsInRvS2V5IiwiY2xhc3NOYW1lIiwiQWRkaXRpb25hbE9wdGlvbnMiLCJtZW51RGlzcGxheWVkIiwiYnV0dG9uIiwib3Blbk1lbnUiLCJjbG9zZU1lbnUiLCJ1c2VDb250ZXh0TWVudSIsInNlbGVjdGVkIiwiZmxhdE1hcCIsIml0IiwiZmluZCIsIm9wdGlvbiIsImtleSIsImNvbnRleHRNZW51T3B0aW9ucyIsIm1hcCIsImdyb3VwIiwiZXYiLCJjb250ZXh0TWVudSIsIkNoZXZyb25GYWNlIiwiVG9wIiwiY2xhc3NOYW1lcyIsImFib3ZlTGVmdE9mIiwiY3VycmVudCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3N0cnVjdHVyZXMvR2VuZXJpY0Ryb3Bkb3duTWVudS50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDIyIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSBcImNsYXNzbmFtZXNcIjtcbmltcG9ydCBSZWFjdCwgeyBGdW5jdGlvbkNvbXBvbmVudCwgS2V5LCBQcm9wc1dpdGhDaGlsZHJlbiwgUmVhY3ROb2RlIH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IE1lbnVJdGVtUmFkaW8gfSBmcm9tIFwiLi4vLi4vYWNjZXNzaWJpbGl0eS9jb250ZXh0X21lbnUvTWVudUl0ZW1SYWRpb1wiO1xuaW1wb3J0IHsgQnV0dG9uRXZlbnQgfSBmcm9tIFwiLi4vdmlld3MvZWxlbWVudHMvQWNjZXNzaWJsZUJ1dHRvblwiO1xuaW1wb3J0IENvbnRleHRNZW51LCB7IGFib3ZlTGVmdE9mLCBDaGV2cm9uRmFjZSwgQ29udGV4dE1lbnVCdXR0b24sIHVzZUNvbnRleHRNZW51IH0gZnJvbSBcIi4vQ29udGV4dE1lbnVcIjtcblxuZXhwb3J0IHR5cGUgR2VuZXJpY0Ryb3Bkb3duTWVudU9wdGlvbjxUPiA9IHtcbiAgICBrZXk6IFQ7XG4gICAgbGFiZWw6IFJlYWN0Tm9kZTtcbiAgICBkZXNjcmlwdGlvbj86IFJlYWN0Tm9kZTtcbiAgICBhZG9ybm1lbnQ/OiBSZWFjdE5vZGU7XG59O1xuXG5leHBvcnQgdHlwZSBHZW5lcmljRHJvcGRvd25NZW51R3JvdXA8VD4gPSBHZW5lcmljRHJvcGRvd25NZW51T3B0aW9uPFQ+ICYge1xuICAgIG9wdGlvbnM6IEdlbmVyaWNEcm9wZG93bk1lbnVPcHRpb248VD5bXTtcbn07XG5cbmV4cG9ydCB0eXBlIEdlbmVyaWNEcm9wZG93bk1lbnVJdGVtPFQ+ID0gR2VuZXJpY0Ryb3Bkb3duTWVudUdyb3VwPFQ+IHwgR2VuZXJpY0Ryb3Bkb3duTWVudU9wdGlvbjxUPjtcblxuZXhwb3J0IGZ1bmN0aW9uIEdlbmVyaWNEcm9wZG93bk1lbnVPcHRpb248VCBleHRlbmRzIEtleT4oe1xuICAgIGxhYmVsLFxuICAgIGRlc2NyaXB0aW9uLFxuICAgIG9uQ2xpY2ssXG4gICAgaXNTZWxlY3RlZCxcbiAgICBhZG9ybm1lbnQsXG59OiBHZW5lcmljRHJvcGRvd25NZW51T3B0aW9uPFQ+ICYge1xuICAgIG9uQ2xpY2s6IChldjogQnV0dG9uRXZlbnQpID0+IHZvaWQ7XG4gICAgaXNTZWxlY3RlZDogYm9vbGVhbjtcbn0pOiBKU1guRWxlbWVudCB7XG4gICAgcmV0dXJuIDxNZW51SXRlbVJhZGlvXG4gICAgICAgIGFjdGl2ZT17aXNTZWxlY3RlZH1cbiAgICAgICAgY2xhc3NOYW1lPVwibXhfR2VuZXJpY0Ryb3Bkb3duTWVudV9PcHRpb24gbXhfR2VuZXJpY0Ryb3Bkb3duTWVudV9PcHRpb24tLWl0ZW1cIlxuICAgICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgID5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9HZW5lcmljRHJvcGRvd25NZW51X09wdGlvbi0tbGFiZWxcIj5cbiAgICAgICAgICAgIDxzcGFuPnsgbGFiZWwgfTwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuPnsgZGVzY3JpcHRpb24gfTwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIHsgYWRvcm5tZW50IH1cbiAgICA8L01lbnVJdGVtUmFkaW8+O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gR2VuZXJpY0Ryb3Bkb3duTWVudUdyb3VwPFQgZXh0ZW5kcyBLZXk+KHtcbiAgICBsYWJlbCxcbiAgICBkZXNjcmlwdGlvbixcbiAgICBhZG9ybm1lbnQsXG4gICAgY2hpbGRyZW4sXG59OiBQcm9wc1dpdGhDaGlsZHJlbjxHZW5lcmljRHJvcGRvd25NZW51T3B0aW9uPFQ+Pik6IEpTWC5FbGVtZW50IHtcbiAgICByZXR1cm4gPD5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9HZW5lcmljRHJvcGRvd25NZW51X09wdGlvbiBteF9HZW5lcmljRHJvcGRvd25NZW51X09wdGlvbi0taGVhZGVyXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14X0dlbmVyaWNEcm9wZG93bk1lbnVfT3B0aW9uLS1sYWJlbFwiPlxuICAgICAgICAgICAgICAgIDxzcGFuPnsgbGFiZWwgfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8c3Bhbj57IGRlc2NyaXB0aW9uIH08L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIHsgYWRvcm5tZW50IH1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIHsgY2hpbGRyZW4gfVxuICAgIDwvPjtcbn1cblxuZnVuY3Rpb24gaXNHZW5lcmljRHJvcGRvd25NZW51R3JvdXA8VD4oXG4gICAgaXRlbTogR2VuZXJpY0Ryb3Bkb3duTWVudUl0ZW08VD4sXG4pOiBpdGVtIGlzIEdlbmVyaWNEcm9wZG93bk1lbnVHcm91cDxUPiB7XG4gICAgcmV0dXJuIFwib3B0aW9uc1wiIGluIGl0ZW07XG59XG5cbnR5cGUgV2l0aEtleUZ1bmN0aW9uPFQ+ID0gVCBleHRlbmRzIEtleSA/IHtcbiAgICB0b0tleT86IChrZXk6IFQpID0+IEtleTtcbn0gOiB7XG4gICAgdG9LZXk6IChrZXk6IFQpID0+IEtleTtcbn07XG5cbnR5cGUgSVByb3BzPFQ+ID0gV2l0aEtleUZ1bmN0aW9uPFQ+ICYge1xuICAgIHZhbHVlOiBUO1xuICAgIG9wdGlvbnM6IChyZWFkb25seSBHZW5lcmljRHJvcGRvd25NZW51T3B0aW9uPFQ+W10gfCByZWFkb25seSBHZW5lcmljRHJvcGRvd25NZW51R3JvdXA8VD5bXSk7XG4gICAgb25DaGFuZ2U6IChvcHRpb246IFQpID0+IHZvaWQ7XG4gICAgc2VsZWN0ZWRMYWJlbDogKG9wdGlvbjogR2VuZXJpY0Ryb3Bkb3duTWVudUl0ZW08VD4gfCBudWxsIHwgdW5kZWZpbmVkKSA9PiBSZWFjdE5vZGU7XG4gICAgb25PcGVuPzogKGV2OiBCdXR0b25FdmVudCkgPT4gdm9pZDtcbiAgICBvbkNsb3NlPzogKGV2OiBCdXR0b25FdmVudCkgPT4gdm9pZDtcbiAgICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gICAgQWRkaXRpb25hbE9wdGlvbnM/OiBGdW5jdGlvbkNvbXBvbmVudDx7XG4gICAgICAgIG1lbnVEaXNwbGF5ZWQ6IGJvb2xlYW47XG4gICAgICAgIGNsb3NlTWVudTogKCkgPT4gdm9pZDtcbiAgICAgICAgb3Blbk1lbnU6ICgpID0+IHZvaWQ7XG4gICAgfT47XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gR2VuZXJpY0Ryb3Bkb3duTWVudTxUPihcbiAgICB7IHZhbHVlLCBvbkNoYW5nZSwgb3B0aW9ucywgc2VsZWN0ZWRMYWJlbCwgb25PcGVuLCBvbkNsb3NlLCB0b0tleSwgY2xhc3NOYW1lLCBBZGRpdGlvbmFsT3B0aW9ucyB9OiBJUHJvcHM8VD4sXG4pOiBKU1guRWxlbWVudCB7XG4gICAgY29uc3QgW21lbnVEaXNwbGF5ZWQsIGJ1dHRvbiwgb3Blbk1lbnUsIGNsb3NlTWVudV0gPSB1c2VDb250ZXh0TWVudTxIVE1MRWxlbWVudD4oKTtcblxuICAgIGNvbnN0IHNlbGVjdGVkOiBHZW5lcmljRHJvcGRvd25NZW51SXRlbTxUPiB8IG51bGwgPSBvcHRpb25zXG4gICAgICAgIC5mbGF0TWFwKGl0ID0+IGlzR2VuZXJpY0Ryb3Bkb3duTWVudUdyb3VwKGl0KSA/IFtpdCwgLi4uaXQub3B0aW9uc10gOiBbaXRdKVxuICAgICAgICAuZmluZChvcHRpb24gPT4gdG9LZXkgPyB0b0tleShvcHRpb24ua2V5KSA9PT0gdG9LZXkodmFsdWUpIDogb3B0aW9uLmtleSA9PT0gdmFsdWUpO1xuICAgIGxldCBjb250ZXh0TWVudU9wdGlvbnM6IEpTWC5FbGVtZW50O1xuICAgIGlmIChvcHRpb25zICYmIGlzR2VuZXJpY0Ryb3Bkb3duTWVudUdyb3VwKG9wdGlvbnNbMF0pKSB7XG4gICAgICAgIGNvbnRleHRNZW51T3B0aW9ucyA9IDw+XG4gICAgICAgICAgICB7IG9wdGlvbnMubWFwKGdyb3VwID0+IChcbiAgICAgICAgICAgICAgICA8R2VuZXJpY0Ryb3Bkb3duTWVudUdyb3VwXG4gICAgICAgICAgICAgICAgICAgIGtleT17dG9LZXk/Lihncm91cC5rZXkpID8/IGdyb3VwLmtleX1cbiAgICAgICAgICAgICAgICAgICAgbGFiZWw9e2dyb3VwLmxhYmVsfVxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbj17Z3JvdXAuZGVzY3JpcHRpb259XG4gICAgICAgICAgICAgICAgICAgIGFkb3JubWVudD17Z3JvdXAuYWRvcm5tZW50fVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgeyBncm91cC5vcHRpb25zLm1hcChvcHRpb24gPT4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgPEdlbmVyaWNEcm9wZG93bk1lbnVPcHRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e3RvS2V5Py4ob3B0aW9uLmtleSkgPz8gb3B0aW9uLmtleX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17b3B0aW9uLmxhYmVsfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPXtvcHRpb24uZGVzY3JpcHRpb259XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KGV2OiBCdXR0b25FdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZShvcHRpb24ua2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VNZW51KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xvc2U/Lihldik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZG9ybm1lbnQ9e29wdGlvbi5hZG9ybm1lbnR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNTZWxlY3RlZD17b3B0aW9uID09PSBzZWxlY3RlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICkpIH1cbiAgICAgICAgICAgICAgICA8L0dlbmVyaWNEcm9wZG93bk1lbnVHcm91cD5cbiAgICAgICAgICAgICkpIH1cbiAgICAgICAgPC8+O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRleHRNZW51T3B0aW9ucyA9IDw+XG4gICAgICAgICAgICB7IG9wdGlvbnMubWFwKG9wdGlvbiA9PiAoXG4gICAgICAgICAgICAgICAgPEdlbmVyaWNEcm9wZG93bk1lbnVPcHRpb25cbiAgICAgICAgICAgICAgICAgICAga2V5PXt0b0tleT8uKG9wdGlvbi5rZXkpID8/IG9wdGlvbi5rZXl9XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsPXtvcHRpb24ubGFiZWx9XG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPXtvcHRpb24uZGVzY3JpcHRpb259XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhldjogQnV0dG9uRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlKG9wdGlvbi5rZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VNZW51KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsb3NlPy4oZXYpO1xuICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICBhZG9ybm1lbnQ9e29wdGlvbi5hZG9ybm1lbnR9XG4gICAgICAgICAgICAgICAgICAgIGlzU2VsZWN0ZWQ9e29wdGlvbiA9PT0gc2VsZWN0ZWR9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICkpIH1cbiAgICAgICAgPC8+O1xuICAgIH1cbiAgICBjb25zdCBjb250ZXh0TWVudSA9IG1lbnVEaXNwbGF5ZWQgPyA8Q29udGV4dE1lbnVcbiAgICAgICAgb25GaW5pc2hlZD17Y2xvc2VNZW51fVxuICAgICAgICBjaGV2cm9uRmFjZT17Q2hldnJvbkZhY2UuVG9wfVxuICAgICAgICB3cmFwcGVyQ2xhc3NOYW1lPXtjbGFzc05hbWVzKFwibXhfR2VuZXJpY0Ryb3Bkb3duTWVudV93cmFwcGVyXCIsIGNsYXNzTmFtZSl9XG4gICAgICAgIHsuLi5hYm92ZUxlZnRPZihidXR0b24uY3VycmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSl9XG4gICAgPlxuICAgICAgICB7IGNvbnRleHRNZW51T3B0aW9ucyB9XG4gICAgICAgIHsgQWRkaXRpb25hbE9wdGlvbnMgJiYgKFxuICAgICAgICAgICAgPEFkZGl0aW9uYWxPcHRpb25zIG1lbnVEaXNwbGF5ZWQ9e21lbnVEaXNwbGF5ZWR9IG9wZW5NZW51PXtvcGVuTWVudX0gY2xvc2VNZW51PXtjbG9zZU1lbnV9IC8+XG4gICAgICAgICkgfVxuICAgIDwvQ29udGV4dE1lbnU+IDogbnVsbDtcbiAgICByZXR1cm4gPD5cbiAgICAgICAgPENvbnRleHRNZW51QnV0dG9uXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJteF9HZW5lcmljRHJvcGRvd25NZW51X2J1dHRvblwiXG4gICAgICAgICAgICBpbnB1dFJlZj17YnV0dG9ufVxuICAgICAgICAgICAgaXNFeHBhbmRlZD17bWVudURpc3BsYXllZH1cbiAgICAgICAgICAgIG9uQ2xpY2s9eyhldjogQnV0dG9uRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBvcGVuTWVudSgpO1xuICAgICAgICAgICAgICAgIG9uT3Blbj8uKGV2KTtcbiAgICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICAgIHsgc2VsZWN0ZWRMYWJlbChzZWxlY3RlZCkgfVxuICAgICAgICA8L0NvbnRleHRNZW51QnV0dG9uPlxuICAgICAgICB7IGNvbnRleHRNZW51IH1cbiAgICA8Lz47XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFnQkE7O0FBQ0E7O0FBRUE7O0FBRUE7Ozs7OztBQXJCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFzQk8sU0FBU0EseUJBQVQsT0FTUztFQUFBLElBVHlDO0lBQ3JEQyxLQURxRDtJQUVyREMsV0FGcUQ7SUFHckRDLE9BSHFEO0lBSXJEQyxVQUpxRDtJQUtyREM7RUFMcUQsQ0FTekM7RUFDWixvQkFBTyw2QkFBQyw0QkFBRDtJQUNILE1BQU0sRUFBRUQsVUFETDtJQUVILFNBQVMsRUFBQyxtRUFGUDtJQUdILE9BQU8sRUFBRUQ7RUFITixnQkFLSDtJQUFLLFNBQVMsRUFBQztFQUFmLGdCQUNJLDJDQUFRRixLQUFSLENBREosZUFFSSwyQ0FBUUMsV0FBUixDQUZKLENBTEcsRUFTREcsU0FUQyxDQUFQO0FBV0g7O0FBRU0sU0FBU0Msd0JBQVQsUUFLMEQ7RUFBQSxJQUxUO0lBQ3BETCxLQURvRDtJQUVwREMsV0FGb0Q7SUFHcERHLFNBSG9EO0lBSXBERTtFQUpvRCxDQUtTO0VBQzdELG9CQUFPLHlFQUNIO0lBQUssU0FBUyxFQUFDO0VBQWYsZ0JBQ0k7SUFBSyxTQUFTLEVBQUM7RUFBZixnQkFDSSwyQ0FBUU4sS0FBUixDQURKLGVBRUksMkNBQVFDLFdBQVIsQ0FGSixDQURKLEVBS01HLFNBTE4sQ0FERyxFQVFERSxRQVJDLENBQVA7QUFVSDs7QUFFRCxTQUFTQywwQkFBVCxDQUNJQyxJQURKLEVBRXVDO0VBQ25DLE9BQU8sYUFBYUEsSUFBcEI7QUFDSDs7QUF1Qk0sU0FBU0MsbUJBQVQsUUFFUTtFQUFBLElBRFg7SUFBRUMs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