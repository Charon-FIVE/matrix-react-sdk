"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.getUnsentMessages = getUnsentMessages;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _event = require("matrix-js-sdk/src/models/event");

var _languageHandler = require("../../languageHandler");

var _Resend = _interopRequireDefault(require("../../Resend"));

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var _ErrorUtils = require("../../utils/ErrorUtils");

var _actions = require("../../dispatcher/actions");

var _StaticNotificationState = require("../../stores/notifications/StaticNotificationState");

var _AccessibleButton = _interopRequireDefault(require("../views/elements/AccessibleButton"));

var _InlineSpinner = _interopRequireDefault(require("../views/elements/InlineSpinner"));

var _MatrixClientContext = _interopRequireDefault(require("../../contexts/MatrixClientContext"));

var _RoomStatusBarUnsentMessages = require("./RoomStatusBarUnsentMessages");

/*
Copyright 2015-2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const STATUS_BAR_HIDDEN = 0;
const STATUS_BAR_EXPANDED = 1;
const STATUS_BAR_EXPANDED_LARGE = 2;

function getUnsentMessages(room) {
  if (!room) {
    return [];
  }

  return room.getPendingEvents().filter(function (ev) {
    return ev.status === _event.EventStatus.NOT_SENT;
  });
}

class RoomStatusBar extends _react.default.PureComponent {
  constructor(props, context) {
    super(props, context);
    (0, _defineProperty2.default)(this, "unmounted", false);
    (0, _defineProperty2.default)(this, "onSyncStateChange", (state, prevState, data) => {
      if (state === "SYNCING" && prevState === "SYNCING") {
        return;
      }

      if (this.unmounted) return;
      this.setState({
        syncState: state,
        syncStateData: data
      });
    });
    (0, _defineProperty2.default)(this, "onResendAllClick", () => {
      _Resend.default.resendUnsentEvents(this.props.room).then(() => {
        this.setState({
          isResending: false
        });
      });

      this.setState({
        isResending: true
      });

      _dispatcher.default.fire(_actions.Action.FocusSendMessageComposer);
    });
    (0, _defineProperty2.default)(this, "onCancelAllClick", () => {
      _Resend.default.cancelUnsentEvents(this.props.room);

      _dispatcher.default.fire(_actions.Action.FocusSendMessageComposer);
    });
    (0, _defineProperty2.default)(this, "onRoomLocalEchoUpdated", (ev, room) => {
      if (room.roomId !== this.props.room.roomId) return;
      const messages = getUnsentMessages(this.props.room);
      this.setState({
        unsentMessages: messages,
        isResending: messages.length > 0 && this.state.isResending
      });
    });
    this.state = {
      syncState: this.context.getSyncState(),
      syncStateData: this.context.getSyncStateData(),
      unsentMessages: getUnsentMessages(this.props.room),
      isResending: false
    };
  }

  componentDidMount() {
    const client = this.context;
    client.on("sync", this.onSyncStateChange);
    client.on("Room.localEchoUpdated", this.onRoomLocalEchoUpdated);
    this.checkSize();
  }

  componentDidUpdate() {
    this.checkSize();
  }

  componentWillUnmount() {
    this.unmounted = true; // we may have entirely lost our client as we're logging out before clicking login on the guest bar...

    const client = this.context;

    if (client) {
      client.removeListener("sync", this.onSyncStateChange);
      client.removeListener("Room.localEchoUpdated", this.onRoomLocalEchoUpdated);
    }
  }

  // Check whether current size is greater than 0, if yes call props.onVisible
  checkSize() {
    if (this.getSize()) {
      if (this.props.onVisible) this.props.onVisible();
    } else {
      if (this.props.onHidden) this.props.onHidden();
    }
  } // We don't need the actual height - just whether it is likely to have
  // changed - so we use '0' to indicate normal size, and other values to
  // indicate other sizes.


  getSize() {
    if (this.shouldShowConnectionError()) {
      return STATUS_BAR_EXPANDED;
    } else if (this.state.unsentMessages.length > 0 || this.state.isResending) {
      return STATUS_BAR_EXPANDED_LARGE;
    }

    return STATUS_BAR_HIDDEN;
  }

  shouldShowConnectionError() {
    // no conn bar trumps the "some not sent" msg since you can't resend without
    // a connection!
    // There's one situation in which we don't show this 'no connection' bar, and that's
    // if it's a resource limit exceeded error: those are shown in the top bar.
    const errorIsMauError = Boolean(this.state.syncStateData && this.state.syncStateData.error && this.state.syncStateData.error.name === 'M_RESOURCE_LIMIT_EXCEEDED');
    return this.state.syncState === "ERROR" && !errorIsMauError;
  }

  getUnsentMessageContent() {
    const unsentMessages = this.state.unsentMessages;
    let title;
    let consentError = null;
    let resourceLimitError = null;

    for (const m of unsentMessages) {
      if (m.error && m.error.errcode === 'M_CONSENT_NOT_GIVEN') {
        consentError = m.error;
        break;
      } else if (m.error && m.error.errcode === 'M_RESOURCE_LIMIT_EXCEEDED') {
        resourceLimitError = m.error;
        break;
      }
    }

    if (consentError) {
      title = (0, _languageHandler._t)("You can't send any messages until you review and agree to " + "<consentLink>our terms and conditions</consentLink>.", {}, {
        'consentLink': sub => /*#__PURE__*/_react.default.createElement("a", {
          href: consentError.data && consentError.data.consent_uri,
          target: "_blank"
        }, sub)
      });
    } else if (resourceLimitError) {
      title = (0, _ErrorUtils.messageForResourceLimitError)(resourceLimitError.data.limit_type, resourceLimitError.data.admin_contact, {
        'monthly_active_user': (0, _languageHandler._td)("Your message wasn't sent because this homeserver has hit its Monthly Active User Limit. " + "Please <a>contact your service administrator</a> to continue using the service."),
        'hs_disabled': (0, _languageHandler._td)("Your message wasn't sent because this homeserver has been blocked by its administrator. " + "Please <a>contact your service administrator</a> to continue using the service."),
        '': (0, _languageHandler._td)("Your message wasn't sent because this homeserver has exceeded a resource limit. " + "Please <a>contact your service administrator</a> to continue using the service.")
      });
    } else {
      title = (0, _languageHandler._t)('Some of your messages have not been sent');
    }

    let buttonRow = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onCancelAllClick,
      className: "mx_RoomStatusBar_unsentCancelAllBtn"
    }, (0, _languageHandler._t)("Delete all")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onResendAllClick,
      className: "mx_RoomStatusBar_unsentRetry"
    }, (0, _languageHandler._t)("Retry all")));

    if (this.state.isResending) {
      buttonRow = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_InlineSpinner.default, {
        w: 20,
        h: 20
      }), /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("Sending")));
    }

    return /*#__PURE__*/_react.default.createElement(_RoomStatusBarUnsentMessages.RoomStatusBarUnsentMessages, {
      title: title,
      description: (0, _languageHandler._t)("You can select all or individual messages to retry or delete"),
      notificationState: _StaticNotificationState.StaticNotificationState.RED_EXCLAMATION,
      buttons: buttonRow
    });
  }

  render() {
    if (this.shouldShowConnectionError()) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_RoomStatusBar"
      }, /*#__PURE__*/_react.default.createElement("div", {
        role: "alert"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_RoomStatusBar_connectionLostBar"
      }, /*#__PURE__*/_react.default.createElement("img", {
        src: require("../../../res/img/feather-customised/warning-triangle.svg").default,
        width: "24",
        height: "24",
        title: "/!\\ ",
        alt: "/!\\ "
      }), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_RoomStatusBar_connectionLostBar_title"
      }, (0, _languageHandler._t)('Connectivity to the server has been lost.')), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_RoomStatusBar_connectionLostBar_desc"
      }, (0, _languageHandler._t)('Sent messages will be stored until your connection has returned.'))))));
    }

    if (this.state.unsentMessages.length > 0 || this.state.isResending) {
      return this.getUnsentMessageContent();
    }

    return null;
  }

}

exports.default = RoomStatusBar;
(0, _defineProperty2.default)(RoomStatusBar, "contextType", _MatrixClientContext.default);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,