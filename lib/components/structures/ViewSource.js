"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _SyntaxHighlight = _interopRequireDefault(require("../views/elements/SyntaxHighlight"));

var _languageHandler = require("../../languageHandler");

var _MatrixClientContext = _interopRequireDefault(require("../../contexts/MatrixClientContext"));

var _EventUtils = require("../../utils/EventUtils");

var _MatrixClientPeg = require("../../MatrixClientPeg");

var _BaseDialog = _interopRequireDefault(require("../views/dialogs/BaseDialog"));

var _BaseTool = require("../views/dialogs/devtools/BaseTool");

var _RoomState = require("../views/dialogs/devtools/RoomState");

var _Event = require("../views/dialogs/devtools/Event");

var _CopyableText = _interopRequireDefault(require("../views/elements/CopyableText"));

/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2019 Michael Telatynski <7t3chguy@gmail.com>
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class ViewSource extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onBack", () => {
      // TODO: refresh the "Event ID:" modal header
      this.setState({
        isEditing: false
      });
    });
    this.state = {
      isEditing: false
    };
  }

  onEdit() {
    this.setState({
      isEditing: true
    });
  } // returns the dialog body for viewing the event source


  viewSourceContent() {
    const mxEvent = this.props.mxEvent.replacingEvent() || this.props.mxEvent; // show the replacing event, not the original, if it is an edit

    const isEncrypted = mxEvent.isEncrypted(); // @ts-ignore

    const decryptedEventSource = mxEvent.clearEvent; // FIXME: clearEvent is private

    const originalEventSource = mxEvent.event;

    const copyOriginalFunc = () => {
      return (0, _Event.stringify)(originalEventSource);
    };

    if (isEncrypted) {
      const copyDecryptedFunc = () => {
        return (0, _Event.stringify)(decryptedEventSource);
      };

      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("details", {
        open: true,
        className: "mx_ViewSource_details"
      }, /*#__PURE__*/_react.default.createElement("summary", null, /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_ViewSource_heading"
      }, (0, _languageHandler._t)("Decrypted event source"))), /*#__PURE__*/_react.default.createElement(_CopyableText.default, {
        getTextToCopy: copyDecryptedFunc
      }, /*#__PURE__*/_react.default.createElement(_SyntaxHighlight.default, {
        language: "json"
      }, (0, _Event.stringify)(decryptedEventSource)))), /*#__PURE__*/_react.default.createElement("details", {
        className: "mx_ViewSource_details"
      }, /*#__PURE__*/_react.default.createElement("summary", null, /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_ViewSource_heading"
      }, (0, _languageHandler._t)("Original event source"))), /*#__PURE__*/_react.default.createElement(_CopyableText.default, {
        getTextToCopy: copyOriginalFunc
      }, /*#__PURE__*/_react.default.createElement(_SyntaxHighlight.default, {
        language: "json"
      }, (0, _Event.stringify)(originalEventSource)))));
    } else {
      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_ViewSource_heading"
      }, (0, _languageHandler._t)("Original event source")), /*#__PURE__*/_react.default.createElement(_CopyableText.default, {
        getTextToCopy: copyOriginalFunc
      }, /*#__PURE__*/_react.default.createElement(_SyntaxHighlight.default, {
        language: "json"
      }, (0, _Event.stringify)(originalEventSource))));
    }
  } // returns the SendCustomEvent component prefilled with the correct details


  editSourceContent() {
    const mxEvent = this.props.mxEvent.replacingEvent() || this.props.mxEvent; // show the replacing event, not the original, if it is an edit

    const isStateEvent = mxEvent.isState();
    const roomId = mxEvent.getRoomId();

    if (isStateEvent) {
      return /*#__PURE__*/_react.default.createElement(_MatrixClientContext.default.Consumer, null, cli => /*#__PURE__*/_react.default.createElement(_BaseTool.DevtoolsContext.Provider, {
        value: {
          room: cli.getRoom(roomId)
        }
      }, /*#__PURE__*/_react.default.createElement(_RoomState.StateEventEditor, {
        onBack: this.onBack,
        mxEvent: mxEvent
      })));
    }

    return /*#__PURE__*/_react.default.createElement(_MatrixClientContext.default.Consumer, null, cli => /*#__PURE__*/_react.default.createElement(_BaseTool.DevtoolsContext.Provider, {
      value: {
        room: cli.getRoom(roomId)
      }
    }, /*#__PURE__*/_react.default.createElement(_Event.TimelineEventEditor, {
      onBack: this.onBack,
      mxEvent: mxEvent
    })));
  }

  canSendStateEvent(mxEvent) {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    const room = cli.getRoom(mxEvent.getRoomId());
    return room.currentState.mayClientSendStateEvent(mxEvent.getType(), cli);
  }

  render() {
    const mxEvent = this.props.mxEvent.replacingEvent() || this.props.mxEvent; // show the replacing event, not the original, if it is an edit

    const isEditing = this.state.isEditing;
    const roomId = mxEvent.getRoomId();
    const eventId = mxEvent.getId();
    const canEdit = mxEvent.isState() ? this.canSendStateEvent(mxEvent) : (0, _EventUtils.canEditContent)(this.props.mxEvent);
    return /*#__PURE__*/_react.default.createElement(_BaseDialog.default, {
      className: "mx_ViewSource",
      onFinished: this.props.onFinished,
      title: (0, _languageHandler._t)("View Source")
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ViewSource_header"
    }, /*#__PURE__*/_react.default.createElement(_CopyableText.default, {
      getTextToCopy: () => roomId,
      border: false
    }, (0, _languageHandler._t)("Room ID: %(roomId)s", {
      roomId
    })), /*#__PURE__*/_react.default.createElement(_CopyableText.default, {
      getTextToCopy: () => eventId,
      border: false
    }, (0, _languageHandler._t)("Event ID: %(eventId)s", {
      eventId
    }))), isEditing ? this.editSourceContent() : this.viewSourceContent(), !isEditing && canEdit && /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_buttons"
    }, /*#__PURE__*/_react.default.createElement("button", {
      onClick: () => this.onEdit()
    }, (0, _languageHandler._t)("Edit"))));
  }

}

exports.default = ViewSource;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,