"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _roomState = require("matrix-js-sdk/src/models/room-state");

var _roomMember = require("matrix-js-sdk/src/models/room-member");

var _lodash = require("lodash");

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var _RightPanelStorePhases = require("../../stores/right-panel/RightPanelStorePhases");

var _RightPanelStore = _interopRequireDefault(require("../../stores/right-panel/RightPanelStore"));

var _MatrixClientContext = _interopRequireDefault(require("../../contexts/MatrixClientContext"));

var _RoomSummaryCard = _interopRequireDefault(require("../views/right_panel/RoomSummaryCard"));

var _WidgetCard = _interopRequireDefault(require("../views/right_panel/WidgetCard"));

var _SettingsStore = _interopRequireDefault(require("../../settings/SettingsStore"));

var _MemberList = _interopRequireDefault(require("../views/rooms/MemberList"));

var _UserInfo = _interopRequireDefault(require("../views/right_panel/UserInfo"));

var _ThirdPartyMemberInfo = _interopRequireDefault(require("../views/rooms/ThirdPartyMemberInfo"));

var _FilePanel = _interopRequireDefault(require("./FilePanel"));

var _ThreadView = _interopRequireDefault(require("./ThreadView"));

var _ThreadPanel = _interopRequireDefault(require("./ThreadPanel"));

var _NotificationPanel = _interopRequireDefault(require("./NotificationPanel"));

var _PinnedMessagesCard = _interopRequireDefault(require("../views/right_panel/PinnedMessagesCard"));

var _TimelineCard = _interopRequireDefault(require("../views/right_panel/TimelineCard"));

var _AsyncStore = require("../../stores/AsyncStore");

var _actions = require("../../dispatcher/actions");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

class RightPanel extends _react.default.Component {
  constructor(props, context) {
    super(props, context);
    (0, _defineProperty2.default)(this, "context", void 0);
    (0, _defineProperty2.default)(this, "delayedUpdate", (0, _lodash.throttle)(() => {
      this.forceUpdate();
    }, 500, {
      leading: true,
      trailing: true
    }));
    (0, _defineProperty2.default)(this, "onRoomStateMember", (ev, state, member) => {
      if (!this.props.room || member.roomId !== this.props.room.roomId) {
        return;
      } // redraw the badge on the membership list


      if (this.state.phase === _RightPanelStorePhases.RightPanelPhases.RoomMemberList && member.roomId === this.props.room.roomId) {
        this.delayedUpdate();
      } else if (this.state.phase === _RightPanelStorePhases.RightPanelPhases.RoomMemberInfo && member.roomId === this.props.room.roomId && member.userId === this.state.cardState.member.userId) {
        // refresh the member info (e.g. new power level)
        this.delayedUpdate();
      }
    });
    (0, _defineProperty2.default)(this, "onRightPanelStoreUpdate", () => {
      this.setState(_objectSpread({}, RightPanel.getDerivedStateFromProps(this.props)));
    });
    (0, _defineProperty2.default)(this, "onClose", () => {
      // XXX: There are three different ways of 'closing' this panel depending on what state
      // things are in... this knows far more than it should do about the state of the rest
      // of the app and is generally a bit silly.
      if (this.props.overwriteCard?.state?.member) {
        // If we have a user prop then we're displaying a user from the 'user' page type
        // in LoggedInView, so need to change the page type to close the panel (we switch
        // to the home page which is not obviously the correct thing to do, but I'm not sure
        // anything else is - we could hide the close button altogether?)
        _dispatcher.default.dispatch({
          action: _actions.Action.ViewHomePage
        });
      } else if (this.state.phase === _RightPanelStorePhases.RightPanelPhases.EncryptionPanel && this.state.cardState.verificationRequest?.pending) {
        // When the user clicks close on the encryption panel cancel the pending request first if any
        this.state.cardState.verificationRequest.cancel();
      } else {
        _RightPanelStore.default.instance.togglePanel(this.props.room?.roomId);
      }
    });
    (0, _defineProperty2.default)(this, "onSearchQueryChanged", searchQuery => {
      this.setState({
        searchQuery
      });
    });
    this.state = {
      searchQuery: ""
    };
  }

  componentDidMount() {
    this.context.on(_roomState.RoomStateEvent.Members, this.onRoomStateMember);

    _RightPanelStore.default.instance.on(_AsyncStore.UPDATE_EVENT, this.onRightPanelStoreUpdate);
  }

  componentWillUnmount() {
    this.context?.removeListener(_roomState.RoomStateEvent.Members, this.onRoomStateMember);

    _RightPanelStore.default.instance.off(_AsyncStore.UPDATE_EVENT, this.onRightPanelStoreUpdate);
  }

  static getDerivedStateFromProps(props) {
    let currentCard;

    if (props.room) {
      currentCard = _RightPanelStore.default.instance.currentCardForRoom(props.room.roomId);
    }

    return {
      cardState: currentCard?.state,
      phase: currentCard?.phase
    };
  }

  render() {
    let card = /*#__PURE__*/_react.default.createElement("div", null);

    const roomId = this.props.room?.roomId;
    const phase = this.props.overwriteCard?.phase ?? this.state.phase;
    const cardState = this.props.overwriteCard?.state ?? this.state.cardState;

    switch (phase) {
      case _RightPanelStorePhases.RightPanelPhases.RoomMemberList:
        if (roomId) {
          card = /*#__PURE__*/_react.default.createElement(_MemberList.default, {
            roomId: roomId,
            key: roomId,
            onClose: this.onClose,
            searchQuery: this.state.searchQuery,
            onSearchQueryChanged: this.onSearchQueryChanged
          });
        }

        break;

      case _RightPanelStorePhases.RightPanelPhases.SpaceMemberList:
        card = /*#__PURE__*/_react.default.createElement(_MemberList.default, {
          roomId: cardState.spaceId ? cardState.spaceId : roomId,
          key: cardState.spaceId ? cardState.spaceId : roomId,
          onClose: this.onClose,
          searchQuery: this.state.searchQuery,
          onSearchQueryChanged: this.onSearchQueryChanged
        });
        break;

      case _RightPanelStorePhases.RightPanelPhases.RoomMemberInfo:
      case _RightPanelStorePhases.RightPanelPhases.SpaceMemberInfo:
      case _RightPanelStorePhases.RightPanelPhases.EncryptionPanel:
        {
          const roomMember = cardState.member instanceof _roomMember.RoomMember ? cardState.member : undefined;
          card = /*#__PURE__*/_react.default.createElement(_UserInfo.default, {
            user: cardState.member,
            room: this.context.getRoom(roomMember?.roomId) ?? this.props.room,
            key: roomId || cardState.member.userId,
            onClose: this.onClose,
            phase: phase,
            verificationRequest: cardState.verificationRequest,
            verificationRequestPromise: cardState.verificationRequestPromise
          });
          break;
        }

      case _RightPanelStorePhases.RightPanelPhases.Room3pidMemberInfo:
      case _RightPanelStorePhases.RightPanelPhases.Space3pidMemberInfo:
        card = /*#__PURE__*/_react.default.createElement(_ThirdPartyMemberInfo.default, {
          event: cardState.memberInfoEvent,
          key: roomId
        });
        break;

      case _RightPanelStorePhases.RightPanelPhases.NotificationPanel:
        card = /*#__PURE__*/_react.default.createElement(_NotificationPanel.default, {
          onClose: this.onClose
        });
        break;

      case _RightPanelStorePhases.RightPanelPhases.PinnedMessages:
        if (_SettingsStore.default.getValue("feature_pinning")) {
          card = /*#__PURE__*/_react.default.createElement(_PinnedMessagesCard.default, {
            room: this.props.room,
            onClose: this.onClose,
            permalinkCreator: this.props.permalinkCreator
          });
        }

        break;

      case _RightPanelStorePhases.RightPanelPhases.Timeline:
        card = /*#__PURE__*/_react.default.createElement(_TimelineCard.default, {
          classNames: "mx_ThreadPanel mx_TimelineCard",
          room: this.props.room,
          timelineSet: this.props.room.getUnfilteredTimelineSet(),
          resizeNotifier: this.props.resizeNotifier,
          onClose: this.onClose,
          permalinkCreator: this.props.permalinkCreator,
          e2eStatus: this.props.e2eStatus
        });
        break;

      case _RightPanelStorePhases.RightPanelPhases.FilePanel:
        card = /*#__PURE__*/_react.default.createElement(_FilePanel.default, {
          roomId: roomId,
          resizeNotifier: this.props.resizeNotifier,
          onClose: this.onClose
        });
        break;

      case _RightPanelStorePhases.RightPanelPhases.ThreadView:
        card = /*#__PURE__*/_react.default.createElement(_ThreadView.default, {
          room: this.props.room,
          resizeNotifier: this.props.resizeNotifier,
          onClose: this.onClose,
          mxEvent: cardState.threadHeadEvent,
          initialEvent: cardState.initialEvent,
          isInitialEventHighlighted: cardState.isInitialEventHighlighted,
          initialEventScrollIntoView: cardState.initialEventScrollIntoView,
          permalinkCreator: this.props.permalinkCreator,
          e2eStatus: this.props.e2eStatus
        });
        break;

      case _RightPanelStorePhases.RightPanelPhases.ThreadPanel:
        card = /*#__PURE__*/_react.default.createElement(_ThreadPanel.default, {
          roomId: roomId,
          resizeNotifier: this.props.resizeNotifier,
          onClose: this.onClose,
          permalinkCreator: this.props.permalinkCreator
        });
        break;

      case _RightPanelStorePhases.RightPanelPhases.RoomSummary:
        card = /*#__PURE__*/_react.default.createElement(_RoomSummaryCard.default, {
          room: this.props.room,
          onClose: this.onClose
        });
        break;

      case _RightPanelStorePhases.RightPanelPhases.Widget:
        card = /*#__PURE__*/_react.default.createElement(_WidgetCard.default, {
          room: this.props.room,
          widgetId: cardState.widgetId,
          onClose: this.onClose
        });
        break;
    }

    return /*#__PURE__*/_react.default.createElement("aside", {
      className: "mx_RightPanel dark-panel",
      id: "mx_RightPanel"
    }, card);
  }

}

exports.default = RightPanel;
(0, _defineProperty2.default)(RightPanel, "contextType", _MatrixClientContext.default);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,