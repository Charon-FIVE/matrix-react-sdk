"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _filesize = _interopRequireDefault(require("filesize"));

var _ContentMessages = _interopRequireDefault(require("../../ContentMessages"));

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var _languageHandler = require("../../languageHandler");

var _actions = require("../../dispatcher/actions");

var _ProgressBar = _interopRequireDefault(require("../views/elements/ProgressBar"));

var _AccessibleButton = _interopRequireDefault(require("../views/elements/AccessibleButton"));

var _MatrixClientContext = _interopRequireDefault(require("../../contexts/MatrixClientContext"));

/*
Copyright 2015, 2016, 2019, 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
function isUploadPayload(payload) {
  return [_actions.Action.UploadStarted, _actions.Action.UploadProgress, _actions.Action.UploadFailed, _actions.Action.UploadFinished, _actions.Action.UploadCanceled].includes(payload.action);
}

class UploadBar extends _react.default.PureComponent {
  constructor(props) {
    super(props); // Set initial state to any available upload in this room - we might be mounting
    // earlier than the first progress event, so should show something relevant.

    (0, _defineProperty2.default)(this, "dispatcherRef", void 0);
    (0, _defineProperty2.default)(this, "mounted", false);
    (0, _defineProperty2.default)(this, "onAction", payload => {
      if (!this.mounted) return;

      if (isUploadPayload(payload)) {
        this.setState(this.calculateState());
      }
    });
    (0, _defineProperty2.default)(this, "onCancelClick", ev => {
      ev.preventDefault();

      _ContentMessages.default.sharedInstance().cancelUpload(this.state.currentPromise, this.context);
    });
    this.state = this.calculateState();
  }

  componentDidMount() {
    this.dispatcherRef = _dispatcher.default.register(this.onAction);
    this.mounted = true;
  }

  componentWillUnmount() {
    this.mounted = false;

    _dispatcher.default.unregister(this.dispatcherRef);
  }

  getUploadsInRoom() {
    const uploads = _ContentMessages.default.sharedInstance().getCurrentUploads(this.props.relation);

    return uploads.filter(u => u.roomId === this.props.room.roomId);
  }

  calculateState() {
    const [currentUpload, ...otherUploads] = this.getUploadsInRoom();
    return {
      currentFile: currentUpload?.fileName,
      currentPromise: currentUpload?.promise,
      currentLoaded: currentUpload?.loaded,
      currentTotal: currentUpload?.total,
      countFiles: otherUploads.length + 1
    };
  }

  render() {
    if (!this.state.currentFile) {
      return null;
    } // MUST use var name 'count' for pluralization to kick in


    const uploadText = (0, _languageHandler._t)("Uploading %(filename)s and %(count)s others", {
      filename: this.state.currentFile,
      count: this.state.countFiles - 1
    });
    const uploadSize = (0, _filesize.default)(this.state.currentTotal);
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_UploadBar"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_UploadBar_filename"
    }, uploadText, " (", uploadSize, ")"), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: this.onCancelClick,
      className: "mx_UploadBar_cancel"
    }), /*#__PURE__*/_react.default.createElement(_ProgressBar.default, {
      value: this.state.currentLoaded,
      max: this.state.currentTotal
    }));
  }

}

exports.default = UploadBar;
(0, _defineProperty2.default)(UploadBar, "contextType", _MatrixClientContext.default);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,