"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _reResizable = require("re-resizable");

/*
Copyright 2018 New Vector Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class MainSplit extends _react.default.Component {
  constructor() {
    super(...arguments);
    (0, _defineProperty2.default)(this, "onResizeStart", () => {
      this.props.resizeNotifier.startResizing();
    });
    (0, _defineProperty2.default)(this, "onResize", () => {
      this.props.resizeNotifier.notifyRightHandleResized();
    });
    (0, _defineProperty2.default)(this, "onResizeStop", (event, direction, elementRef, delta) => {
      this.props.resizeNotifier.stopResizing();
      window.localStorage.setItem("mx_rhs_size", (this.loadSidePanelSize().width + delta.width).toString());
    });
  }

  loadSidePanelSize() {
    let rhsSize = parseInt(window.localStorage.getItem("mx_rhs_size"), 10);

    if (isNaN(rhsSize)) {
      rhsSize = 350;
    }

    return {
      height: "100%",
      width: rhsSize
    };
  }

  render() {
    const bodyView = _react.default.Children.only(this.props.children);

    const panelView = this.props.panel;
    const hasResizer = !this.props.collapsedRhs && panelView;
    let children;

    if (hasResizer) {
      children = /*#__PURE__*/_react.default.createElement(_reResizable.Resizable, {
        defaultSize: this.loadSidePanelSize(),
        minWidth: 264,
        maxWidth: "50%",
        enable: {
          top: false,
          right: false,
          bottom: false,
          left: true,
          topRight: false,
          bottomRight: false,
          bottomLeft: false,
          topLeft: false
        },
        onResizeStart: this.onResizeStart,
        onResize: this.onResize,
        onResizeStop: this.onResizeStop,
        className: "mx_RightPanel_ResizeWrapper",
        handleClasses: {
          left: "mx_ResizeHandle_horizontal"
        }
      }, panelView);
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MainSplit"
    }, bodyView, children);
  }

}

exports.default = MainSplit;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNYWluU3BsaXQiLCJSZWFjdCIsIkNvbXBvbmVudCIsInByb3BzIiwicmVzaXplTm90aWZpZXIiLCJzdGFydFJlc2l6aW5nIiwibm90aWZ5UmlnaHRIYW5kbGVSZXNpemVkIiwiZXZlbnQiLCJkaXJlY3Rpb24iLCJlbGVtZW50UmVmIiwiZGVsdGEiLCJzdG9wUmVzaXppbmciLCJ3aW5kb3ciLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwibG9hZFNpZGVQYW5lbFNpemUiLCJ3aWR0aCIsInRvU3RyaW5nIiwicmhzU2l6ZSIsInBhcnNlSW50IiwiZ2V0SXRlbSIsImlzTmFOIiwiaGVpZ2h0IiwicmVuZGVyIiwiYm9keVZpZXciLCJDaGlsZHJlbiIsIm9ubHkiLCJjaGlsZHJlbiIsInBhbmVsVmlldyIsInBhbmVsIiwiaGFzUmVzaXplciIsImNvbGxhcHNlZFJocyIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwibGVmdCIsInRvcFJpZ2h0IiwiYm90dG9tUmlnaHQiLCJib3R0b21MZWZ0IiwidG9wTGVmdCIsIm9uUmVzaXplU3RhcnQiLCJvblJlc2l6ZSIsIm9uUmVzaXplU3RvcCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3N0cnVjdHVyZXMvTWFpblNwbGl0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMTggTmV3IFZlY3RvciBMdGRcbkNvcHlyaWdodCAyMDE5IFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE51bWJlclNpemUsIFJlc2l6YWJsZSB9IGZyb20gJ3JlLXJlc2l6YWJsZSc7XG5pbXBvcnQgeyBEaXJlY3Rpb24gfSBmcm9tIFwicmUtcmVzaXphYmxlL2xpYi9yZXNpemVyXCI7XG5cbmltcG9ydCBSZXNpemVOb3RpZmllciBmcm9tIFwiLi4vLi4vdXRpbHMvUmVzaXplTm90aWZpZXJcIjtcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgcmVzaXplTm90aWZpZXI6IFJlc2l6ZU5vdGlmaWVyO1xuICAgIGNvbGxhcHNlZFJocz86IGJvb2xlYW47XG4gICAgcGFuZWw/OiBKU1guRWxlbWVudDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFpblNwbGl0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElQcm9wcz4ge1xuICAgIHByaXZhdGUgb25SZXNpemVTdGFydCA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5wcm9wcy5yZXNpemVOb3RpZmllci5zdGFydFJlc2l6aW5nKCk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgb25SZXNpemUgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgIHRoaXMucHJvcHMucmVzaXplTm90aWZpZXIubm90aWZ5UmlnaHRIYW5kbGVSZXNpemVkKCk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgb25SZXNpemVTdG9wID0gKFxuICAgICAgICBldmVudDogTW91c2VFdmVudCB8IFRvdWNoRXZlbnQsIGRpcmVjdGlvbjogRGlyZWN0aW9uLCBlbGVtZW50UmVmOiBIVE1MRWxlbWVudCwgZGVsdGE6IE51bWJlclNpemUsXG4gICAgKTogdm9pZCA9PiB7XG4gICAgICAgIHRoaXMucHJvcHMucmVzaXplTm90aWZpZXIuc3RvcFJlc2l6aW5nKCk7XG4gICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShcIm14X3Joc19zaXplXCIsICh0aGlzLmxvYWRTaWRlUGFuZWxTaXplKCkud2lkdGggKyBkZWx0YS53aWR0aCkudG9TdHJpbmcoKSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgbG9hZFNpZGVQYW5lbFNpemUoKToge2hlaWdodDogc3RyaW5nIHwgbnVtYmVyLCB3aWR0aDogbnVtYmVyfSB7XG4gICAgICAgIGxldCByaHNTaXplID0gcGFyc2VJbnQod2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKFwibXhfcmhzX3NpemVcIiksIDEwKTtcblxuICAgICAgICBpZiAoaXNOYU4ocmhzU2l6ZSkpIHtcbiAgICAgICAgICAgIHJoc1NpemUgPSAzNTA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgICAgIHdpZHRoOiByaHNTaXplLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHB1YmxpYyByZW5kZXIoKTogSlNYLkVsZW1lbnQge1xuICAgICAgICBjb25zdCBib2R5VmlldyA9IFJlYWN0LkNoaWxkcmVuLm9ubHkodGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgICAgIGNvbnN0IHBhbmVsVmlldyA9IHRoaXMucHJvcHMucGFuZWw7XG5cbiAgICAgICAgY29uc3QgaGFzUmVzaXplciA9ICF0aGlzLnByb3BzLmNvbGxhcHNlZFJocyAmJiBwYW5lbFZpZXc7XG5cbiAgICAgICAgbGV0IGNoaWxkcmVuO1xuICAgICAgICBpZiAoaGFzUmVzaXplcikge1xuICAgICAgICAgICAgY2hpbGRyZW4gPSA8UmVzaXphYmxlXG4gICAgICAgICAgICAgICAgZGVmYXVsdFNpemU9e3RoaXMubG9hZFNpZGVQYW5lbFNpemUoKX1cbiAgICAgICAgICAgICAgICBtaW5XaWR0aD17MjY0fVxuICAgICAgICAgICAgICAgIG1heFdpZHRoPVwiNTAlXCJcbiAgICAgICAgICAgICAgICBlbmFibGU9e3tcbiAgICAgICAgICAgICAgICAgICAgdG9wOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBib3R0b206IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB0b3BSaWdodDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbVJpZ2h0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tTGVmdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHRvcExlZnQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgb25SZXNpemVTdGFydD17dGhpcy5vblJlc2l6ZVN0YXJ0fVxuICAgICAgICAgICAgICAgIG9uUmVzaXplPXt0aGlzLm9uUmVzaXplfVxuICAgICAgICAgICAgICAgIG9uUmVzaXplU3RvcD17dGhpcy5vblJlc2l6ZVN0b3B9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibXhfUmlnaHRQYW5lbF9SZXNpemVXcmFwcGVyXCJcbiAgICAgICAgICAgICAgICBoYW5kbGVDbGFzc2VzPXt7IGxlZnQ6IFwibXhfUmVzaXplSGFuZGxlX2hvcml6b250YWxcIiB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHsgcGFuZWxWaWV3IH1cbiAgICAgICAgICAgIDwvUmVzaXphYmxlPjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cIm14X01haW5TcGxpdFwiPlxuICAgICAgICAgICAgeyBib2R5VmlldyB9XG4gICAgICAgICAgICB7IGNoaWxkcmVuIH1cbiAgICAgICAgPC9kaXY+O1xuICAgIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFpQkE7O0FBQ0E7O0FBbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBY2UsTUFBTUEsU0FBTixTQUF3QkMsY0FBQSxDQUFNQyxTQUE5QixDQUFnRDtFQUFBO0lBQUE7SUFBQSxxREFDbkMsTUFBWTtNQUNoQyxLQUFLQyxLQUFMLENBQVdDLGNBQVgsQ0FBMEJDLGFBQTFCO0lBQ0gsQ0FIMEQ7SUFBQSxnREFLeEMsTUFBWTtNQUMzQixLQUFLRixLQUFMLENBQVdDLGNBQVgsQ0FBMEJFLHdCQUExQjtJQUNILENBUDBEO0lBQUEsb0RBU3BDLENBQ25CQyxLQURtQixFQUNhQyxTQURiLEVBQ21DQyxVQURuQyxFQUM0REMsS0FENUQsS0FFWjtNQUNQLEtBQUtQLEtBQUwsQ0FBV0MsY0FBWCxDQUEwQk8sWUFBMUI7TUFDQUMsTUFBTSxDQUFDQyxZQUFQLENBQW9CQyxPQUFwQixDQUE0QixhQUE1QixFQUEyQyxDQUFDLEtBQUtDLGlCQUFMLEdBQXlCQyxLQUF6QixHQUFpQ04sS0FBSyxDQUFDTSxLQUF4QyxFQUErQ0MsUUFBL0MsRUFBM0M7SUFDSCxDQWQwRDtFQUFBOztFQWdCbkRGLGlCQUFpQixHQUE2QztJQUNsRSxJQUFJRyxPQUFPLEdBQUdDLFFBQVEsQ0FBQ1AsTUFBTSxDQUFDQyxZQUFQLENBQW9CTyxPQUFwQixDQUE0QixhQUE1QixDQUFELEVBQTZDLEVBQTdDLENBQXRCOztJQUVBLElBQUlDLEtBQUssQ0FBQ0gsT0FBRCxDQUFULEVBQW9CO01BQ2hCQSxPQUFPLEdBQUcsR0FBVjtJQUNIOztJQUVELE9BQU87TUFDSEksTUFBTSxFQUFFLE1BREw7TUFFSE4sS0FBSyxFQUFFRTtJQUZKLENBQVA7RUFJSDs7RUFFTUssTUFBTSxHQUFnQjtJQUN6QixNQUFNQyxRQUFRLEdBQUd2QixjQUFBLENBQU13QixRQUFOLENBQWVDLElBQWYsQ0FBb0IsS0FBS3ZCLEtBQUwsQ0FBV3dCLFFBQS9CLENBQWpCOztJQUNBLE1BQU1DLFNBQVMsR0FBRyxLQUFLekIsS0FBTCxDQUFXMEIsS0FBN0I7SUFFQSxNQUFNQyxVQUFVLEdBQUcsQ0FBQyxLQUFLM0IsS0FBTCxDQUFXNEIsWUFBWixJQUE0QkgsU0FBL0M7SUFFQSxJQUFJRCxRQUFKOztJQUNBLElBQUlHLFVBQUosRUFBZ0I7TUFDWkgsUUFBUSxnQkFBRyw2QkFBQyxzQkFBRDtRQUNQLFdBQVcsRUFBRSxLQUFLWixpQkFBTCxFQUROO1FBRVAsUUFBUSxFQUFFLEdBRkg7UUFHUCxRQUFRLEVBQUMsS0FIRjtRQUlQLE1BQU0sRUFBRTtVQUNKaUIsR0FBRyxFQUFFLEtBREQ7VUFFSkMsS0FBSyxFQUFFLEtBRkg7VUFHSkMsTUFBTSxFQUFFLEtBSEo7VUFJSkMsSUFBSSxFQUFFLElBSkY7VUFLSkMsUUFBUSxFQUFFLEtBTE47VUFNSkMsV0FBVyxFQUFFLEtBTlQ7VUFPSkMsVUFBVSxFQUFFLEtBUFI7VUFRSkMsT0FBTyxFQUFFO1FBUkwsQ0FKRDtRQWNQLGFBQWEsRUFBRSxLQUFLQyxhQWRiO1FBZVAsUUFBUSxFQUFFLEtBQUtDLFFBZlI7UUFnQlAsWUFBWSxFQUFFLEtBQUtDLFlBaEJaO1FBaUJQLFNBQVMsRUFBQyw2QkFqQkg7UUFrQlAsYUFBYSxFQUFFO1VBQUVQLElBQUksRUFBRTtRQUFSO01BbEJSLEdBb0JMUCxTQXBCSyxDQUFYO0lBc0JIOztJQUVELG9CQUFPO01BQUssU0FBUyxFQUFDO0lBQWYsR0FDREosUUFEQyxFQUVERyxRQUZDLENBQVA7RUFJSDs7QUFqRTBEIn0=