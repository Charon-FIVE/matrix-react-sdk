"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _logger = require("matrix-js-sdk/src/logger");

var _languageHandler = require("../../../languageHandler");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _VerificationRequestDialog = _interopRequireDefault(require("../../views/dialogs/VerificationRequestDialog"));

var _SetupEncryptionStore = require("../../../stores/SetupEncryptionStore");

var _EncryptionPanel = _interopRequireDefault(require("../../views/right_panel/EncryptionPanel"));

var _AccessibleButton = _interopRequireDefault(require("../../views/elements/AccessibleButton"));

var _Spinner = _interopRequireDefault(require("../../views/elements/Spinner"));

/*
Copyright 2020-2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
function keyHasPassphrase(keyInfo) {
  return Boolean(keyInfo.passphrase && keyInfo.passphrase.salt && keyInfo.passphrase.iterations);
}

class SetupEncryptionBody extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onStoreUpdate", () => {
      const store = _SetupEncryptionStore.SetupEncryptionStore.sharedInstance();

      if (store.phase === _SetupEncryptionStore.Phase.Finished) {
        this.props.onFinished();
        return;
      }

      this.setState({
        phase: store.phase,
        verificationRequest: store.verificationRequest,
        backupInfo: store.backupInfo,
        lostKeys: store.lostKeys()
      });
    });
    (0, _defineProperty2.default)(this, "onUsePassphraseClick", async () => {
      const store = _SetupEncryptionStore.SetupEncryptionStore.sharedInstance();

      store.usePassPhrase();
    });
    (0, _defineProperty2.default)(this, "onVerifyClick", () => {
      const cli = _MatrixClientPeg.MatrixClientPeg.get();

      const userId = cli.getUserId();
      const requestPromise = cli.requestVerification(userId); // We need to call onFinished now to close this dialog, and
      // again later to signal that the verification is complete.

      this.props.onFinished();

      _Modal.default.createDialog(_VerificationRequestDialog.default, {
        verificationRequestPromise: requestPromise,
        member: cli.getUser(userId),
        onFinished: async () => {
          const request = await requestPromise;
          request.cancel();
          this.props.onFinished();
        }
      });
    });
    (0, _defineProperty2.default)(this, "onSkipConfirmClick", () => {
      const store = _SetupEncryptionStore.SetupEncryptionStore.sharedInstance();

      store.skipConfirm();
    });
    (0, _defineProperty2.default)(this, "onSkipBackClick", () => {
      const store = _SetupEncryptionStore.SetupEncryptionStore.sharedInstance();

      store.returnAfterSkip();
    });
    (0, _defineProperty2.default)(this, "onResetClick", ev => {
      ev.preventDefault();

      const store = _SetupEncryptionStore.SetupEncryptionStore.sharedInstance();

      store.reset();
    });
    (0, _defineProperty2.default)(this, "onResetConfirmClick", () => {
      this.props.onFinished();

      const store = _SetupEncryptionStore.SetupEncryptionStore.sharedInstance();

      store.resetConfirm();
    });
    (0, _defineProperty2.default)(this, "onResetBackClick", () => {
      const store = _SetupEncryptionStore.SetupEncryptionStore.sharedInstance();

      store.returnAfterReset();
    });
    (0, _defineProperty2.default)(this, "onDoneClick", () => {
      const store = _SetupEncryptionStore.SetupEncryptionStore.sharedInstance();

      store.done();
    });
    (0, _defineProperty2.default)(this, "onEncryptionPanelClose", () => {
      this.props.onFinished();
    });

    const _store = _SetupEncryptionStore.SetupEncryptionStore.sharedInstance();

    _store.on("update", this.onStoreUpdate);

    _store.start();

    this.state = {
      phase: _store.phase,
      // this serves dual purpose as the object for the request logic and
      // the presence of it indicating that we're in 'verify mode'.
      // Because of the latter, it lives in the state.
      verificationRequest: _store.verificationRequest,
      backupInfo: _store.backupInfo,
      lostKeys: _store.lostKeys()
    };
  }

  componentWillUnmount() {
    const store = _SetupEncryptionStore.SetupEncryptionStore.sharedInstance();

    store.off("update", this.onStoreUpdate);
    store.stop();
  }

  render() {
    const {
      phase,
      lostKeys
    } = this.state;

    if (this.state.verificationRequest) {
      return /*#__PURE__*/_react.default.createElement(_EncryptionPanel.default, {
        layout: "dialog",
        verificationRequest: this.state.verificationRequest,
        onClose: this.onEncryptionPanelClose,
        member: _MatrixClientPeg.MatrixClientPeg.get().getUser(this.state.verificationRequest.otherUserId),
        isRoomEncrypted: false
      });
    } else if (phase === _SetupEncryptionStore.Phase.Intro) {
      if (lostKeys) {
        return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("It looks like you don't have a Security Key or any other devices you can " + "verify against.  This device will not be able to access old encrypted messages. " + "In order to verify your identity on this device, you'll need to reset " + "your verification keys.")), /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_CompleteSecurity_actionRow"
        }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
          kind: "primary",
          onClick: this.onResetConfirmClick
        }, (0, _languageHandler._t)("Proceed with reset"))));
      } else {
        const store = _SetupEncryptionStore.SetupEncryptionStore.sharedInstance();

        let recoveryKeyPrompt;

        if (store.keyInfo && keyHasPassphrase(store.keyInfo)) {
          recoveryKeyPrompt = (0, _languageHandler._t)("Verify with Security Key or Phrase");
        } else if (store.keyInfo) {
          recoveryKeyPrompt = (0, _languageHandler._t)("Verify with Security Key");
        }

        let useRecoveryKeyButton;

        if (recoveryKeyPrompt) {
          useRecoveryKeyButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
            kind: "primary",
            onClick: this.onUsePassphraseClick
          }, recoveryKeyPrompt);
        }

        let verifyButton;

        if (store.hasDevicesToVerifyAgainst) {
          verifyButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
            kind: "primary",
            onClick: this.onVerifyClick
          }, (0, _languageHandler._t)("Verify with another device"));
        }

        return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Verify your identity to access encrypted messages and prove your identity to others.")), /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_CompleteSecurity_actionRow"
        }, verifyButton, useRecoveryKeyButton), /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_SetupEncryptionBody_reset"
        }, (0, _languageHandler._t)("Forgotten or lost all recovery methods? <a>Reset all</a>", null, {
          a: sub => /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
            kind: "link_inline",
            className: "mx_SetupEncryptionBody_reset_link",
            onClick: this.onResetClick
          }, sub)
        })));
      }
    } else if (phase === _SetupEncryptionStore.Phase.Done) {
      let message;

      if (this.state.backupInfo) {
        message = /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Your new device is now verified. It has access to your " + "encrypted messages, and other users will see it as trusted."));
      } else {
        message = /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Your new device is now verified. Other users will see it as trusted."));
      }

      return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_CompleteSecurity_heroIcon mx_E2EIcon_verified"
      }), message, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_CompleteSecurity_actionRow"
      }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        kind: "primary",
        onClick: this.onDoneClick
      }, (0, _languageHandler._t)("Done"))));
    } else if (phase === _SetupEncryptionStore.Phase.ConfirmSkip) {
      return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Without verifying, you won't have access to all your messages " + "and may appear as untrusted to others.")), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_CompleteSecurity_actionRow"
      }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        kind: "danger_outline",
        onClick: this.onSkipConfirmClick
      }, (0, _languageHandler._t)("I'll verify later")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        kind: "primary",
        onClick: this.onSkipBackClick
      }, (0, _languageHandler._t)("Go Back"))));
    } else if (phase === _SetupEncryptionStore.Phase.ConfirmReset) {
      return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Resetting your verification keys cannot be undone. After resetting, " + "you won't have access to old encrypted messages, and any friends who " + "have previously verified you will see security warnings until you " + "re-verify with them.")), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Please only proceed if you're sure you've lost all of your other " + "devices and your security key.")), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_CompleteSecurity_actionRow"
      }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        kind: "danger_outline",
        onClick: this.onResetConfirmClick
      }, (0, _languageHandler._t)("Proceed with reset")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        kind: "primary",
        onClick: this.onResetBackClick
      }, (0, _languageHandler._t)("Go Back"))));
    } else if (phase === _SetupEncryptionStore.Phase.Busy || phase === _SetupEncryptionStore.Phase.Loading) {
      return /*#__PURE__*/_react.default.createElement(_Spinner.default, null);
    } else {
      _logger.logger.log(`SetupEncryptionBody: Unknown phase ${phase}`);
    }
  }

}

exports.default = SetupEncryptionBody;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,