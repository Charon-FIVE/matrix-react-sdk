"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _AutoHideScrollbar = _interopRequireDefault(require("./AutoHideScrollbar"));

var _UIStore = _interopRequireWildcard(require("../../stores/UIStore"));

const _excluded = ["children", "trackHorizontalOverflow", "verticalScrollsHorizontally"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class IndicatorScrollbar extends _react.default.Component {
  // ts in milliseconds to recheck this._likelyTrackpadUser
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "autoHideScrollbar", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)(this, "scrollElement", void 0);
    (0, _defineProperty2.default)(this, "likelyTrackpadUser", null);
    (0, _defineProperty2.default)(this, "checkAgainForTrackpad", 0);
    (0, _defineProperty2.default)(this, "collectScroller", scroller => {
      this.props.wrappedRef?.(scroller);

      if (scroller && !this.scrollElement) {
        this.scrollElement = scroller; // Using the passive option to not block the main thread
        // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#improving_scrolling_performance_with_passive_listeners

        this.scrollElement.addEventListener("scroll", this.checkOverflow, {
          passive: true
        });
        this.checkOverflow();
      }
    });
    (0, _defineProperty2.default)(this, "checkOverflow", () => {
      const hasTopOverflow = this.scrollElement.scrollTop > 0;
      const hasBottomOverflow = this.scrollElement.scrollHeight > this.scrollElement.scrollTop + this.scrollElement.clientHeight;
      const hasLeftOverflow = this.scrollElement.scrollLeft > 0;
      const hasRightOverflow = this.scrollElement.scrollWidth > this.scrollElement.scrollLeft + this.scrollElement.clientWidth;

      if (hasTopOverflow) {
        this.scrollElement.classList.add("mx_IndicatorScrollbar_topOverflow");
      } else {
        this.scrollElement.classList.remove("mx_IndicatorScrollbar_topOverflow");
      }

      if (hasBottomOverflow) {
        this.scrollElement.classList.add("mx_IndicatorScrollbar_bottomOverflow");
      } else {
        this.scrollElement.classList.remove("mx_IndicatorScrollbar_bottomOverflow");
      }

      if (hasLeftOverflow) {
        this.scrollElement.classList.add("mx_IndicatorScrollbar_leftOverflow");
      } else {
        this.scrollElement.classList.remove("mx_IndicatorScrollbar_leftOverflow");
      }

      if (hasRightOverflow) {
        this.scrollElement.classList.add("mx_IndicatorScrollbar_rightOverflow");
      } else {
        this.scrollElement.classList.remove("mx_IndicatorScrollbar_rightOverflow");
      }

      if (this.props.trackHorizontalOverflow) {
        this.setState({
          // Offset from absolute position of the container
          leftIndicatorOffset: hasLeftOverflow ? `${this.scrollElement.scrollLeft}px` : '0',
          // Negative because we're coming from the right
          rightIndicatorOffset: hasRightOverflow ? `-${this.scrollElement.scrollLeft}px` : '0'
        });
      }
    });
    (0, _defineProperty2.default)(this, "onMouseWheel", e => {
      if (this.props.verticalScrollsHorizontally && this.scrollElement) {
        // xyThreshold is the amount of horizontal motion required for the component to
        // ignore the vertical delta in a scroll. Used to stop trackpads from acting in
        // strange ways. Should be positive.
        const xyThreshold = 0; // yRetention is the factor multiplied by the vertical delta to try and reduce
        // the harshness of the scroll behaviour. Should be a value between 0 and 1.

        const yRetention = 1.0; // whenever we see horizontal scrolling, assume the user is on a trackpad
        // for at least the next 1 minute.

        const now = new Date().getTime();

        if (Math.abs(e.deltaX) > 0) {
          this.likelyTrackpadUser = true;
          this.checkAgainForTrackpad = now + 1 * 60 * 1000;
        } else {
          // if we haven't seen any horizontal scrolling for a while, assume
          // the user might have plugged in a mousewheel
          if (this.likelyTrackpadUser && now >= this.checkAgainForTrackpad) {
            this.likelyTrackpadUser = false;
          }
        } // don't mess with the horizontal scroll for trackpad users
        // See https://github.com/vector-im/element-web/issues/10005


        if (this.likelyTrackpadUser) {
          return;
        }

        if (Math.abs(e.deltaX) <= xyThreshold) {
          // we are vertically scrolling.
          // HACK: We increase the amount of scroll to counteract smooth scrolling browsers.
          // Smooth scrolling browsers (Firefox) use the relative area to determine the scroll
          // amount, which means the likely small area of content results in a small amount of
          // movement - not what people expect. We pick arbitrary values for when to apply more
          // scroll, and how much to apply. On Windows 10, Chrome scrolls 100 units whereas
          // Firefox scrolls just 3 due to smooth scrolling.
          const additionalScroll = e.deltaY < 0 ? -50 : 50; // noinspection JSSuspiciousNameCombination

          const val = Math.abs(e.deltaY) < 25 ? e.deltaY + additionalScroll : e.deltaY;
          this.scrollElement.scrollLeft += val * yRetention;
        }
      }
    });
    this.state = {
      leftIndicatorOffset: '0',
      rightIndicatorOffset: '0'
    };
  }

  componentDidUpdate(prevProps) {
    const prevLen = _react.default.Children.count(prevProps.children);

    const curLen = _react.default.Children.count(this.props.children); // check overflow only if amount of children changes.
    // if we don't guard here, we end up with an infinite
    // render > componentDidUpdate > checkOverflow > setState > render loop


    if (prevLen !== curLen) {
      this.checkOverflow();
    }
  }

  componentDidMount() {
    this.checkOverflow();

    _UIStore.default.instance.on(_UIStore.UI_EVENTS.Resize, this.checkOverflow);
  }

  componentWillUnmount() {
    this.scrollElement?.removeEventListener("scroll", this.checkOverflow);

    _UIStore.default.instance.off(_UIStore.UI_EVENTS.Resize, this.checkOverflow);
  }

  render() {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const _this$props = this.props,
          {
      children,
      trackHorizontalOverflow,
      verticalScrollsHorizontally
    } = _this$props,
          otherProps = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
    const leftIndicatorStyle = {
      left: this.state.leftIndicatorOffset
    };
    const rightIndicatorStyle = {
      right: this.state.rightIndicatorOffset
    };
    const leftOverflowIndicator = trackHorizontalOverflow ? /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_IndicatorScrollbar_leftOverflowIndicator",
      style: leftIndicatorStyle
    }) : null;
    const rightOverflowIndicator = trackHorizontalOverflow ? /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_IndicatorScrollbar_rightOverflowIndicator",
      style: rightIndicatorStyle
    }) : null;
    return /*#__PURE__*/_react.default.createElement(_AutoHideScrollbar.default, (0, _extends2.default)({}, otherProps, {
      ref: this.autoHideScrollbar,
      wrappedRef: this.collectScroller,
      onWheel: this.onMouseWheel
    }), leftOverflowIndicator, children, rightOverflowIndicator);
  }

}

exports.default = IndicatorScrollbar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,