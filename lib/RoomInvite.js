"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inviteMultipleToRoom = inviteMultipleToRoom;
exports.inviteUsersToRoom = inviteUsersToRoom;
exports.isValid3pidInvite = isValid3pidInvite;
exports.showAnyInviteErrors = showAnyInviteErrors;
exports.showRoomInviteDialog = showRoomInviteDialog;
exports.showStartChatInviteDialog = showStartChatInviteDialog;

var _react = _interopRequireDefault(require("react"));

var _logger = require("matrix-js-sdk/src/logger");

var _event = require("matrix-js-sdk/src/@types/event");

var _MatrixClientPeg = require("./MatrixClientPeg");

var _MultiInviter = _interopRequireDefault(require("./utils/MultiInviter"));

var _Modal = _interopRequireDefault(require("./Modal"));

var _languageHandler = require("./languageHandler");

var _InviteDialog = _interopRequireDefault(require("./components/views/dialogs/InviteDialog"));

var _BaseAvatar = _interopRequireDefault(require("./components/views/avatars/BaseAvatar"));

var _Media = require("./customisations/Media");

var _ErrorDialog = _interopRequireDefault(require("./components/views/dialogs/ErrorDialog"));

var _InviteDialogTypes = require("./components/views/dialogs/InviteDialogTypes");

/*
Copyright 2016 - 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * Invites multiple addresses to a room
 * Simpler interface to utils/MultiInviter but with
 * no option to cancel.
 *
 * @param {string} roomId The ID of the room to invite to
 * @param {string[]} addresses Array of strings of addresses to invite. May be matrix IDs or 3pids.
 * @param {boolean} sendSharedHistoryKeys whether to share e2ee keys with the invitees if applicable.
 * @param {function} progressCallback optional callback, fired after each invite.
 * @returns {Promise} Promise
 */
function inviteMultipleToRoom(roomId, addresses) {
  let sendSharedHistoryKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  let progressCallback = arguments.length > 3 ? arguments[3] : undefined;
  const inviter = new _MultiInviter.default(roomId, progressCallback);
  return inviter.invite(addresses, undefined, sendSharedHistoryKeys).then(states => Promise.resolve({
    states,
    inviter
  }));
}

function showStartChatInviteDialog() {
  let initialText = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

  // This dialog handles the room creation internally - we don't need to worry about it.
  _Modal.default.createDialog(_InviteDialog.default, {
    kind: _InviteDialogTypes.KIND_DM,
    initialText
  },
  /*className=*/
  "mx_InviteDialog_flexWrapper",
  /*isPriority=*/
  false,
  /*isStatic=*/
  true);
}

function showRoomInviteDialog(roomId) {
  let initialText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

  // This dialog handles the room creation internally - we don't need to worry about it.
  _Modal.default.createDialog(_InviteDialog.default, {
    kind: _InviteDialogTypes.KIND_INVITE,
    initialText,
    roomId
  },
  /*className=*/
  "mx_InviteDialog_flexWrapper",
  /*isPriority=*/
  false,
  /*isStatic=*/
  true);
}
/**
 * Checks if the given MatrixEvent is a valid 3rd party user invite.
 * @param {MatrixEvent} event The event to check
 * @returns {boolean} True if valid, false otherwise
 */


function isValid3pidInvite(event) {
  if (!event || event.getType() !== _event.EventType.RoomThirdPartyInvite) return false; // any events without these keys are not valid 3pid invites, so we ignore them

  const requiredKeys = ['key_validity_url', 'public_key', 'display_name'];

  if (requiredKeys.some(key => !event.getContent()[key])) {
    return false;
  } // Valid enough by our standards


  return true;
}

function inviteUsersToRoom(roomId, userIds) {
  let sendSharedHistoryKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  let progressCallback = arguments.length > 3 ? arguments[3] : undefined;
  return inviteMultipleToRoom(roomId, userIds, sendSharedHistoryKeys, progressCallback).then(result => {
    const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(roomId);

    showAnyInviteErrors(result.states, room, result.inviter);
  }).catch(err => {
    _logger.logger.error(err.stack);

    _Modal.default.createDialog(_ErrorDialog.default, {
      title: (0, _languageHandler._t)("Failed to invite"),
      description: err && err.message ? err.message : (0, _languageHandler._t)("Operation failed")
    });
  });
}

function showAnyInviteErrors(states, room, inviter, userMap) {
  // Show user any errors
  const failedUsers = Object.keys(states).filter(a => states[a] === 'error');

  if (failedUsers.length === 1 && inviter.fatal) {
    // Just get the first message because there was a fatal problem on the first
    // user. This usually means that no other users were attempted, making it
    // pointless for us to list who failed exactly.
    _Modal.default.createDialog(_ErrorDialog.default, {
      title: (0, _languageHandler._t)("Failed to invite users to %(roomName)s", {
        roomName: room.name
      }),
      description: inviter.getErrorText(failedUsers[0])
    });

    return false;
  } else {
    const errorList = [];

    for (const addr of failedUsers) {
      if (states[addr] === "error") {
        const reason = inviter.getErrorText(addr);
        errorList.push(addr + ": " + reason);
      }
    }

    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    if (errorList.length > 0) {
      // React 16 doesn't let us use `errorList.join(<br />)` anymore, so this is our solution
      const description = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_InviteDialog_multiInviterError"
      }, /*#__PURE__*/_react.default.createElement("h4", null, (0, _languageHandler._t)("We sent the others, but the below people couldn't be invited to <RoomName/>", {}, {
        RoomName: () => /*#__PURE__*/_react.default.createElement("b", null, room.name)
      })), /*#__PURE__*/_react.default.createElement("div", null, failedUsers.map(addr => {
        const user = userMap?.get(addr) || cli.getUser(addr);
        const name = user.name || user.rawDisplayName;
        const avatarUrl = user.getMxcAvatarUrl?.() || user.avatarUrl;
        return /*#__PURE__*/_react.default.createElement("div", {
          key: addr,
          className: "mx_InviteDialog_tile mx_InviteDialog_tile--inviterError"
        }, /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_InviteDialog_tile_avatarStack"
        }, /*#__PURE__*/_react.default.createElement(_BaseAvatar.default, {
          url: avatarUrl ? (0, _Media.mediaFromMxc)(avatarUrl).getSquareThumbnailHttp(24) : null,
          name: name,
          idName: user.userId,
          width: 36,
          height: 36
        })), /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_InviteDialog_tile_nameStack"
        }, /*#__PURE__*/_react.default.createElement("span", {
          className: "mx_InviteDialog_tile_nameStack_name"
        }, name), /*#__PURE__*/_react.default.createElement("span", {
          className: "mx_InviteDialog_tile_nameStack_userId"
        }, user.userId)), /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_InviteDialog_tile--inviterError_errorText"
        }, inviter.getErrorText(addr)));
      })));

      _Modal.default.createDialog(_ErrorDialog.default, {
        title: (0, _languageHandler._t)("Some invites couldn't be sent"),
        description
      });

      return false;
    }
  }

  return true;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,