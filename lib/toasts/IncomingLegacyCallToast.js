"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getIncomingLegacyCallToastKey = exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _call = require("matrix-js-sdk/src/webrtc/call");

var _classnames = _interopRequireDefault(require("classnames"));

var _LegacyCallHandler = _interopRequireWildcard(require("../LegacyCallHandler"));

var _MatrixClientPeg = require("../MatrixClientPeg");

var _languageHandler = require("../languageHandler");

var _RoomAvatar = _interopRequireDefault(require("../components/views/avatars/RoomAvatar"));

var _AccessibleTooltipButton = _interopRequireDefault(require("../components/views/elements/AccessibleTooltipButton"));

var _AccessibleButton = _interopRequireDefault(require("../components/views/elements/AccessibleButton"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2018 New Vector Ltd
Copyright 2019, 2020 The Matrix.org Foundation C.I.C.
Copyright 2021 Å imon Brandner <simon.bra.ag@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const getIncomingLegacyCallToastKey = callId => `call_${callId}`;

exports.getIncomingLegacyCallToastKey = getIncomingLegacyCallToastKey;

class IncomingLegacyCallToast extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "componentDidMount", () => {
      _LegacyCallHandler.default.instance.addListener(_LegacyCallHandler.LegacyCallHandlerEvent.SilencedCallsChanged, this.onSilencedCallsChanged);
    });
    (0, _defineProperty2.default)(this, "onSilencedCallsChanged", () => {
      this.setState({
        silenced: _LegacyCallHandler.default.instance.isCallSilenced(this.props.call.callId)
      });
    });
    (0, _defineProperty2.default)(this, "onAnswerClick", e => {
      e.stopPropagation();

      _LegacyCallHandler.default.instance.answerCall(_LegacyCallHandler.default.instance.roomIdForCall(this.props.call));
    });
    (0, _defineProperty2.default)(this, "onRejectClick", e => {
      e.stopPropagation();

      _LegacyCallHandler.default.instance.hangupOrReject(_LegacyCallHandler.default.instance.roomIdForCall(this.props.call), true);
    });
    (0, _defineProperty2.default)(this, "onSilenceClick", e => {
      e.stopPropagation();
      const callId = this.props.call.callId;
      this.state.silenced ? _LegacyCallHandler.default.instance.unSilenceCall(callId) : _LegacyCallHandler.default.instance.silenceCall(callId);
    });
    this.state = {
      silenced: _LegacyCallHandler.default.instance.isCallSilenced(this.props.call.callId)
    };
  }

  componentWillUnmount() {
    _LegacyCallHandler.default.instance.removeListener(_LegacyCallHandler.LegacyCallHandlerEvent.SilencedCallsChanged, this.onSilencedCallsChanged);
  }

  render() {
    const call = this.props.call;

    const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(_LegacyCallHandler.default.instance.roomIdForCall(call));

    const isVoice = call.type === _call.CallType.Voice;
    const contentClass = (0, _classnames.default)("mx_IncomingLegacyCallToast_content", {
      "mx_IncomingLegacyCallToast_content_voice": isVoice,
      "mx_IncomingLegacyCallToast_content_video": !isVoice
    });
    const silenceClass = (0, _classnames.default)("mx_IncomingLegacyCallToast_iconButton", {
      "mx_IncomingLegacyCallToast_unSilence": this.state.silenced,
      "mx_IncomingLegacyCallToast_silence": !this.state.silenced
    });
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_RoomAvatar.default, {
      room: room ?? undefined,
      height: 32,
      width: 32
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: contentClass
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_LegacyCallEvent_caller"
    }, room ? room.name : (0, _languageHandler._t)("Unknown caller")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_LegacyCallEvent_type"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_LegacyCallEvent_type_icon"
    }), isVoice ? (0, _languageHandler._t)("Voice call") : (0, _languageHandler._t)("Video call")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_IncomingLegacyCallToast_buttons"
    }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_IncomingLegacyCallToast_button mx_IncomingLegacyCallToast_button_decline",
      onClick: this.onRejectClick,
      kind: "danger"
    }, /*#__PURE__*/_react.default.createElement("span", null, " ", (0, _languageHandler._t)("Decline"), " ")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_IncomingLegacyCallToast_button mx_IncomingLegacyCallToast_button_accept",
      onClick: this.onAnswerClick,
      kind: "primary"
    }, /*#__PURE__*/_react.default.createElement("span", null, " ", (0, _languageHandler._t)("Accept"), " ")))), /*#__PURE__*/_react.default.createElement(_AccessibleTooltipButton.default, {
      className: silenceClass,
      onClick: this.onSilenceClick,
      title: this.state.silenced ? (0, _languageHandler._t)("Sound on") : (0, _languageHandler._t)("Silence call")
    }));
  }

}

exports.default = IncomingLegacyCallToast;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,