"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Key = exports.IS_MAC = void 0;
exports.isOnlyCtrlOrCmdKeyEvent = isOnlyCtrlOrCmdKeyEvent;

/*
Copyright 2016 OpenMarket Ltd
Copyright 2017 New Vector Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const Key = {
  HOME: "Home",
  END: "End",
  PAGE_UP: "PageUp",
  PAGE_DOWN: "PageDown",
  BACKSPACE: "Backspace",
  DELETE: "Delete",
  ARROW_UP: "ArrowUp",
  ARROW_DOWN: "ArrowDown",
  ARROW_LEFT: "ArrowLeft",
  ARROW_RIGHT: "ArrowRight",
  TAB: "Tab",
  ESCAPE: "Escape",
  ENTER: "Enter",
  ALT: "Alt",
  CONTROL: "Control",
  META: "Meta",
  SHIFT: "Shift",
  CONTEXT_MENU: "ContextMenu",
  COMMA: ",",
  PERIOD: ".",
  LESS_THAN: "<",
  GREATER_THAN: ">",
  BACKTICK: "`",
  SPACE: " ",
  SLASH: "/",
  SQUARE_BRACKET_LEFT: "[",
  SQUARE_BRACKET_RIGHT: "]",
  SEMICOLON: ";",
  A: "a",
  B: "b",
  C: "c",
  D: "d",
  E: "e",
  F: "f",
  G: "g",
  H: "h",
  I: "i",
  J: "j",
  K: "k",
  L: "l",
  M: "m",
  N: "n",
  O: "o",
  P: "p",
  Q: "q",
  R: "r",
  S: "s",
  T: "t",
  U: "u",
  V: "v",
  W: "w",
  X: "x",
  Y: "y",
  Z: "z"
};
exports.Key = Key;
const IS_MAC = navigator.platform.toUpperCase().includes('MAC');
exports.IS_MAC = IS_MAC;

function isOnlyCtrlOrCmdKeyEvent(ev) {
  if (IS_MAC) {
    return ev.metaKey && !ev.altKey && !ev.ctrlKey && !ev.shiftKey;
  } else {
    return ev.ctrlKey && !ev.altKey && !ev.metaKey && !ev.shiftKey;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJLZXkiLCJIT01FIiwiRU5EIiwiUEFHRV9VUCIsIlBBR0VfRE9XTiIsIkJBQ0tTUEFDRSIsIkRFTEVURSIsIkFSUk9XX1VQIiwiQVJST1dfRE9XTiIsIkFSUk9XX0xFRlQiLCJBUlJPV19SSUdIVCIsIlRBQiIsIkVTQ0FQRSIsIkVOVEVSIiwiQUxUIiwiQ09OVFJPTCIsIk1FVEEiLCJTSElGVCIsIkNPTlRFWFRfTUVOVSIsIkNPTU1BIiwiUEVSSU9EIiwiTEVTU19USEFOIiwiR1JFQVRFUl9USEFOIiwiQkFDS1RJQ0siLCJTUEFDRSIsIlNMQVNIIiwiU1FVQVJFX0JSQUNLRVRfTEVGVCIsIlNRVUFSRV9CUkFDS0VUX1JJR0hUIiwiU0VNSUNPTE9OIiwiQSIsIkIiLCJDIiwiRCIsIkUiLCJGIiwiRyIsIkgiLCJJIiwiSiIsIksiLCJMIiwiTSIsIk4iLCJPIiwiUCIsIlEiLCJSIiwiUyIsIlQiLCJVIiwiViIsIlciLCJYIiwiWSIsIloiLCJJU19NQUMiLCJuYXZpZ2F0b3IiLCJwbGF0Zm9ybSIsInRvVXBwZXJDYXNlIiwiaW5jbHVkZXMiLCJpc09ubHlDdHJsT3JDbWRLZXlFdmVudCIsImV2IiwibWV0YUtleSIsImFsdEtleSIsImN0cmxLZXkiLCJzaGlmdEtleSJdLCJzb3VyY2VzIjpbIi4uL3NyYy9LZXlib2FyZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMTYgT3Blbk1hcmtldCBMdGRcbkNvcHlyaWdodCAyMDE3IE5ldyBWZWN0b3IgTHRkXG5Db3B5cmlnaHQgMjAxOSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmV4cG9ydCBjb25zdCBLZXkgPSB7XG4gICAgSE9NRTogXCJIb21lXCIsXG4gICAgRU5EOiBcIkVuZFwiLFxuICAgIFBBR0VfVVA6IFwiUGFnZVVwXCIsXG4gICAgUEFHRV9ET1dOOiBcIlBhZ2VEb3duXCIsXG4gICAgQkFDS1NQQUNFOiBcIkJhY2tzcGFjZVwiLFxuICAgIERFTEVURTogXCJEZWxldGVcIixcbiAgICBBUlJPV19VUDogXCJBcnJvd1VwXCIsXG4gICAgQVJST1dfRE9XTjogXCJBcnJvd0Rvd25cIixcbiAgICBBUlJPV19MRUZUOiBcIkFycm93TGVmdFwiLFxuICAgIEFSUk9XX1JJR0hUOiBcIkFycm93UmlnaHRcIixcbiAgICBUQUI6IFwiVGFiXCIsXG4gICAgRVNDQVBFOiBcIkVzY2FwZVwiLFxuICAgIEVOVEVSOiBcIkVudGVyXCIsXG4gICAgQUxUOiBcIkFsdFwiLFxuICAgIENPTlRST0w6IFwiQ29udHJvbFwiLFxuICAgIE1FVEE6IFwiTWV0YVwiLFxuICAgIFNISUZUOiBcIlNoaWZ0XCIsXG4gICAgQ09OVEVYVF9NRU5VOiBcIkNvbnRleHRNZW51XCIsXG5cbiAgICBDT01NQTogXCIsXCIsXG4gICAgUEVSSU9EOiBcIi5cIixcbiAgICBMRVNTX1RIQU46IFwiPFwiLFxuICAgIEdSRUFURVJfVEhBTjogXCI+XCIsXG4gICAgQkFDS1RJQ0s6IFwiYFwiLFxuICAgIFNQQUNFOiBcIiBcIixcbiAgICBTTEFTSDogXCIvXCIsXG4gICAgU1FVQVJFX0JSQUNLRVRfTEVGVDogXCJbXCIsXG4gICAgU1FVQVJFX0JSQUNLRVRfUklHSFQ6IFwiXVwiLFxuICAgIFNFTUlDT0xPTjogXCI7XCIsXG4gICAgQTogXCJhXCIsXG4gICAgQjogXCJiXCIsXG4gICAgQzogXCJjXCIsXG4gICAgRDogXCJkXCIsXG4gICAgRTogXCJlXCIsXG4gICAgRjogXCJmXCIsXG4gICAgRzogXCJnXCIsXG4gICAgSDogXCJoXCIsXG4gICAgSTogXCJpXCIsXG4gICAgSjogXCJqXCIsXG4gICAgSzogXCJrXCIsXG4gICAgTDogXCJsXCIsXG4gICAgTTogXCJtXCIsXG4gICAgTjogXCJuXCIsXG4gICAgTzogXCJvXCIsXG4gICAgUDogXCJwXCIsXG4gICAgUTogXCJxXCIsXG4gICAgUjogXCJyXCIsXG4gICAgUzogXCJzXCIsXG4gICAgVDogXCJ0XCIsXG4gICAgVTogXCJ1XCIsXG4gICAgVjogXCJ2XCIsXG4gICAgVzogXCJ3XCIsXG4gICAgWDogXCJ4XCIsXG4gICAgWTogXCJ5XCIsXG4gICAgWjogXCJ6XCIsXG59O1xuXG5leHBvcnQgY29uc3QgSVNfTUFDID0gbmF2aWdhdG9yLnBsYXRmb3JtLnRvVXBwZXJDYXNlKCkuaW5jbHVkZXMoJ01BQycpO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNPbmx5Q3RybE9yQ21kS2V5RXZlbnQoZXYpIHtcbiAgICBpZiAoSVNfTUFDKSB7XG4gICAgICAgIHJldHVybiBldi5tZXRhS2V5ICYmICFldi5hbHRLZXkgJiYgIWV2LmN0cmxLZXkgJiYgIWV2LnNoaWZ0S2V5O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBldi5jdHJsS2V5ICYmICFldi5hbHRLZXkgJiYgIWV2Lm1ldGFLZXkgJiYgIWV2LnNoaWZ0S2V5O1xuICAgIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRU8sTUFBTUEsR0FBRyxHQUFHO0VBQ2ZDLElBQUksRUFBRSxNQURTO0VBRWZDLEdBQUcsRUFBRSxLQUZVO0VBR2ZDLE9BQU8sRUFBRSxRQUhNO0VBSWZDLFNBQVMsRUFBRSxVQUpJO0VBS2ZDLFNBQVMsRUFBRSxXQUxJO0VBTWZDLE1BQU0sRUFBRSxRQU5PO0VBT2ZDLFFBQVEsRUFBRSxTQVBLO0VBUWZDLFVBQVUsRUFBRSxXQVJHO0VBU2ZDLFVBQVUsRUFBRSxXQVRHO0VBVWZDLFdBQVcsRUFBRSxZQVZFO0VBV2ZDLEdBQUcsRUFBRSxLQVhVO0VBWWZDLE1BQU0sRUFBRSxRQVpPO0VBYWZDLEtBQUssRUFBRSxPQWJRO0VBY2ZDLEdBQUcsRUFBRSxLQWRVO0VBZWZDLE9BQU8sRUFBRSxTQWZNO0VBZ0JmQyxJQUFJLEVBQUUsTUFoQlM7RUFpQmZDLEtBQUssRUFBRSxPQWpCUTtFQWtCZkMsWUFBWSxFQUFFLGFBbEJDO0VBb0JmQyxLQUFLLEVBQUUsR0FwQlE7RUFxQmZDLE1BQU0sRUFBRSxHQXJCTztFQXNCZkMsU0FBUyxFQUFFLEdBdEJJO0VBdUJmQyxZQUFZLEVBQUUsR0F2QkM7RUF3QmZDLFFBQVEsRUFBRSxHQXhCSztFQXlCZkMsS0FBSyxFQUFFLEdBekJRO0VBMEJmQyxLQUFLLEVBQUUsR0ExQlE7RUEyQmZDLG1CQUFtQixFQUFFLEdBM0JOO0VBNEJmQyxvQkFBb0IsRUFBRSxHQTVCUDtFQTZCZkMsU0FBUyxFQUFFLEdBN0JJO0VBOEJmQyxDQUFDLEVBQUUsR0E5Qlk7RUErQmZDLENBQUMsRUFBRSxHQS9CWTtFQWdDZkMsQ0FBQyxFQUFFLEdBaENZO0VBaUNmQyxDQUFDLEVBQUUsR0FqQ1k7RUFrQ2ZDLENBQUMsRUFBRSxHQWxDWTtFQW1DZkMsQ0FBQyxFQUFFLEdBbkNZO0VBb0NmQyxDQUFDLEVBQUUsR0FwQ1k7RUFxQ2ZDLENBQUMsRUFBRSxHQXJDWTtFQXNDZkMsQ0FBQyxFQUFFLEdBdENZO0VBdUNmQyxDQUFDLEVBQUUsR0F2Q1k7RUF3Q2ZDLENBQUMsRUFBRSxHQXhDWTtFQXlDZkMsQ0FBQyxFQUFFLEdBekNZO0VBMENmQyxDQUFDLEVBQUUsR0ExQ1k7RUEyQ2ZDLENBQUMsRUFBRSxHQTNDWTtFQTRDZkMsQ0FBQyxFQUFFLEdBNUNZO0VBNkNmQyxDQUFDLEVBQUUsR0E3Q1k7RUE4Q2ZDLENBQUMsRUFBRSxHQTlDWTtFQStDZkMsQ0FBQyxFQUFFLEdBL0NZO0VBZ0RmQyxDQUFDLEVBQUUsR0FoRFk7RUFpRGZDLENBQUMsRUFBRSxHQWpEWTtFQWtEZkMsQ0FBQyxFQUFFLEdBbERZO0VBbURmQyxDQUFDLEVBQUUsR0FuRFk7RUFvRGZDLENBQUMsRUFBRSxHQXBEWTtFQXFEZkMsQ0FBQyxFQUFFLEdBckRZO0VBc0RmQyxDQUFDLEVBQUUsR0F0RFk7RUF1RGZDLENBQUMsRUFBRTtBQXZEWSxDQUFaOztBQTBEQSxNQUFNQyxNQUFNLEdBQUdDLFNBQVMsQ0FBQ0MsUUFBVixDQUFtQkMsV0FBbkIsR0FBaUNDLFFBQWpDLENBQTBDLEtBQTFDLENBQWY7OztBQUVBLFNBQVNDLHVCQUFULENBQWlDQyxFQUFqQyxFQUFxQztFQUN4QyxJQUFJTixNQUFKLEVBQVk7SUFDUixPQUFPTSxFQUFFLENBQUNDLE9BQUgsSUFBYyxDQUFDRCxFQUFFLENBQUNFLE1BQWxCLElBQTRCLENBQUNGLEVBQUUsQ0FBQ0csT0FBaEMsSUFBMkMsQ0FBQ0gsRUFBRSxDQUFDSSxRQUF0RDtFQUNILENBRkQsTUFFTztJQUNILE9BQU9KLEVBQUUsQ0FBQ0csT0FBSCxJQUFjLENBQUNILEVBQUUsQ0FBQ0UsTUFBbEIsSUFBNEIsQ0FBQ0YsRUFBRSxDQUFDQyxPQUFoQyxJQUEyQyxDQUFDRCxFQUFFLENBQUNJLFFBQXREO0VBQ0g7QUFDSiJ9