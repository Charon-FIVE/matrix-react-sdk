"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WidgetMessagingStoreEvent = exports.WidgetMessagingStore = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _AsyncStoreWithClient = require("../AsyncStoreWithClient");

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var _maps = require("../../utils/maps");

var _WidgetUtils = _interopRequireDefault(require("../../utils/WidgetUtils"));

/*
 * Copyright 2020 The Matrix.org Foundation C.I.C.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
let WidgetMessagingStoreEvent;
/**
 * Temporary holding store for widget messaging instances. This is eventually
 * going to be merged with a more complete WidgetStore, but for now it's
 * easiest to split this into a single place.
 */

exports.WidgetMessagingStoreEvent = WidgetMessagingStoreEvent;

(function (WidgetMessagingStoreEvent) {
  WidgetMessagingStoreEvent["StoreMessaging"] = "store_messaging";
  WidgetMessagingStoreEvent["StopMessaging"] = "stop_messaging";
})(WidgetMessagingStoreEvent || (exports.WidgetMessagingStoreEvent = WidgetMessagingStoreEvent = {}));

class WidgetMessagingStore extends _AsyncStoreWithClient.AsyncStoreWithClient {
  // <widget UID, ClientWidgetAPi>
  constructor() {
    super(_dispatcher.default);
    (0, _defineProperty2.default)(this, "widgetMap", new _maps.EnhancedMap());
  }

  static get instance() {
    return WidgetMessagingStore.internalInstance;
  }

  async onAction(payload) {// nothing to do
  }

  async onReady() {
    // just in case
    this.widgetMap.clear();
  }

  storeMessaging(widget, roomId, widgetApi) {
    this.stopMessaging(widget, roomId);

    const uid = _WidgetUtils.default.calcWidgetUid(widget.id, roomId);

    this.widgetMap.set(uid, widgetApi);
    this.emit(WidgetMessagingStoreEvent.StoreMessaging, uid, widgetApi);
  }

  stopMessaging(widget, roomId) {
    this.stopMessagingByUid(_WidgetUtils.default.calcWidgetUid(widget.id, roomId));
  }

  getMessaging(widget, roomId) {
    return this.widgetMap.get(_WidgetUtils.default.calcWidgetUid(widget.id, roomId));
  }
  /**
   * Stops the widget messaging instance for a given widget UID.
   * @param {string} widgetUid The widget UID.
   */


  stopMessagingByUid(widgetUid) {
    this.widgetMap.remove(widgetUid)?.stop();
    this.emit(WidgetMessagingStoreEvent.StopMessaging, widgetUid);
  }
  /**
   * Gets the widget messaging class for a given widget UID.
   * @param {string} widgetUid The widget UID.
   * @returns {ClientWidgetApi} The widget API, or a falsy value if not found.
   */


  getMessagingForUid(widgetUid) {
    return this.widgetMap.get(widgetUid);
  }

}

exports.WidgetMessagingStore = WidgetMessagingStore;
(0, _defineProperty2.default)(WidgetMessagingStore, "internalInstance", (() => {
  const instance = new WidgetMessagingStore();
  instance.start();
  return instance;
})());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJXaWRnZXRNZXNzYWdpbmdTdG9yZUV2ZW50IiwiV2lkZ2V0TWVzc2FnaW5nU3RvcmUiLCJBc3luY1N0b3JlV2l0aENsaWVudCIsImNvbnN0cnVjdG9yIiwiZGVmYXVsdERpc3BhdGNoZXIiLCJFbmhhbmNlZE1hcCIsImluc3RhbmNlIiwiaW50ZXJuYWxJbnN0YW5jZSIsIm9uQWN0aW9uIiwicGF5bG9hZCIsIm9uUmVhZHkiLCJ3aWRnZXRNYXAiLCJjbGVhciIsInN0b3JlTWVzc2FnaW5nIiwid2lkZ2V0Iiwicm9vbUlkIiwid2lkZ2V0QXBpIiwic3RvcE1lc3NhZ2luZyIsInVpZCIsIldpZGdldFV0aWxzIiwiY2FsY1dpZGdldFVpZCIsImlkIiwic2V0IiwiZW1pdCIsIlN0b3JlTWVzc2FnaW5nIiwic3RvcE1lc3NhZ2luZ0J5VWlkIiwiZ2V0TWVzc2FnaW5nIiwiZ2V0Iiwid2lkZ2V0VWlkIiwicmVtb3ZlIiwic3RvcCIsIlN0b3BNZXNzYWdpbmciLCJnZXRNZXNzYWdpbmdGb3JVaWQiLCJzdGFydCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdG9yZXMvd2lkZ2V0cy9XaWRnZXRNZXNzYWdpbmdTdG9yZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMjAgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENsaWVudFdpZGdldEFwaSwgV2lkZ2V0IH0gZnJvbSBcIm1hdHJpeC13aWRnZXQtYXBpXCI7XG5cbmltcG9ydCB7IEFzeW5jU3RvcmVXaXRoQ2xpZW50IH0gZnJvbSBcIi4uL0FzeW5jU3RvcmVXaXRoQ2xpZW50XCI7XG5pbXBvcnQgZGVmYXVsdERpc3BhdGNoZXIgZnJvbSBcIi4uLy4uL2Rpc3BhdGNoZXIvZGlzcGF0Y2hlclwiO1xuaW1wb3J0IHsgQWN0aW9uUGF5bG9hZCB9IGZyb20gXCIuLi8uLi9kaXNwYXRjaGVyL3BheWxvYWRzXCI7XG5pbXBvcnQgeyBFbmhhbmNlZE1hcCB9IGZyb20gXCIuLi8uLi91dGlscy9tYXBzXCI7XG5pbXBvcnQgV2lkZ2V0VXRpbHMgZnJvbSBcIi4uLy4uL3V0aWxzL1dpZGdldFV0aWxzXCI7XG5cbmV4cG9ydCBlbnVtIFdpZGdldE1lc3NhZ2luZ1N0b3JlRXZlbnQge1xuICAgIFN0b3JlTWVzc2FnaW5nID0gXCJzdG9yZV9tZXNzYWdpbmdcIixcbiAgICBTdG9wTWVzc2FnaW5nID0gXCJzdG9wX21lc3NhZ2luZ1wiLFxufVxuXG4vKipcbiAqIFRlbXBvcmFyeSBob2xkaW5nIHN0b3JlIGZvciB3aWRnZXQgbWVzc2FnaW5nIGluc3RhbmNlcy4gVGhpcyBpcyBldmVudHVhbGx5XG4gKiBnb2luZyB0byBiZSBtZXJnZWQgd2l0aCBhIG1vcmUgY29tcGxldGUgV2lkZ2V0U3RvcmUsIGJ1dCBmb3Igbm93IGl0J3NcbiAqIGVhc2llc3QgdG8gc3BsaXQgdGhpcyBpbnRvIGEgc2luZ2xlIHBsYWNlLlxuICovXG5leHBvcnQgY2xhc3MgV2lkZ2V0TWVzc2FnaW5nU3RvcmUgZXh0ZW5kcyBBc3luY1N0b3JlV2l0aENsaWVudDx7fT4ge1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IGludGVybmFsSW5zdGFuY2UgPSAoKCkgPT4ge1xuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IG5ldyBXaWRnZXRNZXNzYWdpbmdTdG9yZSgpO1xuICAgICAgICBpbnN0YW5jZS5zdGFydCgpO1xuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfSkoKTtcblxuICAgIHByaXZhdGUgd2lkZ2V0TWFwID0gbmV3IEVuaGFuY2VkTWFwPHN0cmluZywgQ2xpZW50V2lkZ2V0QXBpPigpOyAvLyA8d2lkZ2V0IFVJRCwgQ2xpZW50V2lkZ2V0QVBpPlxuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihkZWZhdWx0RGlzcGF0Y2hlcik7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBnZXQgaW5zdGFuY2UoKTogV2lkZ2V0TWVzc2FnaW5nU3RvcmUge1xuICAgICAgICByZXR1cm4gV2lkZ2V0TWVzc2FnaW5nU3RvcmUuaW50ZXJuYWxJbnN0YW5jZTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgYXN5bmMgb25BY3Rpb24ocGF5bG9hZDogQWN0aW9uUGF5bG9hZCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICAvLyBub3RoaW5nIHRvIGRvXG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGFzeW5jIG9uUmVhZHkoKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgLy8ganVzdCBpbiBjYXNlXG4gICAgICAgIHRoaXMud2lkZ2V0TWFwLmNsZWFyKCk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0b3JlTWVzc2FnaW5nKHdpZGdldDogV2lkZ2V0LCByb29tSWQ6IHN0cmluZywgd2lkZ2V0QXBpOiBDbGllbnRXaWRnZXRBcGkpIHtcbiAgICAgICAgdGhpcy5zdG9wTWVzc2FnaW5nKHdpZGdldCwgcm9vbUlkKTtcbiAgICAgICAgY29uc3QgdWlkID0gV2lkZ2V0VXRpbHMuY2FsY1dpZGdldFVpZCh3aWRnZXQuaWQsIHJvb21JZCk7XG4gICAgICAgIHRoaXMud2lkZ2V0TWFwLnNldCh1aWQsIHdpZGdldEFwaSk7XG5cbiAgICAgICAgdGhpcy5lbWl0KFdpZGdldE1lc3NhZ2luZ1N0b3JlRXZlbnQuU3RvcmVNZXNzYWdpbmcsIHVpZCwgd2lkZ2V0QXBpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RvcE1lc3NhZ2luZyh3aWRnZXQ6IFdpZGdldCwgcm9vbUlkOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zdG9wTWVzc2FnaW5nQnlVaWQoV2lkZ2V0VXRpbHMuY2FsY1dpZGdldFVpZCh3aWRnZXQuaWQsIHJvb21JZCkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRNZXNzYWdpbmcod2lkZ2V0OiBXaWRnZXQsIHJvb21JZDogc3RyaW5nKTogQ2xpZW50V2lkZ2V0QXBpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2lkZ2V0TWFwLmdldChXaWRnZXRVdGlscy5jYWxjV2lkZ2V0VWlkKHdpZGdldC5pZCwgcm9vbUlkKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RvcHMgdGhlIHdpZGdldCBtZXNzYWdpbmcgaW5zdGFuY2UgZm9yIGEgZ2l2ZW4gd2lkZ2V0IFVJRC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gd2lkZ2V0VWlkIFRoZSB3aWRnZXQgVUlELlxuICAgICAqL1xuICAgIHB1YmxpYyBzdG9wTWVzc2FnaW5nQnlVaWQod2lkZ2V0VWlkOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy53aWRnZXRNYXAucmVtb3ZlKHdpZGdldFVpZCk/LnN0b3AoKTtcbiAgICAgICAgdGhpcy5lbWl0KFdpZGdldE1lc3NhZ2luZ1N0b3JlRXZlbnQuU3RvcE1lc3NhZ2luZywgd2lkZ2V0VWlkKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB3aWRnZXQgbWVzc2FnaW5nIGNsYXNzIGZvciBhIGdpdmVuIHdpZGdldCBVSUQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHdpZGdldFVpZCBUaGUgd2lkZ2V0IFVJRC5cbiAgICAgKiBAcmV0dXJucyB7Q2xpZW50V2lkZ2V0QXBpfSBUaGUgd2lkZ2V0IEFQSSwgb3IgYSBmYWxzeSB2YWx1ZSBpZiBub3QgZm91bmQuXG4gICAgICovXG4gICAgcHVibGljIGdldE1lc3NhZ2luZ0ZvclVpZCh3aWRnZXRVaWQ6IHN0cmluZyk6IENsaWVudFdpZGdldEFwaSB7XG4gICAgICAgIHJldHVybiB0aGlzLndpZGdldE1hcC5nZXQod2lkZ2V0VWlkKTtcbiAgICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBa0JBOztBQUNBOztBQUVBOztBQUNBOztBQXRCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7SUFVWUEseUI7QUFLWjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O1dBVFlBLHlCO0VBQUFBLHlCO0VBQUFBLHlCO0dBQUFBLHlCLHlDQUFBQSx5Qjs7QUFVTCxNQUFNQyxvQkFBTixTQUFtQ0MsMENBQW5DLENBQTREO0VBT0M7RUFFekRDLFdBQVcsR0FBRztJQUNqQixNQUFNQyxtQkFBTjtJQURpQixpREFGRCxJQUFJQyxpQkFBSixFQUVDO0VBRXBCOztFQUV5QixXQUFSQyxRQUFRLEdBQXlCO0lBQy9DLE9BQU9MLG9CQUFvQixDQUFDTSxnQkFBNUI7RUFDSDs7RUFFdUIsTUFBUkMsUUFBUSxDQUFDQyxPQUFELEVBQXdDLENBQzVEO0VBQ0g7O0VBRXNCLE1BQVBDLE9BQU8sR0FBaUI7SUFDcEM7SUFDQSxLQUFLQyxTQUFMLENBQWVDLEtBQWY7RUFDSDs7RUFFTUMsY0FBYyxDQUFDQyxNQUFELEVBQWlCQyxNQUFqQixFQUFpQ0MsU0FBakMsRUFBNkQ7SUFDOUUsS0FBS0MsYUFBTCxDQUFtQkgsTUFBbkIsRUFBMkJDLE1BQTNCOztJQUNBLE1BQU1HLEdBQUcsR0FBR0Msb0JBQUEsQ0FBWUMsYUFBWixDQUEwQk4sTUFBTSxDQUFDTyxFQUFqQyxFQUFxQ04sTUFBckMsQ0FBWjs7SUFDQSxLQUFLSixTQUFMLENBQWVXLEdBQWYsQ0FBbUJKLEdBQW5CLEVBQXdCRixTQUF4QjtJQUVBLEtBQUtPLElBQUwsQ0FBVXZCLHlCQUF5QixDQUFDd0IsY0FBcEMsRUFBb0ROLEdBQXBELEVBQXlERixTQUF6RDtFQUNIOztFQUVNQyxhQUFhLENBQUNILE1BQUQsRUFBaUJDLE1BQWpCLEVBQWlDO0lBQ2pELEtBQUtVLGtCQUFMLENBQXdCTixvQkFBQSxDQUFZQyxhQUFaLENBQTBCTixNQUFNLENBQUNPLEVBQWpDLEVBQXFDTixNQUFyQyxDQUF4QjtFQUNIOztFQUVNVyxZQUFZLENBQUNaLE1BQUQsRUFBaUJDLE1BQWpCLEVBQWtEO0lBQ2pFLE9BQU8sS0FBS0osU0FBTCxDQUFlZ0IsR0FBZixDQUFtQlIsb0JBQUEsQ0FBWUMsYUFBWixDQUEwQk4sTUFBTSxDQUFDTyxFQUFqQyxFQUFxQ04sTUFBckMsQ0FBbkIsQ0FBUDtFQUNIO0VBRUQ7QUFDSjtBQUNBO0FBQ0E7OztFQUNXVSxrQkFBa0IsQ0FBQ0csU0FBRCxFQUFvQjtJQUN6QyxLQUFLakIsU0FBTCxDQUFla0IsTUFBZixDQUFzQkQsU0FBdEIsR0FBa0NFLElBQWxDO0lBQ0EsS0FBS1AsSUFBTCxDQUFVdkIseUJBQXlCLENBQUMrQixhQUFwQyxFQUFtREgsU0FBbkQ7RUFDSDtFQUVEO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7OztFQUNXSSxrQkFBa0IsQ0FBQ0osU0FBRCxFQUFxQztJQUMxRCxPQUFPLEtBQUtqQixTQUFMLENBQWVnQixHQUFmLENBQW1CQyxTQUFuQixDQUFQO0VBQ0g7O0FBMUQ4RDs7OzhCQUF0RDNCLG9CLHNCQUNrQyxDQUFDLE1BQU07RUFDOUMsTUFBTUssUUFBUSxHQUFHLElBQUlMLG9CQUFKLEVBQWpCO0VBQ0FLLFFBQVEsQ0FBQzJCLEtBQVQ7RUFDQSxPQUFPM0IsUUFBUDtBQUNILENBSjBDLEcifQ==