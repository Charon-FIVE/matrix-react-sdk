"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CallStoreEvent = exports.CallStore = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _logger = require("matrix-js-sdk/src/logger");

var _client = require("matrix-js-sdk/src/client");

var _roomState = require("matrix-js-sdk/src/models/room-state");

var _dispatcher = _interopRequireDefault(require("../dispatcher/dispatcher"));

var _AsyncStore = require("./AsyncStore");

var _AsyncStoreWithClient = require("./AsyncStoreWithClient");

var _WidgetStore = _interopRequireDefault(require("./WidgetStore"));

var _SettingsStore = _interopRequireDefault(require("../settings/SettingsStore"));

var _SettingLevel = require("../settings/SettingLevel");

var _Call = require("../models/Call");

/*
Copyright 2022 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
let CallStoreEvent;
exports.CallStoreEvent = CallStoreEvent;

(function (CallStoreEvent) {
  CallStoreEvent["Call"] = "call";
  CallStoreEvent["ActiveCalls"] = "active_calls";
})(CallStoreEvent || (exports.CallStoreEvent = CallStoreEvent = {}));

class CallStore extends _AsyncStoreWithClient.AsyncStoreWithClient {
  static get instance() {
    if (!this._instance) {
      this._instance = new CallStore();

      this._instance.start();
    }

    return this._instance;
  }

  constructor() {
    super(_dispatcher.default);
    (0, _defineProperty2.default)(this, "_activeCalls", new Set());
    (0, _defineProperty2.default)(this, "calls", new Map());
    (0, _defineProperty2.default)(this, "callListeners", new Map());
    (0, _defineProperty2.default)(this, "onRoom", room => this.updateRoom(room));
    (0, _defineProperty2.default)(this, "onRoomState", (event, state) => {
      // If there's already a call stored for this room, it's understood to
      // still be valid until destroyed
      if (!this.calls.has(state.roomId)) {
        const room = this.matrixClient.getRoom(state.roomId); // State events can arrive before the room does, when creating a room

        if (room !== null) this.updateRoom(room);
      }
    });
    (0, _defineProperty2.default)(this, "onWidgets", roomId => {
      if (roomId === null) {
        // This store happened to start before the widget store was done
        // loading all rooms, so we need to initialize each room again
        for (const room of this.matrixClient.getRooms()) {
          this.updateRoom(room);
        }
      } else {
        const room = this.matrixClient.getRoom(roomId); // Widget updates can arrive before the room does, empirically

        if (room !== null) this.updateRoom(room);
      }
    });
  }

  async onAction(payload) {// nothing to do
  }

  async onReady() {
    // We assume that the calls present in a room are a function of room
    // state and room widgets, so we initialize the room map here and then
    // update it whenever those change
    for (const room of this.matrixClient.getRooms()) {
      this.updateRoom(room);
    }

    this.matrixClient.on(_client.ClientEvent.Room, this.onRoom);
    this.matrixClient.on(_roomState.RoomStateEvent.Events, this.onRoomState);

    _WidgetStore.default.instance.on(_AsyncStore.UPDATE_EVENT, this.onWidgets); // If the room ID of a previously connected call is still in settings at
    // this time, that's a sign that we failed to disconnect from it
    // properly, and need to clean up after ourselves


    const uncleanlyDisconnectedRoomIds = _SettingsStore.default.getValue("activeCallRoomIds");

    if (uncleanlyDisconnectedRoomIds.length) {
      await Promise.all([...uncleanlyDisconnectedRoomIds.map(async uncleanlyDisconnectedRoomId => {
        _logger.logger.log(`Cleaning up call state for room ${uncleanlyDisconnectedRoomId}`);

        await this.get(uncleanlyDisconnectedRoomId)?.clean();
      }), _SettingsStore.default.setValue("activeCallRoomIds", null, _SettingLevel.SettingLevel.DEVICE, [])]);
    }
  }

  async onNotReady() {
    for (const [call, listenerMap] of this.callListeners) {
      // It's important that we remove the listeners before destroying the
      // call, because otherwise the call's onDestroy callback would fire
      // and immediately repopulate the map
      for (const [event, listener] of listenerMap) call.off(event, listener);

      call.destroy();
    }

    this.callListeners.clear();
    this.calls.clear();
    this.activeCalls = new Set();
    this.matrixClient.off(_client.ClientEvent.Room, this.onRoom);
    this.matrixClient.off(_roomState.RoomStateEvent.Events, this.onRoomState);

    _WidgetStore.default.instance.off(_AsyncStore.UPDATE_EVENT, this.onWidgets);
  }

  /**
   * The calls to which the user is currently connected.
   */
  get activeCalls() {
    return this._activeCalls;
  }

  set activeCalls(value) {
    this._activeCalls = value;
    this.emit(CallStoreEvent.ActiveCalls, value); // The room IDs are persisted to settings so we can detect unclean disconnects

    _SettingsStore.default.setValue("activeCallRoomIds", null, _SettingLevel.SettingLevel.DEVICE, [...value].map(call => call.roomId));
  }

  updateRoom(room) {
    if (!this.calls.has(room.roomId)) {
      const call = _Call.Call.get(room);

      if (call) {
        const onConnectionState = state => {
          if (state === _Call.ConnectionState.Connected) {
            this.activeCalls = new Set([...this.activeCalls, call]);
          } else if (state === _Call.ConnectionState.Disconnected) {
            this.activeCalls = new Set([...this.activeCalls].filter(c => c !== call));
          }
        };

        const onDestroy = () => {
          this.calls.delete(room.roomId);

          for (const [event, listener] of this.callListeners.get(call)) call.off(event, listener);

          this.updateRoom(room);
        };

        call.on(_Call.CallEvent.ConnectionState, onConnectionState);
        call.on(_Call.CallEvent.Destroy, onDestroy);
        this.calls.set(room.roomId, call);
        this.callListeners.set(call, new Map([[_Call.CallEvent.ConnectionState, onConnectionState], [_Call.CallEvent.Destroy, onDestroy]]));
      }

      this.emit(CallStoreEvent.Call, call, room.roomId);
    }
  }
  /**
   * Gets the call associated with the given room, if any.
   * @param {string} roomId The room's ID.
   * @returns {Call | null} The call.
   */


  get(roomId) {
    return this.calls.get(roomId) ?? null;
  }

}

exports.CallStore = CallStore;
(0, _defineProperty2.default)(CallStore, "_instance", void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDYWxsU3RvcmVFdmVudCIsIkNhbGxTdG9yZSIsIkFzeW5jU3RvcmVXaXRoQ2xpZW50IiwiaW5zdGFuY2UiLCJfaW5zdGFuY2UiLCJzdGFydCIsImNvbnN0cnVjdG9yIiwiZGVmYXVsdERpc3BhdGNoZXIiLCJTZXQiLCJNYXAiLCJyb29tIiwidXBkYXRlUm9vbSIsImV2ZW50Iiwic3RhdGUiLCJjYWxscyIsImhhcyIsInJvb21JZCIsIm1hdHJpeENsaWVudCIsImdldFJvb20iLCJnZXRSb29tcyIsIm9uQWN0aW9uIiwicGF5bG9hZCIsIm9uUmVhZHkiLCJvbiIsIkNsaWVudEV2ZW50IiwiUm9vbSIsIm9uUm9vbSIsIlJvb21TdGF0ZUV2ZW50IiwiRXZlbnRzIiwib25Sb29tU3RhdGUiLCJXaWRnZXRTdG9yZSIsIlVQREFURV9FVkVOVCIsIm9uV2lkZ2V0cyIsInVuY2xlYW5seURpc2Nvbm5lY3RlZFJvb21JZHMiLCJTZXR0aW5nc1N0b3JlIiwiZ2V0VmFsdWUiLCJsZW5ndGgiLCJQcm9taXNlIiwiYWxsIiwibWFwIiwidW5jbGVhbmx5RGlzY29ubmVjdGVkUm9vbUlkIiwibG9nZ2VyIiwibG9nIiwiZ2V0IiwiY2xlYW4iLCJzZXRWYWx1ZSIsIlNldHRpbmdMZXZlbCIsIkRFVklDRSIsIm9uTm90UmVhZHkiLCJjYWxsIiwibGlzdGVuZXJNYXAiLCJjYWxsTGlzdGVuZXJzIiwibGlzdGVuZXIiLCJvZmYiLCJkZXN0cm95IiwiY2xlYXIiLCJhY3RpdmVDYWxscyIsIl9hY3RpdmVDYWxscyIsInZhbHVlIiwiZW1pdCIsIkFjdGl2ZUNhbGxzIiwiQ2FsbCIsIm9uQ29ubmVjdGlvblN0YXRlIiwiQ29ubmVjdGlvblN0YXRlIiwiQ29ubmVjdGVkIiwiRGlzY29ubmVjdGVkIiwiZmlsdGVyIiwiYyIsIm9uRGVzdHJveSIsImRlbGV0ZSIsIkNhbGxFdmVudCIsIkRlc3Ryb3kiLCJzZXQiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvc3RvcmVzL0NhbGxTdG9yZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMjIgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbG9nZ2VyXCI7XG5pbXBvcnQgeyBDbGllbnRFdmVudCB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9jbGllbnRcIjtcbmltcG9ydCB7IFJvb21TdGF0ZUV2ZW50IH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL21vZGVscy9yb29tLXN0YXRlXCI7XG5cbmltcG9ydCB0eXBlIHsgTWF0cml4RXZlbnQgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbW9kZWxzL2V2ZW50XCI7XG5pbXBvcnQgdHlwZSB7IFJvb20gfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbW9kZWxzL3Jvb21cIjtcbmltcG9ydCB0eXBlIHsgUm9vbVN0YXRlIH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL21vZGVscy9yb29tLXN0YXRlXCI7XG5pbXBvcnQgZGVmYXVsdERpc3BhdGNoZXIgZnJvbSBcIi4uL2Rpc3BhdGNoZXIvZGlzcGF0Y2hlclwiO1xuaW1wb3J0IHsgQWN0aW9uUGF5bG9hZCB9IGZyb20gXCIuLi9kaXNwYXRjaGVyL3BheWxvYWRzXCI7XG5pbXBvcnQgeyBVUERBVEVfRVZFTlQgfSBmcm9tIFwiLi9Bc3luY1N0b3JlXCI7XG5pbXBvcnQgeyBBc3luY1N0b3JlV2l0aENsaWVudCB9IGZyb20gXCIuL0FzeW5jU3RvcmVXaXRoQ2xpZW50XCI7XG5pbXBvcnQgV2lkZ2V0U3RvcmUgZnJvbSBcIi4vV2lkZ2V0U3RvcmVcIjtcbmltcG9ydCBTZXR0aW5nc1N0b3JlIGZyb20gXCIuLi9zZXR0aW5ncy9TZXR0aW5nc1N0b3JlXCI7XG5pbXBvcnQgeyBTZXR0aW5nTGV2ZWwgfSBmcm9tIFwiLi4vc2V0dGluZ3MvU2V0dGluZ0xldmVsXCI7XG5pbXBvcnQgeyBDYWxsLCBDYWxsRXZlbnQsIENvbm5lY3Rpb25TdGF0ZSB9IGZyb20gXCIuLi9tb2RlbHMvQ2FsbFwiO1xuXG5leHBvcnQgZW51bSBDYWxsU3RvcmVFdmVudCB7XG4gICAgLy8gU2lnbmFscyBhIGNoYW5nZSBpbiB0aGUgY2FsbCBhc3NvY2lhdGVkIHdpdGggYSBnaXZlbiByb29tXG4gICAgQ2FsbCA9IFwiY2FsbFwiLFxuICAgIC8vIFNpZ25hbHMgYSBjaGFuZ2UgaW4gdGhlIGFjdGl2ZSBjYWxsc1xuICAgIEFjdGl2ZUNhbGxzID0gXCJhY3RpdmVfY2FsbHNcIixcbn1cblxuZXhwb3J0IGNsYXNzIENhbGxTdG9yZSBleHRlbmRzIEFzeW5jU3RvcmVXaXRoQ2xpZW50PHt9PiB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlOiBDYWxsU3RvcmU7XG4gICAgcHVibGljIHN0YXRpYyBnZXQgaW5zdGFuY2UoKTogQ2FsbFN0b3JlIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pbnN0YW5jZSkge1xuICAgICAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBuZXcgQ2FsbFN0b3JlKCk7XG4gICAgICAgICAgICB0aGlzLl9pbnN0YW5jZS5zdGFydCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihkZWZhdWx0RGlzcGF0Y2hlcik7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGFzeW5jIG9uQWN0aW9uKHBheWxvYWQ6IEFjdGlvblBheWxvYWQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgLy8gbm90aGluZyB0byBkb1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBhc3luYyBvblJlYWR5KCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIC8vIFdlIGFzc3VtZSB0aGF0IHRoZSBjYWxscyBwcmVzZW50IGluIGEgcm9vbSBhcmUgYSBmdW5jdGlvbiBvZiByb29tXG4gICAgICAgIC8vIHN0YXRlIGFuZCByb29tIHdpZGdldHMsIHNvIHdlIGluaXRpYWxpemUgdGhlIHJvb20gbWFwIGhlcmUgYW5kIHRoZW5cbiAgICAgICAgLy8gdXBkYXRlIGl0IHdoZW5ldmVyIHRob3NlIGNoYW5nZVxuICAgICAgICBmb3IgKGNvbnN0IHJvb20gb2YgdGhpcy5tYXRyaXhDbGllbnQuZ2V0Um9vbXMoKSkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVSb29tKHJvb20pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWF0cml4Q2xpZW50Lm9uKENsaWVudEV2ZW50LlJvb20sIHRoaXMub25Sb29tKTtcbiAgICAgICAgdGhpcy5tYXRyaXhDbGllbnQub24oUm9vbVN0YXRlRXZlbnQuRXZlbnRzLCB0aGlzLm9uUm9vbVN0YXRlKTtcbiAgICAgICAgV2lkZ2V0U3RvcmUuaW5zdGFuY2Uub24oVVBEQVRFX0VWRU5ULCB0aGlzLm9uV2lkZ2V0cyk7XG5cbiAgICAgICAgLy8gSWYgdGhlIHJvb20gSUQgb2YgYSBwcmV2aW91c2x5IGNvbm5lY3RlZCBjYWxsIGlzIHN0aWxsIGluIHNldHRpbmdzIGF0XG4gICAgICAgIC8vIHRoaXMgdGltZSwgdGhhdCdzIGEgc2lnbiB0aGF0IHdlIGZhaWxlZCB0byBkaXNjb25uZWN0IGZyb20gaXRcbiAgICAgICAgLy8gcHJvcGVybHksIGFuZCBuZWVkIHRvIGNsZWFuIHVwIGFmdGVyIG91cnNlbHZlc1xuICAgICAgICBjb25zdCB1bmNsZWFubHlEaXNjb25uZWN0ZWRSb29tSWRzID0gU2V0dGluZ3NTdG9yZS5nZXRWYWx1ZTxzdHJpbmdbXT4oXCJhY3RpdmVDYWxsUm9vbUlkc1wiKTtcbiAgICAgICAgaWYgKHVuY2xlYW5seURpc2Nvbm5lY3RlZFJvb21JZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgLi4udW5jbGVhbmx5RGlzY29ubmVjdGVkUm9vbUlkcy5tYXAoYXN5bmMgdW5jbGVhbmx5RGlzY29ubmVjdGVkUm9vbUlkID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmxvZyhgQ2xlYW5pbmcgdXAgY2FsbCBzdGF0ZSBmb3Igcm9vbSAke3VuY2xlYW5seURpc2Nvbm5lY3RlZFJvb21JZH1gKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5nZXQodW5jbGVhbmx5RGlzY29ubmVjdGVkUm9vbUlkKT8uY2xlYW4oKTtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBTZXR0aW5nc1N0b3JlLnNldFZhbHVlKFwiYWN0aXZlQ2FsbFJvb21JZHNcIiwgbnVsbCwgU2V0dGluZ0xldmVsLkRFVklDRSwgW10pLFxuICAgICAgICAgICAgXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgYXN5bmMgb25Ob3RSZWFkeSgpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBmb3IgKGNvbnN0IFtjYWxsLCBsaXN0ZW5lck1hcF0gb2YgdGhpcy5jYWxsTGlzdGVuZXJzKSB7XG4gICAgICAgICAgICAvLyBJdCdzIGltcG9ydGFudCB0aGF0IHdlIHJlbW92ZSB0aGUgbGlzdGVuZXJzIGJlZm9yZSBkZXN0cm95aW5nIHRoZVxuICAgICAgICAgICAgLy8gY2FsbCwgYmVjYXVzZSBvdGhlcndpc2UgdGhlIGNhbGwncyBvbkRlc3Ryb3kgY2FsbGJhY2sgd291bGQgZmlyZVxuICAgICAgICAgICAgLy8gYW5kIGltbWVkaWF0ZWx5IHJlcG9wdWxhdGUgdGhlIG1hcFxuICAgICAgICAgICAgZm9yIChjb25zdCBbZXZlbnQsIGxpc3RlbmVyXSBvZiBsaXN0ZW5lck1hcCkgY2FsbC5vZmYoZXZlbnQsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgIGNhbGwuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2FsbExpc3RlbmVycy5jbGVhcigpO1xuICAgICAgICB0aGlzLmNhbGxzLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuYWN0aXZlQ2FsbHMgPSBuZXcgU2V0KCk7XG5cbiAgICAgICAgdGhpcy5tYXRyaXhDbGllbnQub2ZmKENsaWVudEV2ZW50LlJvb20sIHRoaXMub25Sb29tKTtcbiAgICAgICAgdGhpcy5tYXRyaXhDbGllbnQub2ZmKFJvb21TdGF0ZUV2ZW50LkV2ZW50cywgdGhpcy5vblJvb21TdGF0ZSk7XG4gICAgICAgIFdpZGdldFN0b3JlLmluc3RhbmNlLm9mZihVUERBVEVfRVZFTlQsIHRoaXMub25XaWRnZXRzKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9hY3RpdmVDYWxsczogU2V0PENhbGw+ID0gbmV3IFNldCgpO1xuICAgIC8qKlxuICAgICAqIFRoZSBjYWxscyB0byB3aGljaCB0aGUgdXNlciBpcyBjdXJyZW50bHkgY29ubmVjdGVkLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgYWN0aXZlQ2FsbHMoKTogU2V0PENhbGw+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZUNhbGxzO1xuICAgIH1cbiAgICBwcml2YXRlIHNldCBhY3RpdmVDYWxscyh2YWx1ZTogU2V0PENhbGw+KSB7XG4gICAgICAgIHRoaXMuX2FjdGl2ZUNhbGxzID0gdmFsdWU7XG4gICAgICAgIHRoaXMuZW1pdChDYWxsU3RvcmVFdmVudC5BY3RpdmVDYWxscywgdmFsdWUpO1xuXG4gICAgICAgIC8vIFRoZSByb29tIElEcyBhcmUgcGVyc2lzdGVkIHRvIHNldHRpbmdzIHNvIHdlIGNhbiBkZXRlY3QgdW5jbGVhbiBkaXNjb25uZWN0c1xuICAgICAgICBTZXR0aW5nc1N0b3JlLnNldFZhbHVlKFwiYWN0aXZlQ2FsbFJvb21JZHNcIiwgbnVsbCwgU2V0dGluZ0xldmVsLkRFVklDRSwgWy4uLnZhbHVlXS5tYXAoY2FsbCA9PiBjYWxsLnJvb21JZCkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY2FsbHMgPSBuZXcgTWFwPHN0cmluZywgQ2FsbD4oKTsgLy8gS2V5IGlzIHJvb20gSURcbiAgICBwcml2YXRlIGNhbGxMaXN0ZW5lcnMgPSBuZXcgTWFwPENhbGwsIE1hcDxDYWxsRXZlbnQsICguLi5hcmdzOiB1bmtub3duW10pID0+IHVua25vd24+PigpO1xuXG4gICAgcHJpdmF0ZSB1cGRhdGVSb29tKHJvb206IFJvb20pIHtcbiAgICAgICAgaWYgKCF0aGlzLmNhbGxzLmhhcyhyb29tLnJvb21JZCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbGwgPSBDYWxsLmdldChyb29tKTtcblxuICAgICAgICAgICAgaWYgKGNhbGwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBvbkNvbm5lY3Rpb25TdGF0ZSA9IChzdGF0ZTogQ29ubmVjdGlvblN0YXRlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZSA9PT0gQ29ubmVjdGlvblN0YXRlLkNvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVDYWxscyA9IG5ldyBTZXQoWy4uLnRoaXMuYWN0aXZlQ2FsbHMsIGNhbGxdKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PT0gQ29ubmVjdGlvblN0YXRlLkRpc2Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVDYWxscyA9IG5ldyBTZXQoWy4uLnRoaXMuYWN0aXZlQ2FsbHNdLmZpbHRlcihjID0+IGMgIT09IGNhbGwpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3Qgb25EZXN0cm95ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxzLmRlbGV0ZShyb29tLnJvb21JZCk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW2V2ZW50LCBsaXN0ZW5lcl0gb2YgdGhpcy5jYWxsTGlzdGVuZXJzLmdldChjYWxsKSEpIGNhbGwub2ZmKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUm9vbShyb29tKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgY2FsbC5vbihDYWxsRXZlbnQuQ29ubmVjdGlvblN0YXRlLCBvbkNvbm5lY3Rpb25TdGF0ZSk7XG4gICAgICAgICAgICAgICAgY2FsbC5vbihDYWxsRXZlbnQuRGVzdHJveSwgb25EZXN0cm95KTtcblxuICAgICAgICAgICAgICAgIHRoaXMuY2FsbHMuc2V0KHJvb20ucm9vbUlkLCBjYWxsKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGxMaXN0ZW5lcnMuc2V0KGNhbGwsIG5ldyBNYXA8Q2FsbEV2ZW50LCAoLi4uYXJnczogdW5rbm93bltdKSA9PiB1bmtub3duPihbXG4gICAgICAgICAgICAgICAgICAgIFtDYWxsRXZlbnQuQ29ubmVjdGlvblN0YXRlLCBvbkNvbm5lY3Rpb25TdGF0ZV0sXG4gICAgICAgICAgICAgICAgICAgIFtDYWxsRXZlbnQuRGVzdHJveSwgb25EZXN0cm95XSxcbiAgICAgICAgICAgICAgICBdKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZW1pdChDYWxsU3RvcmVFdmVudC5DYWxsLCBjYWxsLCByb29tLnJvb21JZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBjYWxsIGFzc29jaWF0ZWQgd2l0aCB0aGUgZ2l2ZW4gcm9vbSwgaWYgYW55LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSByb29tSWQgVGhlIHJvb20ncyBJRC5cbiAgICAgKiBAcmV0dXJucyB7Q2FsbCB8IG51bGx9IFRoZSBjYWxsLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQocm9vbUlkOiBzdHJpbmcpOiBDYWxsIHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGxzLmdldChyb29tSWQpID8/IG51bGw7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvblJvb20gPSAocm9vbTogUm9vbSkgPT4gdGhpcy51cGRhdGVSb29tKHJvb20pO1xuXG4gICAgcHJpdmF0ZSBvblJvb21TdGF0ZSA9IChldmVudDogTWF0cml4RXZlbnQsIHN0YXRlOiBSb29tU3RhdGUpID0+IHtcbiAgICAgICAgLy8gSWYgdGhlcmUncyBhbHJlYWR5IGEgY2FsbCBzdG9yZWQgZm9yIHRoaXMgcm9vbSwgaXQncyB1bmRlcnN0b29kIHRvXG4gICAgICAgIC8vIHN0aWxsIGJlIHZhbGlkIHVudGlsIGRlc3Ryb3llZFxuICAgICAgICBpZiAoIXRoaXMuY2FsbHMuaGFzKHN0YXRlLnJvb21JZCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHJvb20gPSB0aGlzLm1hdHJpeENsaWVudC5nZXRSb29tKHN0YXRlLnJvb21JZCk7XG4gICAgICAgICAgICAvLyBTdGF0ZSBldmVudHMgY2FuIGFycml2ZSBiZWZvcmUgdGhlIHJvb20gZG9lcywgd2hlbiBjcmVhdGluZyBhIHJvb21cbiAgICAgICAgICAgIGlmIChyb29tICE9PSBudWxsKSB0aGlzLnVwZGF0ZVJvb20ocm9vbSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBvbldpZGdldHMgPSAocm9vbUlkOiBzdHJpbmcgfCBudWxsKSA9PiB7XG4gICAgICAgIGlmIChyb29tSWQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgc3RvcmUgaGFwcGVuZWQgdG8gc3RhcnQgYmVmb3JlIHRoZSB3aWRnZXQgc3RvcmUgd2FzIGRvbmVcbiAgICAgICAgICAgIC8vIGxvYWRpbmcgYWxsIHJvb21zLCBzbyB3ZSBuZWVkIHRvIGluaXRpYWxpemUgZWFjaCByb29tIGFnYWluXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHJvb20gb2YgdGhpcy5tYXRyaXhDbGllbnQuZ2V0Um9vbXMoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUm9vbShyb29tKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHJvb20gPSB0aGlzLm1hdHJpeENsaWVudC5nZXRSb29tKHJvb21JZCk7XG4gICAgICAgICAgICAvLyBXaWRnZXQgdXBkYXRlcyBjYW4gYXJyaXZlIGJlZm9yZSB0aGUgcm9vbSBkb2VzLCBlbXBpcmljYWxseVxuICAgICAgICAgICAgaWYgKHJvb20gIT09IG51bGwpIHRoaXMudXBkYXRlUm9vbShyb29tKTtcbiAgICAgICAgfVxuICAgIH07XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBZ0JBOztBQUNBOztBQUNBOztBQUtBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQTlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7SUFrQllBLGM7OztXQUFBQSxjO0VBQUFBLGM7RUFBQUEsYztHQUFBQSxjLDhCQUFBQSxjOztBQU9MLE1BQU1DLFNBQU4sU0FBd0JDLDBDQUF4QixDQUFpRDtFQUUxQixXQUFS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