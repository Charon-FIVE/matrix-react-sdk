"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ThreadNotificationState = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _thread = require("matrix-js-sdk/src/models/thread");

var _NotificationColor = require("./NotificationColor");

var _MatrixClientPeg = require("../../MatrixClientPeg");

var _NotificationState = require("./NotificationState");

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class ThreadNotificationState extends _NotificationState.NotificationState {
  constructor(thread) {
    super();
    this.thread = thread;
    (0, _defineProperty2.default)(this, "_symbol", null);
    (0, _defineProperty2.default)(this, "_count", 0);
    (0, _defineProperty2.default)(this, "_color", _NotificationColor.NotificationColor.None);
    (0, _defineProperty2.default)(this, "handleNewThreadReply", (thread, event) => {
      const client = _MatrixClientPeg.MatrixClientPeg.get();

      const myUserId = client.getUserId();
      const isOwn = myUserId === event.getSender();
      const readReceipt = this.thread.room.getReadReceiptForUserId(myUserId);

      if (!isOwn && !readReceipt || readReceipt && event.getTs() >= readReceipt.data.ts) {
        const actions = client.getPushActionsForEvent(event, true);

        if (actions?.tweaks) {
          const color = !!actions.tweaks.highlight ? _NotificationColor.NotificationColor.Red : _NotificationColor.NotificationColor.Grey;
          this.updateNotificationState(color);
        }
      }
    });
    (0, _defineProperty2.default)(this, "resetThreadNotification", () => {
      this.updateNotificationState(_NotificationColor.NotificationColor.None);
    });
    this.thread.on(_thread.ThreadEvent.NewReply, this.handleNewThreadReply);
    this.thread.on(_thread.ThreadEvent.ViewThread, this.resetThreadNotification);

    if (this.thread.replyToEvent) {
      // Process the current tip event
      this.handleNewThreadReply(this.thread, this.thread.replyToEvent);
    }
  }

  destroy() {
    super.destroy();
    this.thread.off(_thread.ThreadEvent.NewReply, this.handleNewThreadReply);
    this.thread.off(_thread.ThreadEvent.ViewThread, this.resetThreadNotification);
  }

  updateNotificationState(color) {
    const snapshot = this.snapshot();
    this._color = color; // finally, publish an update if needed

    this.emitIfUpdated(snapshot);
  }

}

exports.ThreadNotificationState = ThreadNotificationState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUaHJlYWROb3RpZmljYXRpb25TdGF0ZSIsIk5vdGlmaWNhdGlvblN0YXRlIiwiY29uc3RydWN0b3IiLCJ0aHJlYWQiLCJOb3RpZmljYXRpb25Db2xvciIsIk5vbmUiLCJldmVudCIsImNsaWVudCIsIk1hdHJpeENsaWVudFBlZyIsImdldCIsIm15VXNlcklkIiwiZ2V0VXNlcklkIiwiaXNPd24iLCJnZXRTZW5kZXIiLCJyZWFkUmVjZWlwdCIsInJvb20iLCJnZXRSZWFkUmVjZWlwdEZvclVzZXJJZCIsImdldFRzIiwiZGF0YSIsInRzIiwiYWN0aW9ucyIsImdldFB1c2hBY3Rpb25zRm9yRXZlbnQiLCJ0d2Vha3MiLCJjb2xvciIsImhpZ2hsaWdodCIsIlJlZCIsIkdyZXkiLCJ1cGRhdGVOb3RpZmljYXRpb25TdGF0ZSIsIm9uIiwiVGhyZWFkRXZlbnQiLCJOZXdSZXBseSIsImhhbmRsZU5ld1RocmVhZFJlcGx5IiwiVmlld1RocmVhZCIsInJlc2V0VGhyZWFkTm90aWZpY2F0aW9uIiwicmVwbHlUb0V2ZW50IiwiZGVzdHJveSIsIm9mZiIsInNuYXBzaG90IiwiX2NvbG9yIiwiZW1pdElmVXBkYXRlZCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdG9yZXMvbm90aWZpY2F0aW9ucy9UaHJlYWROb3RpZmljYXRpb25TdGF0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMjEgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgeyBNYXRyaXhFdmVudCB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9tb2RlbHMvZXZlbnRcIjtcbmltcG9ydCB7IFRocmVhZCwgVGhyZWFkRXZlbnQgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbW9kZWxzL3RocmVhZFwiO1xuXG5pbXBvcnQgeyBOb3RpZmljYXRpb25Db2xvciB9IGZyb20gXCIuL05vdGlmaWNhdGlvbkNvbG9yXCI7XG5pbXBvcnQgeyBJRGVzdHJveWFibGUgfSBmcm9tIFwiLi4vLi4vdXRpbHMvSURlc3Ryb3lhYmxlXCI7XG5pbXBvcnQgeyBNYXRyaXhDbGllbnRQZWcgfSBmcm9tIFwiLi4vLi4vTWF0cml4Q2xpZW50UGVnXCI7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25TdGF0ZSB9IGZyb20gXCIuL05vdGlmaWNhdGlvblN0YXRlXCI7XG5cbmV4cG9ydCBjbGFzcyBUaHJlYWROb3RpZmljYXRpb25TdGF0ZSBleHRlbmRzIE5vdGlmaWNhdGlvblN0YXRlIGltcGxlbWVudHMgSURlc3Ryb3lhYmxlIHtcbiAgICBwcm90ZWN0ZWQgX3N5bWJvbCA9IG51bGw7XG4gICAgcHJvdGVjdGVkIF9jb3VudCA9IDA7XG4gICAgcHJvdGVjdGVkIF9jb2xvciA9IE5vdGlmaWNhdGlvbkNvbG9yLk5vbmU7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgdGhyZWFkOiBUaHJlYWQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy50aHJlYWQub24oVGhyZWFkRXZlbnQuTmV3UmVwbHksIHRoaXMuaGFuZGxlTmV3VGhyZWFkUmVwbHkpO1xuICAgICAgICB0aGlzLnRocmVhZC5vbihUaHJlYWRFdmVudC5WaWV3VGhyZWFkLCB0aGlzLnJlc2V0VGhyZWFkTm90aWZpY2F0aW9uKTtcbiAgICAgICAgaWYgKHRoaXMudGhyZWFkLnJlcGx5VG9FdmVudCkge1xuICAgICAgICAgICAgLy8gUHJvY2VzcyB0aGUgY3VycmVudCB0aXAgZXZlbnRcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlTmV3VGhyZWFkUmVwbHkodGhpcy50aHJlYWQsIHRoaXMudGhyZWFkLnJlcGx5VG9FdmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgc3VwZXIuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLnRocmVhZC5vZmYoVGhyZWFkRXZlbnQuTmV3UmVwbHksIHRoaXMuaGFuZGxlTmV3VGhyZWFkUmVwbHkpO1xuICAgICAgICB0aGlzLnRocmVhZC5vZmYoVGhyZWFkRXZlbnQuVmlld1RocmVhZCwgdGhpcy5yZXNldFRocmVhZE5vdGlmaWNhdGlvbik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVOZXdUaHJlYWRSZXBseSA9ICh0aHJlYWQ6IFRocmVhZCwgZXZlbnQ6IE1hdHJpeEV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGNsaWVudCA9IE1hdHJpeENsaWVudFBlZy5nZXQoKTtcblxuICAgICAgICBjb25zdCBteVVzZXJJZCA9IGNsaWVudC5nZXRVc2VySWQoKTtcblxuICAgICAgICBjb25zdCBpc093biA9IG15VXNlcklkID09PSBldmVudC5nZXRTZW5kZXIoKTtcbiAgICAgICAgY29uc3QgcmVhZFJlY2VpcHQgPSB0aGlzLnRocmVhZC5yb29tLmdldFJlYWRSZWNlaXB0Rm9yVXNlcklkKG15VXNlcklkKTtcblxuICAgICAgICBpZiAoIWlzT3duICYmICFyZWFkUmVjZWlwdCB8fCAocmVhZFJlY2VpcHQgJiYgZXZlbnQuZ2V0VHMoKSA+PSByZWFkUmVjZWlwdC5kYXRhLnRzKSkge1xuICAgICAgICAgICAgY29uc3QgYWN0aW9ucyA9IGNsaWVudC5nZXRQdXNoQWN0aW9uc0ZvckV2ZW50KGV2ZW50LCB0cnVlKTtcblxuICAgICAgICAgICAgaWYgKGFjdGlvbnM/LnR3ZWFrcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gISFhY3Rpb25zLnR3ZWFrcy5oaWdobGlnaHRcbiAgICAgICAgICAgICAgICAgICAgPyBOb3RpZmljYXRpb25Db2xvci5SZWRcbiAgICAgICAgICAgICAgICAgICAgOiBOb3RpZmljYXRpb25Db2xvci5HcmV5O1xuXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVOb3RpZmljYXRpb25TdGF0ZShjb2xvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHJpdmF0ZSByZXNldFRocmVhZE5vdGlmaWNhdGlvbiA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy51cGRhdGVOb3RpZmljYXRpb25TdGF0ZShOb3RpZmljYXRpb25Db2xvci5Ob25lKTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSB1cGRhdGVOb3RpZmljYXRpb25TdGF0ZShjb2xvcjogTm90aWZpY2F0aW9uQ29sb3IpIHtcbiAgICAgICAgY29uc3Qgc25hcHNob3QgPSB0aGlzLnNuYXBzaG90KCk7XG5cbiAgICAgICAgdGhpcy5fY29sb3IgPSBjb2xvcjtcblxuICAgICAgICAvLyBmaW5hbGx5LCBwdWJsaXNoIGFuIHVwZGF0ZSBpZiBuZWVkZWRcbiAgICAgICAgdGhpcy5lbWl0SWZVcGRhdGVkKHNuYXBzaG90KTtcbiAgICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBaUJBOztBQUVB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