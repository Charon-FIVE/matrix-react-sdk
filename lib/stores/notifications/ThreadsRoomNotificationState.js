"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ThreadsRoomNotificationState = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _thread = require("matrix-js-sdk/src/models/thread");

var _NotificationState = require("./NotificationState");

var _ThreadNotificationState = require("./ThreadNotificationState");

var _NotificationColor = require("./NotificationColor");

/*
Copyright 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class ThreadsRoomNotificationState extends _NotificationState.NotificationState {
  constructor(room) {
    super();
    this.room = room;
    (0, _defineProperty2.default)(this, "threadsState", new Map());
    (0, _defineProperty2.default)(this, "_symbol", null);
    (0, _defineProperty2.default)(this, "_count", 0);
    (0, _defineProperty2.default)(this, "_color", _NotificationColor.NotificationColor.None);
    (0, _defineProperty2.default)(this, "onNewThread", thread => {
      const notificationState = new _ThreadNotificationState.ThreadNotificationState(thread);
      this.threadsState.set(thread, notificationState);
      notificationState.on(_NotificationState.NotificationStateEvents.Update, this.onThreadUpdate);
    });
    (0, _defineProperty2.default)(this, "onThreadUpdate", () => {
      let color = _NotificationColor.NotificationColor.None;

      for (const [, notificationState] of this.threadsState) {
        if (notificationState.color === _NotificationColor.NotificationColor.Red) {
          color = _NotificationColor.NotificationColor.Red;
          break;
        } else if (notificationState.color === _NotificationColor.NotificationColor.Grey) {
          color = _NotificationColor.NotificationColor.Grey;
        }
      }

      this.updateNotificationState(color);
    });

    for (const thread of this.room.getThreads()) {
      this.onNewThread(thread);
    }

    this.room.on(_thread.ThreadEvent.New, this.onNewThread);
  }

  destroy() {
    super.destroy();
    this.room.off(_thread.ThreadEvent.New, this.onNewThread);

    for (const [, notificationState] of this.threadsState) {
      notificationState.off(_NotificationState.NotificationStateEvents.Update, this.onThreadUpdate);
    }
  }

  getThreadRoomState(thread) {
    if (!this.threadsState.has(thread)) {
      this.threadsState.set(thread, new _ThreadNotificationState.ThreadNotificationState(thread));
    }

    return this.threadsState.get(thread);
  }

  updateNotificationState(color) {
    const snapshot = this.snapshot();
    this._color = color; // finally, publish an update if needed

    this.emitIfUpdated(snapshot);
  }

}

exports.ThreadsRoomNotificationState = ThreadsRoomNotificationState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUaHJlYWRzUm9vbU5vdGlmaWNhdGlvblN0YXRlIiwiTm90aWZpY2F0aW9uU3RhdGUiLCJjb25zdHJ1Y3RvciIsInJvb20iLCJNYXAiLCJOb3RpZmljYXRpb25Db2xvciIsIk5vbmUiLCJ0aHJlYWQiLCJub3RpZmljYXRpb25TdGF0ZSIsIlRocmVhZE5vdGlmaWNhdGlvblN0YXRlIiwidGhyZWFkc1N0YXRlIiwic2V0Iiwib24iLCJOb3RpZmljYXRpb25TdGF0ZUV2ZW50cyIsIlVwZGF0ZSIsIm9uVGhyZWFkVXBkYXRlIiwiY29sb3IiLCJSZWQiLCJHcmV5IiwidXBkYXRlTm90aWZpY2F0aW9uU3RhdGUiLCJnZXRUaHJlYWRzIiwib25OZXdUaHJlYWQiLCJUaHJlYWRFdmVudCIsIk5ldyIsImRlc3Ryb3kiLCJvZmYiLCJnZXRUaHJlYWRSb29tU3RhdGUiLCJoYXMiLCJnZXQiLCJzbmFwc2hvdCIsIl9jb2xvciIsImVtaXRJZlVwZGF0ZWQiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RvcmVzL25vdGlmaWNhdGlvbnMvVGhyZWFkc1Jvb21Ob3RpZmljYXRpb25TdGF0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMjEgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgeyBSb29tIH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL21vZGVscy9yb29tXCI7XG5pbXBvcnQgeyBUaHJlYWQsIFRocmVhZEV2ZW50IH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL21vZGVscy90aHJlYWRcIjtcblxuaW1wb3J0IHsgSURlc3Ryb3lhYmxlIH0gZnJvbSBcIi4uLy4uL3V0aWxzL0lEZXN0cm95YWJsZVwiO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uU3RhdGUsIE5vdGlmaWNhdGlvblN0YXRlRXZlbnRzIH0gZnJvbSBcIi4vTm90aWZpY2F0aW9uU3RhdGVcIjtcbmltcG9ydCB7IFRocmVhZE5vdGlmaWNhdGlvblN0YXRlIH0gZnJvbSBcIi4vVGhyZWFkTm90aWZpY2F0aW9uU3RhdGVcIjtcbmltcG9ydCB7IE5vdGlmaWNhdGlvbkNvbG9yIH0gZnJvbSBcIi4vTm90aWZpY2F0aW9uQ29sb3JcIjtcblxuZXhwb3J0IGNsYXNzIFRocmVhZHNSb29tTm90aWZpY2F0aW9uU3RhdGUgZXh0ZW5kcyBOb3RpZmljYXRpb25TdGF0ZSBpbXBsZW1lbnRzIElEZXN0cm95YWJsZSB7XG4gICAgcHVibGljIHJlYWRvbmx5IHRocmVhZHNTdGF0ZSA9IG5ldyBNYXA8VGhyZWFkLCBUaHJlYWROb3RpZmljYXRpb25TdGF0ZT4oKTtcblxuICAgIHByb3RlY3RlZCBfc3ltYm9sID0gbnVsbDtcbiAgICBwcm90ZWN0ZWQgX2NvdW50ID0gMDtcbiAgICBwcm90ZWN0ZWQgX2NvbG9yID0gTm90aWZpY2F0aW9uQ29sb3IuTm9uZTtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSByb29tOiBSb29tKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGZvciAoY29uc3QgdGhyZWFkIG9mIHRoaXMucm9vbS5nZXRUaHJlYWRzKCkpIHtcbiAgICAgICAgICAgIHRoaXMub25OZXdUaHJlYWQodGhyZWFkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJvb20ub24oVGhyZWFkRXZlbnQuTmV3LCB0aGlzLm9uTmV3VGhyZWFkKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgc3VwZXIuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLnJvb20ub2ZmKFRocmVhZEV2ZW50Lk5ldywgdGhpcy5vbk5ld1RocmVhZCk7XG4gICAgICAgIGZvciAoY29uc3QgWywgbm90aWZpY2F0aW9uU3RhdGVdIG9mIHRoaXMudGhyZWFkc1N0YXRlKSB7XG4gICAgICAgICAgICBub3RpZmljYXRpb25TdGF0ZS5vZmYoTm90aWZpY2F0aW9uU3RhdGVFdmVudHMuVXBkYXRlLCB0aGlzLm9uVGhyZWFkVXBkYXRlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXRUaHJlYWRSb29tU3RhdGUodGhyZWFkOiBUaHJlYWQpOiBUaHJlYWROb3RpZmljYXRpb25TdGF0ZSB7XG4gICAgICAgIGlmICghdGhpcy50aHJlYWRzU3RhdGUuaGFzKHRocmVhZCkpIHtcbiAgICAgICAgICAgIHRoaXMudGhyZWFkc1N0YXRlLnNldCh0aHJlYWQsIG5ldyBUaHJlYWROb3RpZmljYXRpb25TdGF0ZSh0aHJlYWQpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy50aHJlYWRzU3RhdGUuZ2V0KHRocmVhZCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbk5ld1RocmVhZCA9ICh0aHJlYWQ6IFRocmVhZCk6IHZvaWQgPT4ge1xuICAgICAgICBjb25zdCBub3RpZmljYXRpb25TdGF0ZSA9IG5ldyBUaHJlYWROb3RpZmljYXRpb25TdGF0ZSh0aHJlYWQpO1xuICAgICAgICB0aGlzLnRocmVhZHNTdGF0ZS5zZXQoXG4gICAgICAgICAgICB0aHJlYWQsXG4gICAgICAgICAgICBub3RpZmljYXRpb25TdGF0ZSxcbiAgICAgICAgKTtcbiAgICAgICAgbm90aWZpY2F0aW9uU3RhdGUub24oTm90aWZpY2F0aW9uU3RhdGVFdmVudHMuVXBkYXRlLCB0aGlzLm9uVGhyZWFkVXBkYXRlKTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBvblRocmVhZFVwZGF0ZSA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgbGV0IGNvbG9yID0gTm90aWZpY2F0aW9uQ29sb3IuTm9uZTtcbiAgICAgICAgZm9yIChjb25zdCBbLCBub3RpZmljYXRpb25TdGF0ZV0gb2YgdGhpcy50aHJlYWRzU3RhdGUpIHtcbiAgICAgICAgICAgIGlmIChub3RpZmljYXRpb25TdGF0ZS5jb2xvciA9PT0gTm90aWZpY2F0aW9uQ29sb3IuUmVkKSB7XG4gICAgICAgICAgICAgICAgY29sb3IgPSBOb3RpZmljYXRpb25Db2xvci5SZWQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5vdGlmaWNhdGlvblN0YXRlLmNvbG9yID09PSBOb3RpZmljYXRpb25Db2xvci5HcmV5KSB7XG4gICAgICAgICAgICAgICAgY29sb3IgPSBOb3RpZmljYXRpb25Db2xvci5HcmV5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlTm90aWZpY2F0aW9uU3RhdGUoY29sb3IpO1xuICAgIH07XG5cbiAgICBwcml2YXRlIHVwZGF0ZU5vdGlmaWNhdGlvblN0YXRlKGNvbG9yOiBOb3RpZmljYXRpb25Db2xvcik6IHZvaWQge1xuICAgICAgICBjb25zdCBzbmFwc2hvdCA9IHRoaXMuc25hcHNob3QoKTtcbiAgICAgICAgdGhpcy5fY29sb3IgPSBjb2xvcjtcbiAgICAgICAgLy8gZmluYWxseSwgcHVibGlzaCBhbiB1cGRhdGUgaWYgbmVlZGVkXG4gICAgICAgIHRoaXMuZW1pdElmVXBkYXRlZChzbmFwc2hvdCk7XG4gICAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWlCQTs7QUFHQTs7QUFDQTs7QUFDQTs7QUF0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBVU8sTUFBTUEsNEJBQU4sU0FBMkNDLG9DQUEzQyxDQUFxRjtFQU94RkMsV0FBVyxDQUFpQkMsSUFBakIsRUFBNkI7SUFDcEM7SUFEb0MsS0FBWkEsSUFBWSxHQUFaQSxJQUFZO0lBQUEsb0RBTlQsSUFBSUMsR0FBSixFQU1TO0lBQUEsK0NBSnBCLElBSW9CO0lBQUEsOENBSHJCLENBR3FCO0lBQUEsOENBRnJCQyxvQ0FBQSxDQUFrQkMsSUFFRztJQUFBLG1EQXVCakJDLE1BQUQsSUFBMEI7TUFDNUMsTUFBTUMsaUJBQWlCLEdBQUcsSUFBSUMsZ0RBQUosQ0FBNEJGLE1BQTVCLENBQTFCO01BQ0EsS0FBS0csWUFBTCxDQUFrQkMsR0FBbEIsQ0FDSUosTUFESixFQUVJQyxpQkFGSjtNQUlBQSxpQkFBaUIsQ0FBQ0ksRUFBbEIsQ0FBcUJDLDBDQUFBLENBQXdCQyxNQUE3QyxFQUFxRCxLQUFLQyxjQUExRDtJQUNILENBOUJ1QztJQUFBLHNEQWdDZixNQUFZO01BQ2pDLElBQUlDLEtBQUssR0FBR1gsb0NBQUEsQ0FBa0JDLElBQTlCOztNQUNBLEtBQUssTUFBTSxHQUFHRSxpQkFBSCxDQUFYLElBQW9DLEtBQUtFLFlBQXpDLEVBQXVEO1FBQ25ELElBQUlGLGlCQUFpQixDQUFDUSxLQUFsQixLQUE0Qlgsb0NBQUEsQ0FBa0JZLEdBQWxELEVBQXVEO1VBQ25ERCxLQUFLLEdBQUdYLG9DQUFBLENBQWtCWSxHQUExQjtVQUNBO1FBQ0gsQ0FIRCxNQUdPLElBQUlULGlCQUFpQixDQUFDUSxLQUFsQixLQUE0Qlgsb0NBQUEsQ0FBa0JhLElBQWxELEVBQXdEO1VBQzNERixLQUFLLEdBQUdYLG9DQUFBLENBQWtCYSxJQUExQjtRQUNIO01BQ0o7O01BQ0QsS0FBS0MsdUJBQUwsQ0FBNkJILEtBQTdCO0lBQ0gsQ0EzQ3VDOztJQUVwQyxLQUFLLE1BQU1ULE1BQVgsSUFBcUIsS0FBS0osSUFBTCxDQUFVaUIsVUFBVixFQUFyQixFQUE2QztNQUN6QyxLQUFLQyxXQUFMLENBQWlCZCxNQUFqQjtJQUNIOztJQUNELEtBQUtKLElBQUwsQ0FBVVMsRUFBVixDQUFhVSxtQkFBQSxDQUFZQyxHQUF6QixFQUE4QixLQUFLRixXQUFuQztFQUNIOztFQUVNRyxPQUFPLEdBQVM7SUFDbkIsTUFBTUEsT0FBTjtJQUNBLEtBQUtyQixJQUFMLENBQVVzQixHQUFWLENBQWNILG1CQUFBLENBQVlDLEdBQTFCLEVBQStCLEtBQUtGLFdBQXBDOztJQUNBLEtBQUssTUFBTSxHQUFHYixpQkFBSCxDQUFYLElBQW9DLEtBQUtFLFlBQXpDLEVBQXVEO01BQ25ERixpQkFBaUIsQ0FBQ2lCLEdBQWxCLENBQXNCWiwwQ0FBQSxDQUF3QkMsTUFBOUMsRUFBc0QsS0FBS0MsY0FBM0Q7SUFDSDtFQUNKOztFQUVNVyxrQkFBa0IsQ0FBQ25CLE1BQUQsRUFBMEM7SUFDL0QsSUFBSSxDQUFDLEtBQUtHLFlBQUwsQ0FBa0JpQixHQUFsQixDQUFzQnBCLE1BQXRCLENBQUwsRUFBb0M7TUFDaEMsS0FBS0csWUFBTCxDQUFrQkMsR0FBbEIsQ0FBc0JKLE1BQXRCLEVBQThCLElBQUlFLGdEQUFKLENBQTRCRixNQUE1QixDQUE5QjtJQUNIOztJQUNELE9BQU8sS0FBS0csWUFBTCxDQUFrQmtCLEdBQWxCLENBQXNCckIsTUFBdEIsQ0FBUDtFQUNIOztFQXdCT1ksdUJBQXVCLENBQUNILEtBQUQsRUFBaUM7SUFDNUQsTUFBTWEsUUFBUSxHQUFHLEtBQUtBLFFBQUwsRUFBakI7SUFDQSxLQUFLQyxNQUFMLEdBQWNkLEtBQWQsQ0FGNEQsQ0FHNUQ7O0lBQ0EsS0FBS2UsYUFBTCxDQUFtQkYsUUFBbkI7RUFDSDs7QUF6RHVGIn0=