"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NotificationStateSnapshot = exports.NotificationStateEvents = exports.NotificationState = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _typedEventEmitter = require("matrix-js-sdk/src/models/typed-event-emitter");

var _NotificationColor = require("./NotificationColor");

/*
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
let NotificationStateEvents;
exports.NotificationStateEvents = NotificationStateEvents;

(function (NotificationStateEvents) {
  NotificationStateEvents["Update"] = "update";
})(NotificationStateEvents || (exports.NotificationStateEvents = NotificationStateEvents = {}));

class NotificationState extends _typedEventEmitter.TypedEventEmitter {
  constructor() {
    super(...arguments);
    (0, _defineProperty2.default)(this, "_symbol", void 0);
    (0, _defineProperty2.default)(this, "_count", void 0);
    (0, _defineProperty2.default)(this, "_color", void 0);
  }

  get symbol() {
    return this._symbol;
  }

  get count() {
    return this._count;
  }

  get color() {
    return this._color;
  }

  get isIdle() {
    return this.color <= _NotificationColor.NotificationColor.None;
  }

  get isUnread() {
    return this.color >= _NotificationColor.NotificationColor.Bold;
  }

  get hasUnreadCount() {
    return this.color >= _NotificationColor.NotificationColor.Grey && (!!this.count || !!this.symbol);
  }

  get hasMentions() {
    return this.color >= _NotificationColor.NotificationColor.Red;
  }

  emitIfUpdated(snapshot) {
    if (snapshot.isDifferentFrom(this)) {
      this.emit(NotificationStateEvents.Update);
    }
  }

  snapshot() {
    return new NotificationStateSnapshot(this);
  }

  destroy() {
    this.removeAllListeners(NotificationStateEvents.Update);
  }

}

exports.NotificationState = NotificationState;

class NotificationStateSnapshot {
  constructor(state) {
    (0, _defineProperty2.default)(this, "symbol", void 0);
    (0, _defineProperty2.default)(this, "count", void 0);
    (0, _defineProperty2.default)(this, "color", void 0);
    this.symbol = state.symbol;
    this.count = state.count;
    this.color = state.color;
  }

  isDifferentFrom(other) {
    const before = {
      count: this.count,
      symbol: this.symbol,
      color: this.color
    };
    const after = {
      count: other.count,
      symbol: other.symbol,
      color: other.color
    };
    return JSON.stringify(before) !== JSON.stringify(after);
  }

}

exports.NotificationStateSnapshot = NotificationStateSnapshot;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb3RpZmljYXRpb25TdGF0ZUV2ZW50cyIsIk5vdGlmaWNhdGlvblN0YXRlIiwiVHlwZWRFdmVudEVtaXR0ZXIiLCJzeW1ib2wiLCJfc3ltYm9sIiwiY291bnQiLCJfY291bnQiLCJjb2xvciIsIl9jb2xvciIsImlzSWRsZSIsIk5vdGlmaWNhdGlvbkNvbG9yIiwiTm9uZSIsImlzVW5yZWFkIiwiQm9sZCIsImhhc1VucmVhZENvdW50IiwiR3JleSIsImhhc01lbnRpb25zIiwiUmVkIiwiZW1pdElmVXBkYXRlZCIsInNuYXBzaG90IiwiaXNEaWZmZXJlbnRGcm9tIiwiZW1pdCIsIlVwZGF0ZSIsIk5vdGlmaWNhdGlvblN0YXRlU25hcHNob3QiLCJkZXN0cm95IiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiY29uc3RydWN0b3IiLCJzdGF0ZSIsIm90aGVyIiwiYmVmb3JlIiwiYWZ0ZXIiLCJKU09OIiwic3RyaW5naWZ5Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3N0b3Jlcy9ub3RpZmljYXRpb25zL05vdGlmaWNhdGlvblN0YXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMCBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCB7IFR5cGVkRXZlbnRFbWl0dGVyIH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL21vZGVscy90eXBlZC1ldmVudC1lbWl0dGVyXCI7XG5cbmltcG9ydCB7IE5vdGlmaWNhdGlvbkNvbG9yIH0gZnJvbSBcIi4vTm90aWZpY2F0aW9uQ29sb3JcIjtcbmltcG9ydCB7IElEZXN0cm95YWJsZSB9IGZyb20gXCIuLi8uLi91dGlscy9JRGVzdHJveWFibGVcIjtcblxuZXhwb3J0IGludGVyZmFjZSBJTm90aWZpY2F0aW9uU3RhdGVTbmFwc2hvdFBhcmFtcyB7XG4gICAgc3ltYm9sOiBzdHJpbmcgfCBudWxsO1xuICAgIGNvdW50OiBudW1iZXI7XG4gICAgY29sb3I6IE5vdGlmaWNhdGlvbkNvbG9yO1xufVxuXG5leHBvcnQgZW51bSBOb3RpZmljYXRpb25TdGF0ZUV2ZW50cyB7XG4gICAgVXBkYXRlID0gXCJ1cGRhdGVcIixcbn1cblxudHlwZSBFdmVudEhhbmRsZXJNYXAgPSB7XG4gICAgW05vdGlmaWNhdGlvblN0YXRlRXZlbnRzLlVwZGF0ZV06ICgpID0+IHZvaWQ7XG59O1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTm90aWZpY2F0aW9uU3RhdGVcbiAgICBleHRlbmRzIFR5cGVkRXZlbnRFbWl0dGVyPE5vdGlmaWNhdGlvblN0YXRlRXZlbnRzLCBFdmVudEhhbmRsZXJNYXA+XG4gICAgaW1wbGVtZW50cyBJTm90aWZpY2F0aW9uU3RhdGVTbmFwc2hvdFBhcmFtcywgSURlc3Ryb3lhYmxlIHtcbiAgICAvL1xuICAgIHByb3RlY3RlZCBfc3ltYm9sOiBzdHJpbmcgfCBudWxsO1xuICAgIHByb3RlY3RlZCBfY291bnQ6IG51bWJlcjtcbiAgICBwcm90ZWN0ZWQgX2NvbG9yOiBOb3RpZmljYXRpb25Db2xvcjtcblxuICAgIHB1YmxpYyBnZXQgc3ltYm9sKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zeW1ib2w7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBjb3VudCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fY291bnQ7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBjb2xvcigpOiBOb3RpZmljYXRpb25Db2xvciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb2xvcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGlzSWRsZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sb3IgPD0gTm90aWZpY2F0aW9uQ29sb3IuTm9uZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGlzVW5yZWFkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2xvciA+PSBOb3RpZmljYXRpb25Db2xvci5Cb2xkO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgaGFzVW5yZWFkQ291bnQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbG9yID49IE5vdGlmaWNhdGlvbkNvbG9yLkdyZXkgJiYgKCEhdGhpcy5jb3VudCB8fCAhIXRoaXMuc3ltYm9sKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGhhc01lbnRpb25zKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2xvciA+PSBOb3RpZmljYXRpb25Db2xvci5SZWQ7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGVtaXRJZlVwZGF0ZWQoc25hcHNob3Q6IE5vdGlmaWNhdGlvblN0YXRlU25hcHNob3QpIHtcbiAgICAgICAgaWYgKHNuYXBzaG90LmlzRGlmZmVyZW50RnJvbSh0aGlzKSkge1xuICAgICAgICAgICAgdGhpcy5lbWl0KE5vdGlmaWNhdGlvblN0YXRlRXZlbnRzLlVwZGF0ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgc25hcHNob3QoKTogTm90aWZpY2F0aW9uU3RhdGVTbmFwc2hvdCB7XG4gICAgICAgIHJldHVybiBuZXcgTm90aWZpY2F0aW9uU3RhdGVTbmFwc2hvdCh0aGlzKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoTm90aWZpY2F0aW9uU3RhdGVFdmVudHMuVXBkYXRlKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBOb3RpZmljYXRpb25TdGF0ZVNuYXBzaG90IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHN5bWJvbDogc3RyaW5nO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgY291bnQ6IG51bWJlcjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNvbG9yOiBOb3RpZmljYXRpb25Db2xvcjtcblxuICAgIGNvbnN0cnVjdG9yKHN0YXRlOiBJTm90aWZpY2F0aW9uU3RhdGVTbmFwc2hvdFBhcmFtcykge1xuICAgICAgICB0aGlzLnN5bWJvbCA9IHN0YXRlLnN5bWJvbDtcbiAgICAgICAgdGhpcy5jb3VudCA9IHN0YXRlLmNvdW50O1xuICAgICAgICB0aGlzLmNvbG9yID0gc3RhdGUuY29sb3I7XG4gICAgfVxuXG4gICAgcHVibGljIGlzRGlmZmVyZW50RnJvbShvdGhlcjogSU5vdGlmaWNhdGlvblN0YXRlU25hcHNob3RQYXJhbXMpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgYmVmb3JlID0geyBjb3VudDogdGhpcy5jb3VudCwgc3ltYm9sOiB0aGlzLnN5bWJvbCwgY29sb3I6IHRoaXMuY29sb3IgfTtcbiAgICAgICAgY29uc3QgYWZ0ZXIgPSB7IGNvdW50OiBvdGhlci5jb3VudCwgc3ltYm9sOiBvdGhlci5zeW1ib2wsIGNvbG9yOiBvdGhlci5jb2xvciB9O1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYmVmb3JlKSAhPT0gSlNPTi5zdHJpbmdpZnkoYWZ0ZXIpO1xuICAgIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFnQkE7O0FBRUE7O0FBbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtJQWFZQSx1Qjs7O1dBQUFBLHVCO0VBQUFBLHVCO0dBQUFBLHVCLHVDQUFBQSx1Qjs7QUFRTCxNQUFlQyxpQkFBZixTQUNLQyxvQ0FETCxDQUV1RDtFQUFBO0lBQUE7SUFBQTtJQUFBO0lBQUE7RUFBQTs7RUFNekMsSUFBTkMsTUFBTSxHQUFXO0lBQ3hCLE9BQU8sS0FBS0MsT0FBWjtFQUNIOztFQUVlLElBQUxDLEtBQUssR0FBVztJQUN2QixPQUFPLEtBQUtDLE1BQVo7RUFDSDs7RUFFZSxJQUFMQyxLQUFLLEdBQXNCO0lBQ2xDLE9BQU8sS0FBS0MsTUFBWjtFQUNIOztFQUVnQixJQUFOQyxNQUFNLEdBQVk7SUFDekIsT0FBTyxLQUFLRixLQUFMLElBQWNHLG9DQUFBLENBQWtCQyxJQUF2QztFQUNIOztFQUVrQixJQUFSQyxRQUFRLEdBQVk7SUFDM0IsT0FBTyxLQUFLTCxLQUFMLElBQWNHLG9DQUFBLENBQWtCRyxJQUF2QztFQUNIOztFQUV3QixJQUFkQyxjQUFjLEdBQVk7SUFDakMsT0FBTyxLQUFLUCxLQUFMLElBQWNHLG9DQUFBLENBQWtCSyxJQUFoQyxLQUF5QyxDQUFDLENBQUMsS0FBS1YsS0FBUCxJQUFnQixDQUFDLENBQUMsS0FBS0YsTUFBaEUsQ0FBUDtFQUNIOztFQUVxQixJQUFYYSxXQUFXLEdBQVk7SUFDOUIsT0FBTyxLQUFLVCxLQUFMLElBQWNHLG9DQUFBLENBQWtCTyxHQUF2QztFQUNIOztFQUVTQyxhQUFhLENBQUNDLFFBQUQsRUFBc0M7SUFDekQsSUFBSUEsUUFBUSxDQUFDQyxlQUFULENBQXlCLElBQXpCLENBQUosRUFBb0M7TUFDaEMsS0FBS0MsSUFBTCxDQUFVckIsdUJBQXVCLENBQUNzQixNQUFsQztJQUNIO0VBQ0o7O0VBRVNILFFBQVEsR0FBOEI7SUFDNUMsT0FBTyxJQUFJSSx5QkFBSixDQUE4QixJQUE5QixDQUFQO0VBQ0g7O0VBRU1DLE9BQU8sR0FBUztJQUNuQixLQUFLQyxrQkFBTCxDQUF3QnpCLHVCQUF1QixDQUFDc0IsTUFBaEQ7RUFDSDs7QUE5Q3lEOzs7O0FBaUR2RCxNQUFNQyx5QkFBTixDQUFnQztFQUtuQ0csV0FBVyxDQUFDQyxLQUFELEVBQTBDO0lBQUE7SUFBQTtJQUFBO0lBQ2pELEtBQUt4QixNQUFMLEdBQWN3QixLQUFLLENBQUN4QixNQUFwQjtJQUNBLEtBQUtFLEtBQUwsR0FBYXNCLEtBQUssQ0FBQ3RCLEtBQW5CO0lBQ0EsS0FBS0UsS0FBTCxHQUFhb0IsS0FBSyxDQUFDcEIsS0FBbkI7RUFDSDs7RUFFTWEsZUFBZSxDQUFDUSxLQUFELEVBQW1EO0lBQ3JFLE1BQU1DLE1BQU0sR0FBRztNQUFFeEIsS0FBSyxFQUFFLEtBQUtBLEtBQWQ7TUFBcUJGLE1BQU0sRUFBRSxLQUFLQSxNQUFsQztNQUEwQ0ksS0FBSyxFQUFFLEtBQUtBO0lBQXRELENBQWY7SUFDQSxNQUFNdUIsS0FBSyxHQUFHO01BQUV6QixLQUFLLEVBQUV1QixLQUFLLENBQUN2QixLQUFmO01BQXNCRixNQUFNLEVBQUV5QixLQUFLLENBQUN6QixNQUFwQztNQUE0Q0ksS0FBSyxFQUFFcUIsS0FBSyxDQUFDckI7SUFBekQsQ0FBZDtJQUNBLE9BQU93QixJQUFJLENBQUNDLFNBQUwsQ0FBZUgsTUFBZixNQUEyQkUsSUFBSSxDQUFDQyxTQUFMLENBQWVGLEtBQWYsQ0FBbEM7RUFDSDs7QUFma0MifQ==