"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ListLayout = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

/*
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const TILE_HEIGHT_PX = 44;

class ListLayout {
  constructor(tagId) {
    this.tagId = tagId;
    (0, _defineProperty2.default)(this, "_n", 0);
    (0, _defineProperty2.default)(this, "_previews", false);
    (0, _defineProperty2.default)(this, "_collapsed", false);
    const serialized = localStorage.getItem(this.key);

    if (serialized) {
      // We don't use the setters as they cause writes.
      const parsed = JSON.parse(serialized);
      this._n = parsed.numTiles;
      this._previews = parsed.showPreviews;
      this._collapsed = parsed.collapsed;
    }
  }

  get isCollapsed() {
    return this._collapsed;
  }

  set isCollapsed(v) {
    this._collapsed = v;
    this.save();
  }

  get showPreviews() {
    return this._previews;
  }

  set showPreviews(v) {
    this._previews = v;
    this.save();
  }

  get tileHeight() {
    return TILE_HEIGHT_PX;
  }

  get key() {
    return `mx_sublist_layout_${this.tagId}_boxed`;
  }

  get visibleTiles() {
    if (this._n === 0) return this.defaultVisibleTiles;
    return Math.max(this._n, this.minVisibleTiles);
  }

  set visibleTiles(v) {
    this._n = v;
    this.save();
  }

  get minVisibleTiles() {
    return 1;
  }

  get defaultVisibleTiles() {
    // This number is what "feels right", and mostly subject to design's opinion.
    return 8;
  }

  tilesWithPadding(n, paddingPx) {
    return this.pixelsToTiles(this.tilesToPixelsWithPadding(n, paddingPx));
  }

  tilesToPixelsWithPadding(n, paddingPx) {
    return this.tilesToPixels(n) + paddingPx;
  }

  tilesToPixels(n) {
    return n * this.tileHeight;
  }

  pixelsToTiles(px) {
    return px / this.tileHeight;
  }

  reset() {
    localStorage.removeItem(this.key);
  }

  save() {
    localStorage.setItem(this.key, JSON.stringify(this.serialize()));
  }

  serialize() {
    return {
      numTiles: this.visibleTiles,
      showPreviews: this.showPreviews,
      collapsed: this.isCollapsed
    };
  }

}

exports.ListLayout = ListLayout;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUSUxFX0hFSUdIVF9QWCIsIkxpc3RMYXlvdXQiLCJjb25zdHJ1Y3RvciIsInRhZ0lkIiwic2VyaWFsaXplZCIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJrZXkiLCJwYXJzZWQiLCJKU09OIiwicGFyc2UiLCJfbiIsIm51bVRpbGVzIiwiX3ByZXZpZXdzIiwic2hvd1ByZXZpZXdzIiwiX2NvbGxhcHNlZCIsImNvbGxhcHNlZCIsImlzQ29sbGFwc2VkIiwidiIsInNhdmUiLCJ0aWxlSGVpZ2h0IiwidmlzaWJsZVRpbGVzIiwiZGVmYXVsdFZpc2libGVUaWxlcyIsIk1hdGgiLCJtYXgiLCJtaW5WaXNpYmxlVGlsZXMiLCJ0aWxlc1dpdGhQYWRkaW5nIiwibiIsInBhZGRpbmdQeCIsInBpeGVsc1RvVGlsZXMiLCJ0aWxlc1RvUGl4ZWxzV2l0aFBhZGRpbmciLCJ0aWxlc1RvUGl4ZWxzIiwicHgiLCJyZXNldCIsInJlbW92ZUl0ZW0iLCJzZXRJdGVtIiwic3RyaW5naWZ5Iiwic2VyaWFsaXplIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3N0b3Jlcy9yb29tLWxpc3QvTGlzdExheW91dC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMjAgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgeyBUYWdJRCB9IGZyb20gXCIuL21vZGVsc1wiO1xuXG5jb25zdCBUSUxFX0hFSUdIVF9QWCA9IDQ0O1xuXG5pbnRlcmZhY2UgSVNlcmlhbGl6ZWRMaXN0TGF5b3V0IHtcbiAgICBudW1UaWxlczogbnVtYmVyO1xuICAgIHNob3dQcmV2aWV3czogYm9vbGVhbjtcbiAgICBjb2xsYXBzZWQ6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjbGFzcyBMaXN0TGF5b3V0IHtcbiAgICBwcml2YXRlIF9uID0gMDtcbiAgICBwcml2YXRlIF9wcmV2aWV3cyA9IGZhbHNlO1xuICAgIHByaXZhdGUgX2NvbGxhcHNlZCA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IHRhZ0lkOiBUYWdJRCkge1xuICAgICAgICBjb25zdCBzZXJpYWxpemVkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5rZXkpO1xuICAgICAgICBpZiAoc2VyaWFsaXplZCkge1xuICAgICAgICAgICAgLy8gV2UgZG9uJ3QgdXNlIHRoZSBzZXR0ZXJzIGFzIHRoZXkgY2F1c2Ugd3JpdGVzLlxuICAgICAgICAgICAgY29uc3QgcGFyc2VkID0gPElTZXJpYWxpemVkTGlzdExheW91dD5KU09OLnBhcnNlKHNlcmlhbGl6ZWQpO1xuICAgICAgICAgICAgdGhpcy5fbiA9IHBhcnNlZC5udW1UaWxlcztcbiAgICAgICAgICAgIHRoaXMuX3ByZXZpZXdzID0gcGFyc2VkLnNob3dQcmV2aWV3cztcbiAgICAgICAgICAgIHRoaXMuX2NvbGxhcHNlZCA9IHBhcnNlZC5jb2xsYXBzZWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGlzQ29sbGFwc2VkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29sbGFwc2VkO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgaXNDb2xsYXBzZWQodjogYm9vbGVhbikge1xuICAgICAgICB0aGlzLl9jb2xsYXBzZWQgPSB2O1xuICAgICAgICB0aGlzLnNhdmUoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHNob3dQcmV2aWV3cygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByZXZpZXdzO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgc2hvd1ByZXZpZXdzKHY6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5fcHJldmlld3MgPSB2O1xuICAgICAgICB0aGlzLnNhdmUoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHRpbGVIZWlnaHQoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIFRJTEVfSEVJR0hUX1BYO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0IGtleSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gYG14X3N1Ymxpc3RfbGF5b3V0XyR7dGhpcy50YWdJZH1fYm94ZWRgO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgdmlzaWJsZVRpbGVzKCk6IG51bWJlciB7XG4gICAgICAgIGlmICh0aGlzLl9uID09PSAwKSByZXR1cm4gdGhpcy5kZWZhdWx0VmlzaWJsZVRpbGVzO1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgodGhpcy5fbiwgdGhpcy5taW5WaXNpYmxlVGlsZXMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgdmlzaWJsZVRpbGVzKHY6IG51bWJlcikge1xuICAgICAgICB0aGlzLl9uID0gdjtcbiAgICAgICAgdGhpcy5zYXZlKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBtaW5WaXNpYmxlVGlsZXMoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBkZWZhdWx0VmlzaWJsZVRpbGVzKCk6IG51bWJlciB7XG4gICAgICAgIC8vIFRoaXMgbnVtYmVyIGlzIHdoYXQgXCJmZWVscyByaWdodFwiLCBhbmQgbW9zdGx5IHN1YmplY3QgdG8gZGVzaWduJ3Mgb3Bpbmlvbi5cbiAgICAgICAgcmV0dXJuIDg7XG4gICAgfVxuXG4gICAgcHVibGljIHRpbGVzV2l0aFBhZGRpbmcobjogbnVtYmVyLCBwYWRkaW5nUHg6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLnBpeGVsc1RvVGlsZXModGhpcy50aWxlc1RvUGl4ZWxzV2l0aFBhZGRpbmcobiwgcGFkZGluZ1B4KSk7XG4gICAgfVxuXG4gICAgcHVibGljIHRpbGVzVG9QaXhlbHNXaXRoUGFkZGluZyhuOiBudW1iZXIsIHBhZGRpbmdQeDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGlsZXNUb1BpeGVscyhuKSArIHBhZGRpbmdQeDtcbiAgICB9XG5cbiAgICBwdWJsaWMgdGlsZXNUb1BpeGVscyhuOiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gbiAqIHRoaXMudGlsZUhlaWdodDtcbiAgICB9XG5cbiAgICBwdWJsaWMgcGl4ZWxzVG9UaWxlcyhweDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHB4IC8gdGhpcy50aWxlSGVpZ2h0O1xuICAgIH1cblxuICAgIHB1YmxpYyByZXNldCgpIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0odGhpcy5rZXkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2F2ZSgpIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5rZXksIEpTT04uc3RyaW5naWZ5KHRoaXMuc2VyaWFsaXplKCkpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNlcmlhbGl6ZSgpOiBJU2VyaWFsaXplZExpc3RMYXlvdXQge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbnVtVGlsZXM6IHRoaXMudmlzaWJsZVRpbGVzLFxuICAgICAgICAgICAgc2hvd1ByZXZpZXdzOiB0aGlzLnNob3dQcmV2aWV3cyxcbiAgICAgICAgICAgIGNvbGxhcHNlZDogdGhpcy5pc0NvbGxhcHNlZCxcbiAgICAgICAgfTtcbiAgICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUEsTUFBTUEsY0FBYyxHQUFHLEVBQXZCOztBQVFPLE1BQU1DLFVBQU4sQ0FBaUI7RUFLcEJDLFdBQVcsQ0FBaUJDLEtBQWpCLEVBQStCO0lBQUEsS0FBZEEsS0FBYyxHQUFkQSxLQUFjO0lBQUEsMENBSjdCLENBSTZCO0lBQUEsaURBSHRCLEtBR3NCO0lBQUEsa0RBRnJCLEtBRXFCO0lBQ3RDLE1BQU1DLFVBQVUsR0FBR0MsWUFBWSxDQUFDQyxPQUFiLENBQXFCLEtBQUtDLEdBQTFCLENBQW5COztJQUNBLElBQUlILFVBQUosRUFBZ0I7TUFDWjtNQUNBLE1BQU1JLE1BQU0sR0FBMEJDLElBQUksQ0FBQ0MsS0FBTCxDQUFXTixVQUFYLENBQXRDO01BQ0EsS0FBS08sRUFBTCxHQUFVSCxNQUFNLENBQUNJLFFBQWpCO01BQ0EsS0FBS0MsU0FBTCxHQUFpQkwsTUFBTSxDQUFDTSxZQUF4QjtNQUNBLEtBQUtDLFVBQUwsR0FBa0JQLE1BQU0sQ0FBQ1EsU0FBekI7SUFDSDtFQUNKOztFQUVxQixJQUFYQyxXQUFXLEdBQVk7SUFDOUIsT0FBTyxLQUFLRixVQUFaO0VBQ0g7O0VBRXFCLElBQVhFLFdBQVcsQ0FBQ0MsQ0FBRCxFQUFhO0lBQy9CLEtBQUtILFVBQUwsR0FBa0JHLENBQWxCO0lBQ0EsS0FBS0MsSUFBTDtFQUNIOztFQUVzQixJQUFaTCxZQUFZLEdBQVk7SUFDL0IsT0FBTyxLQUFLRCxTQUFaO0VBQ0g7O0VBRXNCLElBQVpDLFlBQVksQ0FBQ0ksQ0FBRCxFQUFhO0lBQ2hDLEtBQUtMLFNBQUwsR0FBaUJLLENBQWpCO0lBQ0EsS0FBS0MsSUFBTDtFQUNIOztFQUVvQixJQUFWQyxVQUFVLEdBQVc7SUFDNUIsT0FBT3BCLGNBQVA7RUFDSDs7RUFFYyxJQUFITyxHQUFHLEdBQVc7SUFDdEIsT0FBUSxxQkFBb0IsS0FBS0osS0FBTSxRQUF2QztFQUNIOztFQUVzQixJQUFaa0IsWUFBWSxHQUFXO0lBQzlCLElBQUksS0FBS1YsRUFBTCxLQUFZLENBQWhCLEVBQW1CLE9BQU8sS0FBS1csbUJBQVo7SUFDbkIsT0FBT0MsSUFBSSxDQUFDQyxHQUFMLENBQVMsS0FBS2IsRUFBZCxFQUFrQixLQUFLYyxlQUF2QixDQUFQO0VBQ0g7O0VBRXNCLElBQVpKLFlBQVksQ0FBQ0gsQ0FBRCxFQUFZO0lBQy9CLEtBQUtQLEVBQUwsR0FBVU8sQ0FBVjtJQUNBLEtBQUtDLElBQUw7RUFDSDs7RUFFeUIsSUFBZk0sZUFBZSxHQUFXO0lBQ2pDLE9BQU8sQ0FBUDtFQUNIOztFQUU2QixJQUFuQkgsbUJBQW1CLEdBQVc7SUFDckM7SUFDQSxPQUFPLENBQVA7RUFDSDs7RUFFTUksZ0JBQWdCLENBQUNDLENBQUQsRUFBWUMsU0FBWixFQUF1QztJQUMxRCxPQUFPLEtBQUtDLGFBQUwsQ0FBbUIsS0FBS0Msd0JBQUwsQ0FBOEJILENBQTlCLEVBQWlDQyxTQUFqQyxDQUFuQixDQUFQO0VBQ0g7O0VBRU1FLHdCQUF3QixDQUFDSCxDQUFELEVBQVlDLFNBQVosRUFBdUM7SUFDbEUsT0FBTyxLQUFLRyxhQUFMLENBQW1CSixDQUFuQixJQUF3QkMsU0FBL0I7RUFDSDs7RUFFTUcsYUFBYSxDQUFDSixDQUFELEVBQW9CO0lBQ3BDLE9BQU9BLENBQUMsR0FBRyxLQUFLUCxVQUFoQjtFQUNIOztFQUVNUyxhQUFhLENBQUNHLEVBQUQsRUFBcUI7SUFDckMsT0FBT0EsRUFBRSxHQUFHLEtBQUtaLFVBQWpCO0VBQ0g7O0VBRU1hLEtBQUssR0FBRztJQUNYNUIsWUFBWSxDQUFDNkIsVUFBYixDQUF3QixLQUFLM0IsR0FBN0I7RUFDSDs7RUFFT1ksSUFBSSxHQUFHO0lBQ1hkLFlBQVksQ0FBQzhCLE9BQWIsQ0FBcUIsS0FBSzVCLEdBQTFCLEVBQStCRSxJQUFJLENBQUMyQixTQUFMLENBQWUsS0FBS0MsU0FBTCxFQUFmLENBQS9CO0VBQ0g7O0VBRU9BLFNBQVMsR0FBMEI7SUFDdkMsT0FBTztNQUNIekIsUUFBUSxFQUFFLEtBQUtTLFlBRFo7TUFFSFAsWUFBWSxFQUFFLEtBQUtBLFlBRmhCO01BR0hFLFNBQVMsRUFBRSxLQUFLQztJQUhiLENBQVA7RUFLSDs7QUEzRm1CIn0=