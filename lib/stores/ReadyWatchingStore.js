"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReadyWatchingStore = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _sync = require("matrix-js-sdk/src/sync");

var _events = require("events");

var _MatrixClientPeg = require("../MatrixClientPeg");

var _actions = require("../dispatcher/actions");

/*
 * Copyright 2021 - 2022 The Matrix.org Foundation C.I.C.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ReadyWatchingStore extends _events.EventEmitter {
  constructor(dispatcher) {
    super();
    this.dispatcher = dispatcher;
    (0, _defineProperty2.default)(this, "matrixClient", void 0);
    (0, _defineProperty2.default)(this, "dispatcherRef", null);
    (0, _defineProperty2.default)(this, "onAction", async payload => {
      this.onDispatcherAction(payload);

      if (payload.action === 'MatrixActions.sync') {
        // Only set the client on the transition into the PREPARED state.
        // Everything after this is unnecessary (we only need to know once we have a client)
        // and we intentionally don't set the client before this point to avoid stores
        // updating for every event emitted during the cached sync.
        if (payload.prevState !== _sync.SyncState.Prepared && payload.state === _sync.SyncState.Prepared && this.matrixClient !== payload.matrixClient) {
          if (this.matrixClient) {
            await this.onNotReady();
          }

          this.matrixClient = payload.matrixClient;
          await this.onReady();
        }
      } else if (payload.action === 'on_client_not_viable' || payload.action === _actions.Action.OnLoggedOut) {
        if (this.matrixClient) {
          await this.onNotReady();
          this.matrixClient = null;
        }
      }
    });
  }

  async start() {
    this.dispatcherRef = this.dispatcher.register(this.onAction);

    const matrixClient = _MatrixClientPeg.MatrixClientPeg.get();

    if (matrixClient) {
      this.matrixClient = matrixClient;
      await this.onReady();
    }
  }

  get mxClient() {
    return this.matrixClient; // for external readonly access
  }

  useUnitTestClient(cli) {
    this.matrixClient = cli;
  }

  destroy() {
    if (this.dispatcherRef !== null) this.dispatcher.unregister(this.dispatcherRef);
  }

  async onReady() {// Default implementation is to do nothing.
  }

  async onNotReady() {// Default implementation is to do nothing.
  }

  onDispatcherAction(payload) {// Default implementation is to do nothing.
  }

}

exports.ReadyWatchingStore = ReadyWatchingStore;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFkeVdhdGNoaW5nU3RvcmUiLCJFdmVudEVtaXR0ZXIiLCJjb25zdHJ1Y3RvciIsImRpc3BhdGNoZXIiLCJwYXlsb2FkIiwib25EaXNwYXRjaGVyQWN0aW9uIiwiYWN0aW9uIiwicHJldlN0YXRlIiwiU3luY1N0YXRlIiwiUHJlcGFyZWQiLCJzdGF0ZSIsIm1hdHJpeENsaWVudCIsIm9uTm90UmVhZHkiLCJvblJlYWR5IiwiQWN0aW9uIiwiT25Mb2dnZWRPdXQiLCJzdGFydCIsImRpc3BhdGNoZXJSZWYiLCJyZWdpc3RlciIsIm9uQWN0aW9uIiwiTWF0cml4Q2xpZW50UGVnIiwiZ2V0IiwibXhDbGllbnQiLCJ1c2VVbml0VGVzdENsaWVudCIsImNsaSIsImRlc3Ryb3kiLCJ1bnJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3N0b3Jlcy9SZWFkeVdhdGNoaW5nU3RvcmUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDIxIC0gMjAyMiBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgTWF0cml4Q2xpZW50IH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL2NsaWVudFwiO1xuaW1wb3J0IHsgU3luY1N0YXRlIH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL3N5bmNcIjtcbmltcG9ydCB7IERpc3BhdGNoZXIgfSBmcm9tIFwiZmx1eFwiO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcImV2ZW50c1wiO1xuXG5pbXBvcnQgeyBNYXRyaXhDbGllbnRQZWcgfSBmcm9tIFwiLi4vTWF0cml4Q2xpZW50UGVnXCI7XG5pbXBvcnQgeyBBY3Rpb25QYXlsb2FkIH0gZnJvbSBcIi4uL2Rpc3BhdGNoZXIvcGF5bG9hZHNcIjtcbmltcG9ydCB7IElEZXN0cm95YWJsZSB9IGZyb20gXCIuLi91dGlscy9JRGVzdHJveWFibGVcIjtcbmltcG9ydCB7IEFjdGlvbiB9IGZyb20gXCIuLi9kaXNwYXRjaGVyL2FjdGlvbnNcIjtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFJlYWR5V2F0Y2hpbmdTdG9yZSBleHRlbmRzIEV2ZW50RW1pdHRlciBpbXBsZW1lbnRzIElEZXN0cm95YWJsZSB7XG4gICAgcHJvdGVjdGVkIG1hdHJpeENsaWVudDogTWF0cml4Q2xpZW50O1xuICAgIHByaXZhdGUgZGlzcGF0Y2hlclJlZjogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgcmVhZG9ubHkgZGlzcGF0Y2hlcjogRGlzcGF0Y2hlcjxBY3Rpb25QYXlsb2FkPikge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBzdGFydCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaGVyUmVmID0gdGhpcy5kaXNwYXRjaGVyLnJlZ2lzdGVyKHRoaXMub25BY3Rpb24pO1xuXG4gICAgICAgIGNvbnN0IG1hdHJpeENsaWVudCA9IE1hdHJpeENsaWVudFBlZy5nZXQoKTtcbiAgICAgICAgaWYgKG1hdHJpeENsaWVudCkge1xuICAgICAgICAgICAgdGhpcy5tYXRyaXhDbGllbnQgPSBtYXRyaXhDbGllbnQ7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLm9uUmVhZHkoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgbXhDbGllbnQoKTogTWF0cml4Q2xpZW50IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF0cml4Q2xpZW50OyAvLyBmb3IgZXh0ZXJuYWwgcmVhZG9ubHkgYWNjZXNzXG4gICAgfVxuXG4gICAgcHVibGljIHVzZVVuaXRUZXN0Q2xpZW50KGNsaTogTWF0cml4Q2xpZW50KSB7XG4gICAgICAgIHRoaXMubWF0cml4Q2xpZW50ID0gY2xpO1xuICAgIH1cblxuICAgIHB1YmxpYyBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5kaXNwYXRjaGVyUmVmICE9PSBudWxsKSB0aGlzLmRpc3BhdGNoZXIudW5yZWdpc3Rlcih0aGlzLmRpc3BhdGNoZXJSZWYpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBhc3luYyBvblJlYWR5KCkge1xuICAgICAgICAvLyBEZWZhdWx0IGltcGxlbWVudGF0aW9uIGlzIHRvIGRvIG5vdGhpbmcuXG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGFzeW5jIG9uTm90UmVhZHkoKSB7XG4gICAgICAgIC8vIERlZmF1bHQgaW1wbGVtZW50YXRpb24gaXMgdG8gZG8gbm90aGluZy5cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgb25EaXNwYXRjaGVyQWN0aW9uKHBheWxvYWQ6IEFjdGlvblBheWxvYWQpIHtcbiAgICAgICAgLy8gRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBpcyB0byBkbyBub3RoaW5nLlxuICAgIH1cblxuICAgIHByaXZhdGUgb25BY3Rpb24gPSBhc3luYyAocGF5bG9hZDogQWN0aW9uUGF5bG9hZCkgPT4ge1xuICAgICAgICB0aGlzLm9uRGlzcGF0Y2hlckFjdGlvbihwYXlsb2FkKTtcblxuICAgICAgICBpZiAocGF5bG9hZC5hY3Rpb24gPT09ICdNYXRyaXhBY3Rpb25zLnN5bmMnKSB7XG4gICAgICAgICAgICAvLyBPbmx5IHNldCB0aGUgY2xpZW50IG9uIHRoZSB0cmFuc2l0aW9uIGludG8gdGhlIFBSRVBBUkVEIHN0YXRlLlxuICAgICAgICAgICAgLy8gRXZlcnl0aGluZyBhZnRlciB0aGlzIGlzIHVubmVjZXNzYXJ5ICh3ZSBvbmx5IG5lZWQgdG8ga25vdyBvbmNlIHdlIGhhdmUgYSBjbGllbnQpXG4gICAgICAgICAgICAvLyBhbmQgd2UgaW50ZW50aW9uYWxseSBkb24ndCBzZXQgdGhlIGNsaWVudCBiZWZvcmUgdGhpcyBwb2ludCB0byBhdm9pZCBzdG9yZXNcbiAgICAgICAgICAgIC8vIHVwZGF0aW5nIGZvciBldmVyeSBldmVudCBlbWl0dGVkIGR1cmluZyB0aGUgY2FjaGVkIHN5bmMuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgcGF5bG9hZC5wcmV2U3RhdGUgIT09IFN5bmNTdGF0ZS5QcmVwYXJlZFxuICAgICAgICAgICAgICAgICYmIHBheWxvYWQuc3RhdGUgPT09IFN5bmNTdGF0ZS5QcmVwYXJlZFxuICAgICAgICAgICAgICAgICYmIHRoaXMubWF0cml4Q2xpZW50ICE9PSBwYXlsb2FkLm1hdHJpeENsaWVudFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubWF0cml4Q2xpZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMub25Ob3RSZWFkeSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLm1hdHJpeENsaWVudCA9IHBheWxvYWQubWF0cml4Q2xpZW50O1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMub25SZWFkeSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHBheWxvYWQuYWN0aW9uID09PSAnb25fY2xpZW50X25vdF92aWFibGUnIHx8IHBheWxvYWQuYWN0aW9uID09PSBBY3Rpb24uT25Mb2dnZWRPdXQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm1hdHJpeENsaWVudCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMub25Ob3RSZWFkeSgpO1xuICAgICAgICAgICAgICAgIHRoaXMubWF0cml4Q2xpZW50ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBaUJBOztBQUVBOztBQUVBOztBQUdBOztBQXhCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFZTyxNQUFlQSxrQkFBZixTQUEwQ0Msb0JBQTFDLENBQStFO0VBSWxGQyxXQUFXLENBQW9CQyxVQUFwQixFQUEyRDtJQUNsRTtJQURrRSxLQUF2Q0EsVUFBdUMsR0FBdkNBLFVBQXVDO0lBQUE7SUFBQSxxREFGL0IsSUFFK0I7SUFBQSxnREFzQ25ELE1BQU9DLE9BQVAsSUFBa0M7TUFDakQsS0FBS0Msa0JBQUwsQ0FBd0JELE9BQXhCOztNQUVBLElBQUlBLE9BQU8sQ0FBQ0UsTUFBUixLQUFtQixvQkFBdkIsRUFBNkM7UUFDekM7UUFDQTtRQUNBO1FBQ0E7UUFDQSxJQUNJRixPQUFPLENBQUNHLFNBQVIsS0FBc0JDLGVBQUEsQ0FBVUMsUUFBaEMsSUFDR0wsT0FBTyxDQUFDTSxLQUFSLEtBQWtCRixlQUFBLENBQVVDLFFBRC9CLElBRUcsS0FBS0UsWUFBTCxLQUFzQlAsT0FBTyxDQUFDTyxZQUhyQyxFQUlFO1VBQ0UsSUFBSSxLQUFLQSxZQUFULEVBQXVCO1lBQ25CLE1BQU0sS0FBS0MsVUFBTCxFQUFOO1VBQ0g7O1VBQ0QsS0FBS0QsWUFBTCxHQUFvQlAsT0FBTyxDQUFDTyxZQUE1QjtVQUNBLE1BQU0sS0FBS0UsT0FBTCxFQUFOO1FBQ0g7TUFDSixDQWhCRCxNQWdCTyxJQUFJVCxPQUFPLENBQUNFLE1BQVIsS0FBbUIsc0JBQW5CLElBQTZDRixPQUFPLENBQUNFLE1BQVIsS0FBbUJRLGVBQUEsQ0FBT0MsV0FBM0UsRUFBd0Y7UUFDM0YsSUFBSSxLQUFLSixZQUFULEVBQXVCO1VBQ25CLE1BQU0sS0FBS0MsVUFBTCxFQUFOO1VBQ0EsS0FBS0QsWUFBTCxHQUFvQixJQUFwQjtRQUNIO01BQ0o7SUFDSixDQS9EcUU7RUFFckU7O0VBRWlCLE1BQUxLLEtBQUssR0FBa0I7SUFDaEMsS0FBS0MsYUFBTCxHQUFxQixLQUFLZCxVQUFMLENBQWdCZSxRQUFoQixDQUF5QixLQUFLQyxRQUE5QixDQUFyQjs7SUFFQSxNQUFNUixZQUFZLEdBQUdTLGdDQUFBLENBQWdCQyxHQUFoQixFQUFyQjs7SUFDQSxJQUFJVixZQUFKLEVBQWtCO01BQ2QsS0FBS0EsWUFBTCxHQUFvQkEsWUFBcEI7TUFDQSxNQUFNLEtBQUtFLE9BQUwsRUFBTjtJQUNIO0VBQ0o7O0VBRWtCLElBQVJTLFFBQVEsR0FBaUI7SUFDaEMsT0FBTyxLQUFLWCxZQUFaLENBRGdDLENBQ047RUFDN0I7O0VBRU1ZLGlCQUFpQixDQUFDQyxHQUFELEVBQW9CO0lBQ3hDLEtBQUtiLFlBQUwsR0FBb0JhLEdBQXBCO0VBQ0g7O0VBRU1DLE9BQU8sR0FBRztJQUNiLElBQUksS0FBS1IsYUFBTCxLQUF1QixJQUEzQixFQUFpQyxLQUFLZCxVQUFMLENBQWdCdUIsVUFBaEIsQ0FBMkIsS0FBS1QsYUFBaEM7RUFDcEM7O0VBRXNCLE1BQVBKLE9BQU8sR0FBRyxDQUN0QjtFQUNIOztFQUV5QixNQUFWRCxVQUFVLEdBQUcsQ0FDekI7RUFDSDs7RUFFU1Asa0JBQWtCLENBQUNELE9BQUQsRUFBeUIsQ0FDakQ7RUFDSDs7QUF4Q2lGIn0=