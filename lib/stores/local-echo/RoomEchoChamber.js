"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RoomEchoChamber = exports.CachedRoomKey = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _event = require("matrix-js-sdk/src/@types/event");

var _GenericEchoChamber = require("./GenericEchoChamber");

var _RoomNotifs = require("../../RoomNotifs");

var _languageHandler = require("../../languageHandler");

/*
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
let CachedRoomKey;
exports.CachedRoomKey = CachedRoomKey;

(function (CachedRoomKey) {
  CachedRoomKey[CachedRoomKey["NotificationVolume"] = 0] = "NotificationVolume";
})(CachedRoomKey || (exports.CachedRoomKey = CachedRoomKey = {}));

class RoomEchoChamber extends _GenericEchoChamber.GenericEchoChamber {
  constructor(context) {
    super(context, k => this.properties.get(k));
    (0, _defineProperty2.default)(this, "properties", new Map());
    (0, _defineProperty2.default)(this, "onAccountData", event => {
      if (event.getType() === _event.EventType.PushRules) {
        const currentVolume = this.properties.get(CachedRoomKey.NotificationVolume);
        const newVolume = (0, _RoomNotifs.getRoomNotifsState)(this.context.room.roomId);

        if (currentVolume !== newVolume) {
          this.updateNotificationVolume();
        }
      }
    });
  }

  onClientChanged(oldClient, newClient) {
    this.properties.clear();

    if (oldClient) {
      oldClient.removeListener("accountData", this.onAccountData);
    }

    if (newClient) {
      // Register the listeners first
      newClient.on("accountData", this.onAccountData); // Then populate the properties map

      this.updateNotificationVolume();
    }
  }

  updateNotificationVolume() {
    this.properties.set(CachedRoomKey.NotificationVolume, (0, _RoomNotifs.getRoomNotifsState)(this.context.room.roomId));
    this.markEchoReceived(CachedRoomKey.NotificationVolume);
    this.emit(_GenericEchoChamber.PROPERTY_UPDATED, CachedRoomKey.NotificationVolume);
  } // ---- helpers below here ----


  get notificationVolume() {
    return this.getValue(CachedRoomKey.NotificationVolume);
  }

  set notificationVolume(v) {
    this.setValue((0, _languageHandler._t)("Change notification settings"), CachedRoomKey.NotificationVolume, v, async () => {
      return (0, _RoomNotifs.setRoomNotifsState)(this.context.room.roomId, v);
    }, _GenericEchoChamber.implicitlyReverted);
  }

}

exports.RoomEchoChamber = RoomEchoChamber;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDYWNoZWRSb29tS2V5IiwiUm9vbUVjaG9DaGFtYmVyIiwiR2VuZXJpY0VjaG9DaGFtYmVyIiwiY29uc3RydWN0b3IiLCJjb250ZXh0IiwiayIsInByb3BlcnRpZXMiLCJnZXQiLCJNYXAiLCJldmVudCIsImdldFR5cGUiLCJFdmVudFR5cGUiLCJQdXNoUnVsZXMiLCJjdXJyZW50Vm9sdW1lIiwiTm90aWZpY2F0aW9uVm9sdW1lIiwibmV3Vm9sdW1lIiwiZ2V0Um9vbU5vdGlmc1N0YXRlIiwicm9vbSIsInJvb21JZCIsInVwZGF0ZU5vdGlmaWNhdGlvblZvbHVtZSIsIm9uQ2xpZW50Q2hhbmdlZCIsIm9sZENsaWVudCIsIm5ld0NsaWVudCIsImNsZWFyIiwicmVtb3ZlTGlzdGVuZXIiLCJvbkFjY291bnREYXRhIiwib24iLCJzZXQiLCJtYXJrRWNob1JlY2VpdmVkIiwiZW1pdCIsIlBST1BFUlRZX1VQREFURUQiLCJub3RpZmljYXRpb25Wb2x1bWUiLCJnZXRWYWx1ZSIsInYiLCJzZXRWYWx1ZSIsIl90Iiwic2V0Um9vbU5vdGlmc1N0YXRlIiwiaW1wbGljaXRseVJldmVydGVkIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3N0b3Jlcy9sb2NhbC1lY2hvL1Jvb21FY2hvQ2hhbWJlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMjAgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG5odHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCB7IE1hdHJpeEV2ZW50IH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL21vZGVscy9ldmVudFwiO1xuaW1wb3J0IHsgRXZlbnRUeXBlIH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL0B0eXBlcy9ldmVudFwiO1xuXG5pbXBvcnQgeyBHZW5lcmljRWNob0NoYW1iZXIsIGltcGxpY2l0bHlSZXZlcnRlZCwgUFJPUEVSVFlfVVBEQVRFRCB9IGZyb20gXCIuL0dlbmVyaWNFY2hvQ2hhbWJlclwiO1xuaW1wb3J0IHsgZ2V0Um9vbU5vdGlmc1N0YXRlLCBSb29tTm90aWZTdGF0ZSwgc2V0Um9vbU5vdGlmc1N0YXRlIH0gZnJvbSBcIi4uLy4uL1Jvb21Ob3RpZnNcIjtcbmltcG9ydCB7IFJvb21FY2hvQ29udGV4dCB9IGZyb20gXCIuL1Jvb21FY2hvQ29udGV4dFwiO1xuaW1wb3J0IHsgX3QgfSBmcm9tIFwiLi4vLi4vbGFuZ3VhZ2VIYW5kbGVyXCI7XG5cbmV4cG9ydCBlbnVtIENhY2hlZFJvb21LZXkge1xuICAgIE5vdGlmaWNhdGlvblZvbHVtZSxcbn1cblxuZXhwb3J0IGNsYXNzIFJvb21FY2hvQ2hhbWJlciBleHRlbmRzIEdlbmVyaWNFY2hvQ2hhbWJlcjxSb29tRWNob0NvbnRleHQsIENhY2hlZFJvb21LZXksIFJvb21Ob3RpZlN0YXRlPiB7XG4gICAgcHJpdmF0ZSBwcm9wZXJ0aWVzID0gbmV3IE1hcDxDYWNoZWRSb29tS2V5LCBSb29tTm90aWZTdGF0ZT4oKTtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb250ZXh0OiBSb29tRWNob0NvbnRleHQpIHtcbiAgICAgICAgc3VwZXIoY29udGV4dCwgKGspID0+IHRoaXMucHJvcGVydGllcy5nZXQoaykpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBvbkNsaWVudENoYW5nZWQob2xkQ2xpZW50LCBuZXdDbGllbnQpIHtcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLmNsZWFyKCk7XG4gICAgICAgIGlmIChvbGRDbGllbnQpIHtcbiAgICAgICAgICAgIG9sZENsaWVudC5yZW1vdmVMaXN0ZW5lcihcImFjY291bnREYXRhXCIsIHRoaXMub25BY2NvdW50RGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5ld0NsaWVudCkge1xuICAgICAgICAgICAgLy8gUmVnaXN0ZXIgdGhlIGxpc3RlbmVycyBmaXJzdFxuICAgICAgICAgICAgbmV3Q2xpZW50Lm9uKFwiYWNjb3VudERhdGFcIiwgdGhpcy5vbkFjY291bnREYXRhKTtcblxuICAgICAgICAgICAgLy8gVGhlbiBwb3B1bGF0ZSB0aGUgcHJvcGVydGllcyBtYXBcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTm90aWZpY2F0aW9uVm9sdW1lKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIG9uQWNjb3VudERhdGEgPSAoZXZlbnQ6IE1hdHJpeEV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudC5nZXRUeXBlKCkgPT09IEV2ZW50VHlwZS5QdXNoUnVsZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRWb2x1bWUgPSB0aGlzLnByb3BlcnRpZXMuZ2V0KENhY2hlZFJvb21LZXkuTm90aWZpY2F0aW9uVm9sdW1lKTtcbiAgICAgICAgICAgIGNvbnN0IG5ld1ZvbHVtZSA9IGdldFJvb21Ob3RpZnNTdGF0ZSh0aGlzLmNvbnRleHQucm9vbS5yb29tSWQpO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRWb2x1bWUgIT09IG5ld1ZvbHVtZSkge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlTm90aWZpY2F0aW9uVm9sdW1lKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHJpdmF0ZSB1cGRhdGVOb3RpZmljYXRpb25Wb2x1bWUoKSB7XG4gICAgICAgIHRoaXMucHJvcGVydGllcy5zZXQoQ2FjaGVkUm9vbUtleS5Ob3RpZmljYXRpb25Wb2x1bWUsIGdldFJvb21Ob3RpZnNTdGF0ZSh0aGlzLmNvbnRleHQucm9vbS5yb29tSWQpKTtcbiAgICAgICAgdGhpcy5tYXJrRWNob1JlY2VpdmVkKENhY2hlZFJvb21LZXkuTm90aWZpY2F0aW9uVm9sdW1lKTtcbiAgICAgICAgdGhpcy5lbWl0KFBST1BFUlRZX1VQREFURUQsIENhY2hlZFJvb21LZXkuTm90aWZpY2F0aW9uVm9sdW1lKTtcbiAgICB9XG5cbiAgICAvLyAtLS0tIGhlbHBlcnMgYmVsb3cgaGVyZSAtLS0tXG5cbiAgICBwdWJsaWMgZ2V0IG5vdGlmaWNhdGlvblZvbHVtZSgpOiBSb29tTm90aWZTdGF0ZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlKENhY2hlZFJvb21LZXkuTm90aWZpY2F0aW9uVm9sdW1lKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IG5vdGlmaWNhdGlvblZvbHVtZSh2OiBSb29tTm90aWZTdGF0ZSkge1xuICAgICAgICB0aGlzLnNldFZhbHVlKF90KFwiQ2hhbmdlIG5vdGlmaWNhdGlvbiBzZXR0aW5nc1wiKSwgQ2FjaGVkUm9vbUtleS5Ob3RpZmljYXRpb25Wb2x1bWUsIHYsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBzZXRSb29tTm90aWZzU3RhdGUodGhpcy5jb250ZXh0LnJvb20ucm9vbUlkLCB2KTtcbiAgICAgICAgfSwgaW1wbGljaXRseVJldmVydGVkKTtcbiAgICB9XG59XG4iXSwibWFw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