"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PROPERTY_UPDATED = exports.GenericEchoChamber = void 0;
exports.implicitlyReverted = implicitlyReverted;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _events = require("events");

var _EchoTransaction = require("./EchoTransaction");

/*
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
async function implicitlyReverted() {// do nothing :D
}

const PROPERTY_UPDATED = "property_updated";
exports.PROPERTY_UPDATED = PROPERTY_UPDATED;

class GenericEchoChamber extends _events.EventEmitter {
  constructor(context, lookupFn) {
    super();
    this.context = context;
    this.lookupFn = lookupFn;
    (0, _defineProperty2.default)(this, "cache", new Map());
    (0, _defineProperty2.default)(this, "matrixClient", void 0);
  }

  setClient(client) {
    const oldClient = this.matrixClient;
    this.matrixClient = client;
    this.onClientChanged(oldClient, client);
  }

  /**
   * Gets a value. If the key is in flight, the cached value will be returned. If
   * the key is not in flight then the lookupFn provided to this class will be
   * called instead.
   * @param key The key to look up.
   * @returns The value for the key.
   */
  getValue(key) {
    return this.cache.has(key) ? this.cache.get(key).val : this.lookupFn(key);
  }

  cacheVal(key, val, txn) {
    this.cache.set(key, {
      txn,
      val
    });
    this.emit(PROPERTY_UPDATED, key);
  }

  decacheKey(key) {
    if (this.cache.has(key)) {
      this.context.disownTransaction(this.cache.get(key).txn);
      this.cache.delete(key);
      this.emit(PROPERTY_UPDATED, key);
    }
  }

  markEchoReceived(key) {
    if (this.cache.has(key)) {
      const txn = this.cache.get(key).txn;
      this.context.disownTransaction(txn);
      txn.cancel();
    }

    this.decacheKey(key);
  }

  setValue(auditName, key, targetVal, runFn, revertFn) {
    // Cancel any pending transactions for the same key
    if (this.cache.has(key)) {
      this.cache.get(key).txn.cancel();
    }

    const ctxn = this.context.beginTransaction(auditName, runFn);
    this.cacheVal(key, targetVal, ctxn); // set the cache now as it won't be updated by the .when() ladder below.

    ctxn.when(_EchoTransaction.TransactionStatus.Pending, () => this.cacheVal(key, targetVal, ctxn)).when(_EchoTransaction.TransactionStatus.Error, () => revertFn());
    ctxn.run();
  }

}

exports.GenericEchoChamber = GenericEchoChamber;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpbXBsaWNpdGx5UmV2ZXJ0ZWQiLCJQUk9QRVJUWV9VUERBVEVEIiwiR2VuZXJpY0VjaG9DaGFtYmVyIiwiRXZlbnRFbWl0dGVyIiwiY29uc3RydWN0b3IiLCJjb250ZXh0IiwibG9va3VwRm4iLCJNYXAiLCJzZXRDbGllbnQiLCJjbGllbnQiLCJvbGRDbGllbnQiLCJtYXRyaXhDbGllbnQiLCJvbkNsaWVudENoYW5nZWQiLCJnZXRWYWx1ZSIsImtleSIsImNhY2hlIiwiaGFzIiwiZ2V0IiwidmFsIiwiY2FjaGVWYWwiLCJ0eG4iLCJzZXQiLCJlbWl0IiwiZGVjYWNoZUtleSIsImRpc293blRyYW5zYWN0aW9uIiwiZGVsZXRlIiwibWFya0VjaG9SZWNlaXZlZCIsImNhbmNlbCIsInNldFZhbHVlIiwiYXVkaXROYW1lIiwidGFyZ2V0VmFsIiwicnVuRm4iLCJyZXZlcnRGbiIsImN0eG4iLCJiZWdpblRyYW5zYWN0aW9uIiwid2hlbiIsIlRyYW5zYWN0aW9uU3RhdHVzIiwiUGVuZGluZyIsIkVycm9yIiwicnVuIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3N0b3Jlcy9sb2NhbC1lY2hvL0dlbmVyaWNFY2hvQ2hhbWJlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMjAgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG5odHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCB7IE1hdHJpeENsaWVudCB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9jbGllbnRcIjtcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gXCJldmVudHNcIjtcblxuaW1wb3J0IHsgRWNob0NvbnRleHQgfSBmcm9tIFwiLi9FY2hvQ29udGV4dFwiO1xuaW1wb3J0IHsgRWNob1RyYW5zYWN0aW9uLCBSdW5GbiwgVHJhbnNhY3Rpb25TdGF0dXMgfSBmcm9tIFwiLi9FY2hvVHJhbnNhY3Rpb25cIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGltcGxpY2l0bHlSZXZlcnRlZCgpIHtcbiAgICAvLyBkbyBub3RoaW5nIDpEXG59XG5cbmV4cG9ydCBjb25zdCBQUk9QRVJUWV9VUERBVEVEID0gXCJwcm9wZXJ0eV91cGRhdGVkXCI7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBHZW5lcmljRWNob0NoYW1iZXI8QyBleHRlbmRzIEVjaG9Db250ZXh0LCBLLCBWPiBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gICAgcHJpdmF0ZSBjYWNoZSA9IG5ldyBNYXA8Sywge3R4bjogRWNob1RyYW5zYWN0aW9uLCB2YWw6IFZ9PigpO1xuICAgIHByb3RlY3RlZCBtYXRyaXhDbGllbnQ6IE1hdHJpeENsaWVudDtcblxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgY29udGV4dDogQywgcHJpdmF0ZSBsb29rdXBGbjogKGtleTogSykgPT4gVikge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRDbGllbnQoY2xpZW50OiBNYXRyaXhDbGllbnQpIHtcbiAgICAgICAgY29uc3Qgb2xkQ2xpZW50ID0gdGhpcy5tYXRyaXhDbGllbnQ7XG4gICAgICAgIHRoaXMubWF0cml4Q2xpZW50ID0gY2xpZW50O1xuICAgICAgICB0aGlzLm9uQ2xpZW50Q2hhbmdlZChvbGRDbGllbnQsIGNsaWVudCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IG9uQ2xpZW50Q2hhbmdlZChvbGRDbGllbnQ6IE1hdHJpeENsaWVudCwgbmV3Q2xpZW50OiBNYXRyaXhDbGllbnQpO1xuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIHZhbHVlLiBJZiB0aGUga2V5IGlzIGluIGZsaWdodCwgdGhlIGNhY2hlZCB2YWx1ZSB3aWxsIGJlIHJldHVybmVkLiBJZlxuICAgICAqIHRoZSBrZXkgaXMgbm90IGluIGZsaWdodCB0aGVuIHRoZSBsb29rdXBGbiBwcm92aWRlZCB0byB0aGlzIGNsYXNzIHdpbGwgYmVcbiAgICAgKiBjYWxsZWQgaW5zdGVhZC5cbiAgICAgKiBAcGFyYW0ga2V5IFRoZSBrZXkgdG8gbG9vayB1cC5cbiAgICAgKiBAcmV0dXJucyBUaGUgdmFsdWUgZm9yIHRoZSBrZXkuXG4gICAgICovXG4gICAgcHVibGljIGdldFZhbHVlKGtleTogSyk6IFYge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZS5oYXMoa2V5KSA/IHRoaXMuY2FjaGUuZ2V0KGtleSkudmFsIDogdGhpcy5sb29rdXBGbihrZXkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY2FjaGVWYWwoa2V5OiBLLCB2YWw6IFYsIHR4bjogRWNob1RyYW5zYWN0aW9uKSB7XG4gICAgICAgIHRoaXMuY2FjaGUuc2V0KGtleSwgeyB0eG4sIHZhbCB9KTtcbiAgICAgICAgdGhpcy5lbWl0KFBST1BFUlRZX1VQREFURUQsIGtleSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkZWNhY2hlS2V5KGtleTogSykge1xuICAgICAgICBpZiAodGhpcy5jYWNoZS5oYXMoa2V5KSkge1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRpc293blRyYW5zYWN0aW9uKHRoaXMuY2FjaGUuZ2V0KGtleSkudHhuKTtcbiAgICAgICAgICAgIHRoaXMuY2FjaGUuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoUFJPUEVSVFlfVVBEQVRFRCwga2V5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBtYXJrRWNob1JlY2VpdmVkKGtleTogSykge1xuICAgICAgICBpZiAodGhpcy5jYWNoZS5oYXMoa2V5KSkge1xuICAgICAgICAgICAgY29uc3QgdHhuID0gdGhpcy5jYWNoZS5nZXQoa2V5KS50eG47XG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZGlzb3duVHJhbnNhY3Rpb24odHhuKTtcbiAgICAgICAgICAgIHR4bi5jYW5jZWwoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlY2FjaGVLZXkoa2V5KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0VmFsdWUoYXVkaXROYW1lOiBzdHJpbmcsIGtleTogSywgdGFyZ2V0VmFsOiBWLCBydW5GbjogUnVuRm4sIHJldmVydEZuOiBSdW5Gbikge1xuICAgICAgICAvLyBDYW5jZWwgYW55IHBlbmRpbmcgdHJhbnNhY3Rpb25zIGZvciB0aGUgc2FtZSBrZXlcbiAgICAgICAgaWYgKHRoaXMuY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGUuZ2V0KGtleSkudHhuLmNhbmNlbCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY3R4biA9IHRoaXMuY29udGV4dC5iZWdpblRyYW5zYWN0aW9uKGF1ZGl0TmFtZSwgcnVuRm4pO1xuICAgICAgICB0aGlzLmNhY2hlVmFsKGtleSwgdGFyZ2V0VmFsLCBjdHhuKTsgLy8gc2V0IHRoZSBjYWNoZSBub3cgYXMgaXQgd29uJ3QgYmUgdXBkYXRlZCBieSB0aGUgLndoZW4oKSBsYWRkZXIgYmVsb3cuXG5cbiAgICAgICAgY3R4bi53aGVuKFRyYW5zYWN0aW9uU3RhdHVzLlBlbmRpbmcsICgpID0+IHRoaXMuY2FjaGVWYWwoa2V5LCB0YXJnZXRWYWwsIGN0eG4pKVxuICAgICAgICAgICAgLndoZW4oVHJhbnNhY3Rpb25TdGF0dXMuRXJyb3IsICgpID0+IHJldmVydEZuKCkpO1xuXG4gICAgICAgIGN0eG4ucnVuKCk7XG4gICAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFpQkE7O0FBR0E7O0FBcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFPLGVBQWVBLGtCQUFmLEdBQW9DLENBQ3ZDO0FBQ0g7O0FBRU0sTUFBTUMsZ0JBQWdCLEdBQUcsa0JBQXpCOzs7QUFFQSxNQUFlQyxrQkFBZixTQUF1RUMsb0JBQXZFLENBQW9GO0VBSTdFQyxXQUFXLENBQWlCQyxPQUFqQixFQUFxQ0MsUUFBckMsRUFBOEQ7SUFDL0U7SUFEK0UsS0FBN0NELE9BQTZDLEdBQTdDQSxPQUE2QztJQUFBLEtBQXpCQyxRQUF5QixHQUF6QkEsUUFBeUI7SUFBQSw2Q0FIbkUsSUFBSUMsR0FBSixFQUdtRTtJQUFBO0VBRWxGOztFQUVNQyxTQUFTLENBQUNDLE1BQUQsRUFBdUI7SUFDbkMsTUFBTUMsU0FBUyxHQUFHLEtBQUtDLFlBQXZCO0lBQ0EsS0FBS0EsWUFBTCxHQUFvQkYsTUFBcEI7SUFDQSxLQUFLRyxlQUFMLENBQXFCRixTQUFyQixFQUFnQ0QsTUFBaEM7RUFDSDs7RUFJRDtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNXSSxRQUFRLENBQUNDLEdBQUQsRUFBWTtJQUN2QixPQUFPLEtBQUtDLEtBQUwsQ0FBV0MsR0FBWCxDQUFlRixHQUFmLElBQXNCLEtBQUtDLEtBQUwsQ0FBV0UsR0FBWCxDQUFlSCxHQUFmLEVBQW9CSSxHQUExQyxHQUFnRCxLQUFLWixRQUFMLENBQWNRLEdBQWQsQ0FBdkQ7RUFDSDs7RUFFT0ssUUFBUSxDQUFDTCxHQUFELEVBQVNJLEdBQVQsRUFBaUJFLEdBQWpCLEVBQXVDO0lBQ25ELEtBQUtMLEtBQUwsQ0FBV00sR0FBWCxDQUFlUCxHQUFmLEVBQW9CO01BQUVNLEdBQUY7TUFBT0Y7SUFBUCxDQUFwQjtJQUNBLEtBQUtJLElBQUwsQ0FBVXJCLGdCQUFWLEVBQTRCYSxHQUE1QjtFQUNIOztFQUVPUyxVQUFVLENBQUNULEdBQUQsRUFBUztJQUN2QixJQUFJLEtBQUtDLEtBQUwsQ0FBV0MsR0FBWCxDQUFlRixHQUFmLENBQUosRUFBeUI7TUFDckIsS0FBS1QsT0FBTCxDQUFhbUIsaUJBQWIsQ0FBK0IsS0FBS1QsS0FBTCxDQUFXRSxHQUFYLENBQWVILEdBQWYsRUFBb0JNLEdBQW5EO01BQ0EsS0FBS0wsS0FBTCxDQUFXVSxNQUFYLENBQWtCWCxHQUFsQjtNQUNBLEtBQUtRLElBQUwsQ0FBVXJCLGdCQUFWLEVBQTRCYSxHQUE1QjtJQUNIO0VBQ0o7O0VBRVNZLGdCQUFnQixDQUFDWixHQUFELEVBQVM7SUFDL0IsSUFBSSxLQUFLQyxLQUFMLENBQVdDLEdBQVgsQ0FBZUYsR0FBZixDQUFKLEVBQXlCO01BQ3JCLE1BQU1NLEdBQUcsR0FBRyxLQUFLTCxLQUFMLENBQVdFLEdBQVgsQ0FBZUgsR0FBZixFQUFvQk0sR0FBaEM7TUFDQSxLQUFLZixPQUFMLENBQWFtQixpQkFBYixDQUErQkosR0FBL0I7TUFDQUEsR0FBRyxDQUFDTyxNQUFKO0lBQ0g7O0lBQ0QsS0FBS0osVUFBTCxDQUFnQlQsR0FBaEI7RUFDSDs7RUFFTWMsUUFBUSxDQUFDQyxTQUFELEVBQW9CZixHQUFwQixFQUE0QmdCLFNBQTVCLEVBQTBDQyxLQUExQyxFQUF3REMsUUFBeEQsRUFBeUU7SUFDcEY7SUFDQSxJQUFJLEtBQUtqQixLQUFMLENBQVdDLEdBQVgsQ0FBZUYsR0FBZixDQUFKLEVBQXlCO01BQ3JCLEtBQUtDLEtBQUwsQ0FBV0UsR0FBWCxDQUFlSCxHQUFmLEVBQW9CTSxHQUFwQixDQUF3Qk8sTUFBeEI7SUFDSDs7SUFFRCxNQUFNTSxJQUFJLEdBQUcsS0FBSzVCLE9BQUwsQ0FBYTZCLGdCQUFiLENBQThCTCxTQUE5QixFQUF5Q0UsS0FBekMsQ0FBYjtJQUNBLEtBQUtaLFFBQUwsQ0FBY0wsR0FBZCxFQUFtQmdCLFNBQW5CLEVBQThCRyxJQUE5QixFQVBvRixDQU8vQzs7SUFFckNBLElBQUksQ0FBQ0UsSUFBTCxDQUFVQyxrQ0FBQSxDQUFrQkMsT0FBNUIsRUFBcUMsTUFBTSxLQUFLbEIsUUFBTCxDQUFjTCxHQUFkLEVBQW1CZ0IsU0FBbkIsRUFBOEJHLElBQTlCLENBQTNDLEVBQ0tFLElBREwsQ0FDVUMsa0NBQUEsQ0FBa0JFLEtBRDVCLEVBQ21DLE1BQU1OLFFBQVEsRUFEakQ7SUFHQUMsSUFBSSxDQUFDTSxHQUFMO0VBQ0g7O0FBOURzRiJ9