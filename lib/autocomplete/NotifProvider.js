"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _AutocompleteProvider = _interopRequireDefault(require("./AutocompleteProvider"));

var _languageHandler = require("../languageHandler");

var _MatrixClientPeg = require("../MatrixClientPeg");

var _Components = require("./Components");

var _RoomAvatar = _interopRequireDefault(require("../components/views/avatars/RoomAvatar"));

/*
Copyright 2017 New Vector Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const AT_ROOM_REGEX = /@\S*/g;

class NotifProvider extends _AutocompleteProvider.default {
  constructor(room, renderingType) {
    super({
      commandRegex: AT_ROOM_REGEX,
      renderingType
    });
    this.room = room;
  }

  async getCompletions(query, selection) {
    let force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    let limit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;

    const client = _MatrixClientPeg.MatrixClientPeg.get();

    if (!this.room.currentState.mayTriggerNotifOfType('room', client.credentials.userId)) return [];
    const {
      command,
      range
    } = this.getCurrentCommand(query, selection, force);

    if (command?.[0].length > 1 && ['@room', '@channel', '@everyone', '@here'].some(c => c.startsWith(command[0]))) {
      return [{
        completion: '@room',
        completionId: '@room',
        type: "at-room",
        suffix: ' ',
        component: /*#__PURE__*/_react.default.createElement(_Components.PillCompletion, {
          title: "@room",
          description: (0, _languageHandler._t)("Notify the whole room")
        }, /*#__PURE__*/_react.default.createElement(_RoomAvatar.default, {
          width: 24,
          height: 24,
          room: this.room
        })),
        range
      }];
    }

    return [];
  }

  getName() {
    return '❗️ ' + (0, _languageHandler._t)('Room Notification');
  }

  renderCompletions(completions) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Autocomplete_Completion_container_pill mx_Autocomplete_Completion_container_truncate",
      role: "presentation",
      "aria-label": (0, _languageHandler._t)("Notification Autocomplete")
    }, completions);
  }

}

exports.default = NotifProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBVF9ST09NX1JFR0VYIiwiTm90aWZQcm92aWRlciIsIkF1dG9jb21wbGV0ZVByb3ZpZGVyIiwiY29uc3RydWN0b3IiLCJyb29tIiwicmVuZGVyaW5nVHlwZSIsImNvbW1hbmRSZWdleCIsImdldENvbXBsZXRpb25zIiwicXVlcnkiLCJzZWxlY3Rpb24iLCJmb3JjZSIsImxpbWl0IiwiY2xpZW50IiwiTWF0cml4Q2xpZW50UGVnIiwiZ2V0IiwiY3VycmVudFN0YXRlIiwibWF5VHJpZ2dlck5vdGlmT2ZUeXBlIiwiY3JlZGVudGlhbHMiLCJ1c2VySWQiLCJjb21tYW5kIiwicmFuZ2UiLCJnZXRDdXJyZW50Q29tbWFuZCIsImxlbmd0aCIsInNvbWUiLCJjIiwic3RhcnRzV2l0aCIsImNvbXBsZXRpb24iLCJjb21wbGV0aW9uSWQiLCJ0eXBlIiwic3VmZml4IiwiY29tcG9uZW50IiwiX3QiLCJnZXROYW1lIiwicmVuZGVyQ29tcGxldGlvbnMiLCJjb21wbGV0aW9ucyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hdXRvY29tcGxldGUvTm90aWZQcm92aWRlci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE3IE5ldyBWZWN0b3IgTHRkXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFJvb20gfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvbW9kZWxzL3Jvb21cIjtcblxuaW1wb3J0IEF1dG9jb21wbGV0ZVByb3ZpZGVyIGZyb20gJy4vQXV0b2NvbXBsZXRlUHJvdmlkZXInO1xuaW1wb3J0IHsgX3QgfSBmcm9tICcuLi9sYW5ndWFnZUhhbmRsZXInO1xuaW1wb3J0IHsgTWF0cml4Q2xpZW50UGVnIH0gZnJvbSAnLi4vTWF0cml4Q2xpZW50UGVnJztcbmltcG9ydCB7IFBpbGxDb21wbGV0aW9uIH0gZnJvbSAnLi9Db21wb25lbnRzJztcbmltcG9ydCB7IElDb21wbGV0aW9uLCBJU2VsZWN0aW9uUmFuZ2UgfSBmcm9tIFwiLi9BdXRvY29tcGxldGVyXCI7XG5pbXBvcnQgUm9vbUF2YXRhciBmcm9tICcuLi9jb21wb25lbnRzL3ZpZXdzL2F2YXRhcnMvUm9vbUF2YXRhcic7XG5pbXBvcnQgeyBUaW1lbGluZVJlbmRlcmluZ1R5cGUgfSBmcm9tICcuLi9jb250ZXh0cy9Sb29tQ29udGV4dCc7XG5cbmNvbnN0IEFUX1JPT01fUkVHRVggPSAvQFxcUyovZztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTm90aWZQcm92aWRlciBleHRlbmRzIEF1dG9jb21wbGV0ZVByb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgcm9vbTogUm9vbSwgcmVuZGVyaW5nVHlwZT86IFRpbWVsaW5lUmVuZGVyaW5nVHlwZSkge1xuICAgICAgICBzdXBlcih7IGNvbW1hbmRSZWdleDogQVRfUk9PTV9SRUdFWCwgcmVuZGVyaW5nVHlwZSB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRDb21wbGV0aW9ucyhcbiAgICAgICAgcXVlcnk6IHN0cmluZyxcbiAgICAgICAgc2VsZWN0aW9uOiBJU2VsZWN0aW9uUmFuZ2UsXG4gICAgICAgIGZvcmNlID0gZmFsc2UsXG4gICAgICAgIGxpbWl0ID0gLTEsXG4gICAgKTogUHJvbWlzZTxJQ29tcGxldGlvbltdPiB7XG4gICAgICAgIGNvbnN0IGNsaWVudCA9IE1hdHJpeENsaWVudFBlZy5nZXQoKTtcblxuICAgICAgICBpZiAoIXRoaXMucm9vbS5jdXJyZW50U3RhdGUubWF5VHJpZ2dlck5vdGlmT2ZUeXBlKCdyb29tJywgY2xpZW50LmNyZWRlbnRpYWxzLnVzZXJJZCkpIHJldHVybiBbXTtcblxuICAgICAgICBjb25zdCB7IGNvbW1hbmQsIHJhbmdlIH0gPSB0aGlzLmdldEN1cnJlbnRDb21tYW5kKHF1ZXJ5LCBzZWxlY3Rpb24sIGZvcmNlKTtcbiAgICAgICAgaWYgKGNvbW1hbmQ/LlswXS5sZW5ndGggPiAxICYmXG4gICAgICAgICAgICBbJ0Byb29tJywgJ0BjaGFubmVsJywgJ0BldmVyeW9uZScsICdAaGVyZSddLnNvbWUoYyA9PiBjLnN0YXJ0c1dpdGgoY29tbWFuZFswXSkpXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIFt7XG4gICAgICAgICAgICAgICAgY29tcGxldGlvbjogJ0Byb29tJyxcbiAgICAgICAgICAgICAgICBjb21wbGV0aW9uSWQ6ICdAcm9vbScsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhdC1yb29tXCIsXG4gICAgICAgICAgICAgICAgc3VmZml4OiAnICcsXG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiAoXG4gICAgICAgICAgICAgICAgICAgIDxQaWxsQ29tcGxldGlvbiB0aXRsZT1cIkByb29tXCIgZGVzY3JpcHRpb249e190KFwiTm90aWZ5IHRoZSB3aG9sZSByb29tXCIpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxSb29tQXZhdGFyIHdpZHRoPXsyNH0gaGVpZ2h0PXsyNH0gcm9vbT17dGhpcy5yb29tfSAvPlxuICAgICAgICAgICAgICAgICAgICA8L1BpbGxDb21wbGV0aW9uPlxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgcmFuZ2UsXG4gICAgICAgICAgICB9XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgZ2V0TmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICfinZfvuI8gJyArIF90KCdSb29tIE5vdGlmaWNhdGlvbicpO1xuICAgIH1cblxuICAgIHJlbmRlckNvbXBsZXRpb25zKGNvbXBsZXRpb25zOiBSZWFjdC5SZWFjdE5vZGVbXSk6IFJlYWN0LlJlYWN0Tm9kZSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibXhfQXV0b2NvbXBsZXRlX0NvbXBsZXRpb25fY29udGFpbmVyX3BpbGwgbXhfQXV0b2NvbXBsZXRlX0NvbXBsZXRpb25fY29udGFpbmVyX3RydW5jYXRlXCJcbiAgICAgICAgICAgICAgICByb2xlPVwicHJlc2VudGF0aW9uXCJcbiAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPXtfdChcIk5vdGlmaWNhdGlvbiBBdXRvY29tcGxldGVcIil9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgeyBjb21wbGV0aW9ucyB9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQWdCQTs7QUFHQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUF4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBYUEsTUFBTUEsYUFBYSxHQUFHLE9BQXRCOztBQUVlLE1BQU1DLGFBQU4sU0FBNEJDLDZCQUE1QixDQUFpRDtFQUM1REMsV0FBVyxDQUFRQyxJQUFSLEVBQW9CQyxhQUFwQixFQUEyRDtJQUNsRSxNQUFNO01BQUVDLFlBQVksRUFBRU4sYUFBaEI7TUFBK0JLO0lBQS9CLENBQU47SUFEa0UsS0FBbkRELElBQW1ELEdBQW5EQSxJQUFtRDtFQUVyRTs7RUFFbUIsTUFBZEcsY0FBYyxDQUNoQkMsS0FEZ0IsRUFFaEJDLFNBRmdCLEVBS007SUFBQSxJQUZ0QkMsS0FFc0IsdUVBRmQsS0FFYztJQUFBLElBRHRCQyxLQUNzQix1RUFEZCxDQUFDLENBQ2E7O0lBQ3RCLE1BQU1DLE1BQU0sR0FBR0MsZ0NBQUEsQ0FBZ0JDLEdBQWhCLEVBQWY7O0lBRUEsSUFBSSxDQUFDLEtBQUtWLElBQUwsQ0FBVVcsWUFBVixDQUF1QkMscUJBQXZCLENBQTZDLE1BQTdDLEVBQXFESixNQUFNLENBQUNLLFdBQVAsQ0FBbUJDLE1BQXhFLENBQUwsRUFBc0YsT0FBTyxFQUFQO0lBRXRGLE1BQU07TUFBRUMsT0FBRjtNQUFXQztJQUFYLElBQXFCLEtBQUtDLGlCQUFMLENBQXVCYixLQUF2QixFQUE4QkMsU0FBOUIsRUFBeUNDLEtBQXpDLENBQTNCOztJQUNBLElBQUlTLE9BQU8sR0FBRyxDQUFILENBQVAsQ0FBYUcsTUFBYixHQUFzQixDQUF0QixJQUNBLENBQUMsT0FBRCxFQUFVLFVBQVYsRUFBc0IsV0FBdEIsRUFBbUMsT0FBbkMsRUFBNENDLElBQTVDLENBQWlEQyxDQUFDLElBQUlBLENBQUMsQ0FBQ0MsVUFBRixDQUFhTixPQUFPLENBQUMsQ0FBRCxDQUFwQixDQUF0RCxDQURKLEVBRUU7TUFDRSxPQUFPLENBQUM7UUFDSk8sVUFBVSxFQUFFLE9BRFI7UUFFSkMsWUFBWSxFQUFFLE9BRlY7UUFHSkMsSUFBSSxFQUFFLFNBSEY7UUFJSkMsTUFBTSxFQUFFLEdBSko7UUFLSkMsU0FBUyxlQUNMLDZCQUFDLDBCQUFEO1VBQWdCLEtBQUssRUFBQyxPQUF0QjtVQUE4QixXQUFXLEVBQUUsSUFBQUMsbUJBQUEsRUFBRyx1QkFBSDtRQUEzQyxnQkFDSSw2QkFBQyxtQkFBRDtVQUFZLEtBQUssRUFBRSxFQUFuQjtVQUF1QixNQUFNLEVBQUUsRUFBL0I7VUFBbUMsSUFBSSxFQUFFLEtBQUszQjtRQUE5QyxFQURKLENBTkE7UUFVSmdCO01BVkksQ0FBRCxDQUFQO0lBWUg7O0lBQ0QsT0FBTyxFQUFQO0VBQ0g7O0VBRURZLE9BQU8sR0FBRztJQUNOLE9BQU8sUUFBUSxJQUFBRCxtQkFBQSxFQUFHLG1CQUFILENBQWY7RUFDSDs7RUFFREUsaUJBQWlCLENBQUNDLFdBQUQsRUFBa0Q7SUFDL0Qsb0JBQ0k7TUFDSSxTQUFTLEVBQUMseUZBRGQ7TUFFSSxJQUFJLEVBQUMsY0FGVDtNQUdJLGNBQVksSUFBQUgsbUJBQUEsRUFBRywyQkFBSDtJQUhoQixHQUtNRyxXQUxOLENBREo7RUFTSDs7QUFqRDJEIn0=