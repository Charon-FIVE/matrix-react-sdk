"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prepEventContentAsMedia = prepEventContentAsMedia;

/*
 * Copyright 2021 The Matrix.org Foundation C.I.C.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// TODO: These types should be elsewhere.

/**
 * Parses an event content body into a prepared media object. This prepared media object
 * can be used with other functions to manipulate the media.
 * @param {IMediaEventContent} content Unredacted media event content. See interface.
 * @returns {IPreparedMedia} A prepared media object.
 * @throws Throws if the given content cannot be packaged into a prepared media object.
 */
function prepEventContentAsMedia(content) {
  let thumbnail = null;

  if (content?.info?.thumbnail_url) {
    thumbnail = {
      mxc: content.info.thumbnail_url,
      file: content.info.thumbnail_file
    };
  } else if (content?.info?.thumbnail_file?.url) {
    thumbnail = {
      mxc: content.info.thumbnail_file.url,
      file: content.info.thumbnail_file
    };
  }

  if (content?.url) {
    return {
      thumbnail,
      mxc: content.url,
      file: content.file
    };
  } else if (content?.file?.url) {
    return {
      thumbnail,
      mxc: content.file.url,
      file: content.file
    };
  }

  throw new Error("Invalid file provided: cannot determine MXC URI. Has it been redacted?");
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwcmVwRXZlbnRDb250ZW50QXNNZWRpYSIsImNvbnRlbnQiLCJ0aHVtYm5haWwiLCJpbmZvIiwidGh1bWJuYWlsX3VybCIsIm14YyIsImZpbGUiLCJ0aHVtYm5haWxfZmlsZSIsInVybCIsIkVycm9yIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2N1c3RvbWlzYXRpb25zL21vZGVscy9JTWVkaWFFdmVudENvbnRlbnQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDIxIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vLyBUT0RPOiBUaGVzZSB0eXBlcyBzaG91bGQgYmUgZWxzZXdoZXJlLlxuXG5leHBvcnQgaW50ZXJmYWNlIElFbmNyeXB0ZWRGaWxlIHtcbiAgICB1cmw6IHN0cmluZztcbiAgICBrZXk6IHtcbiAgICAgICAgYWxnOiBzdHJpbmc7XG4gICAgICAgIGtleV9vcHM6IHN0cmluZ1tdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuICAgICAgICBrdHk6IHN0cmluZztcbiAgICAgICAgazogc3RyaW5nO1xuICAgICAgICBleHQ6IGJvb2xlYW47XG4gICAgfTtcbiAgICBpdjogc3RyaW5nO1xuICAgIGhhc2hlczoge1thbGc6IHN0cmluZ106IHN0cmluZ307XG4gICAgdjogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElNZWRpYUV2ZW50SW5mbyB7XG4gICAgdGh1bWJuYWlsX3VybD86IHN0cmluZzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcbiAgICB0aHVtYm5haWxfZmlsZT86IElFbmNyeXB0ZWRGaWxlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuICAgIHRodW1ibmFpbF9pbmZvPzogeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuICAgICAgICBtaW1ldHlwZTogc3RyaW5nO1xuICAgICAgICB3PzogbnVtYmVyO1xuICAgICAgICBoPzogbnVtYmVyO1xuICAgICAgICBzaXplPzogbnVtYmVyO1xuICAgIH07XG4gICAgbWltZXR5cGU6IHN0cmluZztcbiAgICB3PzogbnVtYmVyO1xuICAgIGg/OiBudW1iZXI7XG4gICAgc2l6ZT86IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJTWVkaWFFdmVudENvbnRlbnQge1xuICAgIGJvZHk/OiBzdHJpbmc7XG4gICAgZmlsZW5hbWU/OiBzdHJpbmc7IC8vIGBtLmZpbGVgIG9wdGlvbmFsIGZpZWxkXG4gICAgdXJsPzogc3RyaW5nOyAvLyByZXF1aXJlZCBvbiB1bmVuY3J5cHRlZCBtZWRpYVxuICAgIGZpbGU/OiBJRW5jcnlwdGVkRmlsZTsgLy8gcmVxdWlyZWQgZm9yICplbmNyeXB0ZWQqIG1lZGlhXG4gICAgaW5mbz86IElNZWRpYUV2ZW50SW5mbztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUHJlcGFyZWRNZWRpYSBleHRlbmRzIElNZWRpYU9iamVjdCB7XG4gICAgdGh1bWJuYWlsPzogSU1lZGlhT2JqZWN0O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElNZWRpYU9iamVjdCB7XG4gICAgbXhjOiBzdHJpbmc7XG4gICAgZmlsZT86IElFbmNyeXB0ZWRGaWxlO1xufVxuXG4vKipcbiAqIFBhcnNlcyBhbiBldmVudCBjb250ZW50IGJvZHkgaW50byBhIHByZXBhcmVkIG1lZGlhIG9iamVjdC4gVGhpcyBwcmVwYXJlZCBtZWRpYSBvYmplY3RcbiAqIGNhbiBiZSB1c2VkIHdpdGggb3RoZXIgZnVuY3Rpb25zIHRvIG1hbmlwdWxhdGUgdGhlIG1lZGlhLlxuICogQHBhcmFtIHtJTWVkaWFFdmVudENvbnRlbnR9IGNvbnRlbnQgVW5yZWRhY3RlZCBtZWRpYSBldmVudCBjb250ZW50LiBTZWUgaW50ZXJmYWNlLlxuICogQHJldHVybnMge0lQcmVwYXJlZE1lZGlhfSBBIHByZXBhcmVkIG1lZGlhIG9iamVjdC5cbiAqIEB0aHJvd3MgVGhyb3dzIGlmIHRoZSBnaXZlbiBjb250ZW50IGNhbm5vdCBiZSBwYWNrYWdlZCBpbnRvIGEgcHJlcGFyZWQgbWVkaWEgb2JqZWN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJlcEV2ZW50Q29udGVudEFzTWVkaWEoY29udGVudDogSU1lZGlhRXZlbnRDb250ZW50KTogSVByZXBhcmVkTWVkaWEge1xuICAgIGxldCB0aHVtYm5haWw6IElNZWRpYU9iamVjdCA9IG51bGw7XG4gICAgaWYgKGNvbnRlbnQ/LmluZm8/LnRodW1ibmFpbF91cmwpIHtcbiAgICAgICAgdGh1bWJuYWlsID0ge1xuICAgICAgICAgICAgbXhjOiBjb250ZW50LmluZm8udGh1bWJuYWlsX3VybCxcbiAgICAgICAgICAgIGZpbGU6IGNvbnRlbnQuaW5mby50aHVtYm5haWxfZmlsZSxcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGNvbnRlbnQ/LmluZm8/LnRodW1ibmFpbF9maWxlPy51cmwpIHtcbiAgICAgICAgdGh1bWJuYWlsID0ge1xuICAgICAgICAgICAgbXhjOiBjb250ZW50LmluZm8udGh1bWJuYWlsX2ZpbGUudXJsLFxuICAgICAgICAgICAgZmlsZTogY29udGVudC5pbmZvLnRodW1ibmFpbF9maWxlLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGlmIChjb250ZW50Py51cmwpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRodW1ibmFpbCxcbiAgICAgICAgICAgIG14YzogY29udGVudC51cmwsXG4gICAgICAgICAgICBmaWxlOiBjb250ZW50LmZpbGUsXG4gICAgICAgIH07XG4gICAgfSBlbHNlIGlmIChjb250ZW50Py5maWxlPy51cmwpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRodW1ibmFpbCxcbiAgICAgICAgICAgIG14YzogY29udGVudC5maWxlLnVybCxcbiAgICAgICAgICAgIGZpbGU6IGNvbnRlbnQuZmlsZSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGZpbGUgcHJvdmlkZWQ6IGNhbm5vdCBkZXRlcm1pbmUgTVhDIFVSSS4gSGFzIGl0IGJlZW4gcmVkYWN0ZWQ/XCIpO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBZ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0EsdUJBQVQsQ0FBaUNDLE9BQWpDLEVBQThFO0VBQ2pGLElBQUlDLFNBQXVCLEdBQUcsSUFBOUI7O0VBQ0EsSUFBSUQsT0FBTyxFQUFFRSxJQUFULEVBQWVDLGFBQW5CLEVBQWtDO0lBQzlCRixTQUFTLEdBQUc7TUFDUkcsR0FBRyxFQUFFSixPQUFPLENBQUNFLElBQVIsQ0FBYUMsYUFEVjtNQUVSRSxJQUFJLEVBQUVMLE9BQU8sQ0FBQ0UsSUFBUixDQUFhSTtJQUZYLENBQVo7RUFJSCxDQUxELE1BS08sSUFBSU4sT0FBTyxFQUFFRSxJQUFULEVBQWVJLGNBQWYsRUFBK0JDLEdBQW5DLEVBQXdDO0lBQzNDTixTQUFTLEdBQUc7TUFDUkcsR0FBRyxFQUFFSixPQUFPLENBQUNFLElBQVIsQ0FBYUksY0FBYixDQUE0QkMsR0FEekI7TUFFUkYsSUFBSSxFQUFFTCxPQUFPLENBQUNFLElBQVIsQ0FBYUk7SUFGWCxDQUFaO0VBSUg7O0VBRUQsSUFBSU4sT0FBTyxFQUFFTyxHQUFiLEVBQWtCO0lBQ2QsT0FBTztNQUNITixTQURHO01BRUhHLEdBQUcsRUFBRUosT0FBTyxDQUFDTyxHQUZWO01BR0hGLElBQUksRUFBRUwsT0FBTyxDQUFDSztJQUhYLENBQVA7RUFLSCxDQU5ELE1BTU8sSUFBSUwsT0FBTyxFQUFFSyxJQUFULEVBQWVFLEdBQW5CLEVBQXdCO0lBQzNCLE9BQU87TUFDSE4sU0FERztNQUVIRyxHQUFHLEVBQUVKLE9BQU8sQ0FBQ0ssSUFBUixDQUFhRSxHQUZmO01BR0hGLElBQUksRUFBRUwsT0FBTyxDQUFDSztJQUhYLENBQVA7RUFLSDs7RUFFRCxNQUFNLElBQUlHLEtBQUosQ0FBVSx3RUFBVixDQUFOO0FBQ0gifQ==