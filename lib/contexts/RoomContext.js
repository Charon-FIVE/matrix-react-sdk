"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TimelineRenderingType = void 0;

var _react = require("react");

var _Layout = require("../settings/enums/Layout");

/*
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
let TimelineRenderingType;
exports.TimelineRenderingType = TimelineRenderingType;

(function (TimelineRenderingType) {
  TimelineRenderingType["Room"] = "Room";
  TimelineRenderingType["Thread"] = "Thread";
  TimelineRenderingType["ThreadsList"] = "ThreadsList";
  TimelineRenderingType["File"] = "File";
  TimelineRenderingType["Notification"] = "Notification";
  TimelineRenderingType["Search"] = "Search";
  TimelineRenderingType["Pinned"] = "Pinned";
})(TimelineRenderingType || (exports.TimelineRenderingType = TimelineRenderingType = {}));

const RoomContext = /*#__PURE__*/(0, _react.createContext)({
  roomLoading: true,
  peekLoading: false,
  shouldPeek: true,
  membersLoaded: false,
  numUnreadMessages: 0,
  canPeek: false,
  showApps: false,
  isPeeking: false,
  showRightPanel: true,
  joining: false,
  showTopUnreadMessagesBar: false,
  statusBarVisible: false,
  canReact: false,
  canSelfRedact: false,
  canSendMessages: false,
  resizing: false,
  layout: _Layout.Layout.Group,
  lowBandwidth: false,
  alwaysShowTimestamps: false,
  showTwelveHourTimestamps: false,
  readMarkerInViewThresholdMs: 3000,
  readMarkerOutOfViewThresholdMs: 30000,
  showHiddenEvents: false,
  showReadReceipts: true,
  showRedactions: true,
  showJoinLeaves: true,
  showAvatarChanges: true,
  showDisplaynameChanges: true,
  matrixClientIsReady: false,
  showUrlPreview: false,
  timelineRenderingType: TimelineRenderingType.Room,
  threadId: undefined,
  liveTimeline: undefined,
  narrow: false
});
RoomContext.displayName = "RoomContext";
var _default = RoomContext;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUaW1lbGluZVJlbmRlcmluZ1R5cGUiLCJSb29tQ29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJyb29tTG9hZGluZyIsInBlZWtMb2FkaW5nIiwic2hvdWxkUGVlayIsIm1lbWJlcnNMb2FkZWQiLCJudW1VbnJlYWRNZXNzYWdlcyIsImNhblBlZWsiLCJzaG93QXBwcyIsImlzUGVla2luZyIsInNob3dSaWdodFBhbmVsIiwiam9pbmluZyIsInNob3dUb3BVbnJlYWRNZXNzYWdlc0JhciIsInN0YXR1c0JhclZpc2libGUiLCJjYW5SZWFjdCIsImNhblNlbGZSZWRhY3QiLCJjYW5TZW5kTWVzc2FnZXMiLCJyZXNpemluZyIsImxheW91dCIsIkxheW91dCIsIkdyb3VwIiwibG93QmFuZHdpZHRoIiwiYWx3YXlzU2hvd1RpbWVzdGFtcHMiLCJzaG93VHdlbHZlSG91clRpbWVzdGFtcHMiLCJyZWFkTWFya2VySW5WaWV3VGhyZXNob2xkTXMiLCJyZWFkTWFya2VyT3V0T2ZWaWV3VGhyZXNob2xkTXMiLCJzaG93SGlkZGVuRXZlbnRzIiwic2hvd1JlYWRSZWNlaXB0cyIsInNob3dSZWRhY3Rpb25zIiwic2hvd0pvaW5MZWF2ZXMiLCJzaG93QXZhdGFyQ2hhbmdlcyIsInNob3dEaXNwbGF5bmFtZUNoYW5nZXMiLCJtYXRyaXhDbGllbnRJc1JlYWR5Iiwic2hvd1VybFByZXZpZXciLCJ0aW1lbGluZVJlbmRlcmluZ1R5cGUiLCJSb29tIiwidGhyZWFkSWQiLCJ1bmRlZmluZWQiLCJsaXZlVGltZWxpbmUiLCJuYXJyb3ciLCJkaXNwbGF5TmFtZSJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb250ZXh0cy9Sb29tQ29udGV4dC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMTkgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IElSb29tU3RhdGUgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9zdHJ1Y3R1cmVzL1Jvb21WaWV3XCI7XG5pbXBvcnQgeyBMYXlvdXQgfSBmcm9tIFwiLi4vc2V0dGluZ3MvZW51bXMvTGF5b3V0XCI7XG5cbmV4cG9ydCBlbnVtIFRpbWVsaW5lUmVuZGVyaW5nVHlwZSB7XG4gICAgUm9vbSA9IFwiUm9vbVwiLFxuICAgIFRocmVhZCA9IFwiVGhyZWFkXCIsXG4gICAgVGhyZWFkc0xpc3QgPSBcIlRocmVhZHNMaXN0XCIsXG4gICAgRmlsZSA9IFwiRmlsZVwiLFxuICAgIE5vdGlmaWNhdGlvbiA9IFwiTm90aWZpY2F0aW9uXCIsXG4gICAgU2VhcmNoID0gXCJTZWFyY2hcIixcbiAgICBQaW5uZWQgPSBcIlBpbm5lZFwiLFxufVxuXG5jb25zdCBSb29tQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8SVJvb21TdGF0ZT4oe1xuICAgIHJvb21Mb2FkaW5nOiB0cnVlLFxuICAgIHBlZWtMb2FkaW5nOiBmYWxzZSxcbiAgICBzaG91bGRQZWVrOiB0cnVlLFxuICAgIG1lbWJlcnNMb2FkZWQ6IGZhbHNlLFxuICAgIG51bVVucmVhZE1lc3NhZ2VzOiAwLFxuICAgIGNhblBlZWs6IGZhbHNlLFxuICAgIHNob3dBcHBzOiBmYWxzZSxcbiAgICBpc1BlZWtpbmc6IGZhbHNlLFxuICAgIHNob3dSaWdodFBhbmVsOiB0cnVlLFxuICAgIGpvaW5pbmc6IGZhbHNlLFxuICAgIHNob3dUb3BVbnJlYWRNZXNzYWdlc0JhcjogZmFsc2UsXG4gICAgc3RhdHVzQmFyVmlzaWJsZTogZmFsc2UsXG4gICAgY2FuUmVhY3Q6IGZhbHNlLFxuICAgIGNhblNlbGZSZWRhY3Q6IGZhbHNlLFxuICAgIGNhblNlbmRNZXNzYWdlczogZmFsc2UsXG4gICAgcmVzaXppbmc6IGZhbHNlLFxuICAgIGxheW91dDogTGF5b3V0Lkdyb3VwLFxuICAgIGxvd0JhbmR3aWR0aDogZmFsc2UsXG4gICAgYWx3YXlzU2hvd1RpbWVzdGFtcHM6IGZhbHNlLFxuICAgIHNob3dUd2VsdmVIb3VyVGltZXN0YW1wczogZmFsc2UsXG4gICAgcmVhZE1hcmtlckluVmlld1RocmVzaG9sZE1zOiAzMDAwLFxuICAgIHJlYWRNYXJrZXJPdXRPZlZpZXdUaHJlc2hvbGRNczogMzAwMDAsXG4gICAgc2hvd0hpZGRlbkV2ZW50czogZmFsc2UsXG4gICAgc2hvd1JlYWRSZWNlaXB0czogdHJ1ZSxcbiAgICBzaG93UmVkYWN0aW9uczogdHJ1ZSxcbiAgICBzaG93Sm9pbkxlYXZlczogdHJ1ZSxcbiAgICBzaG93QXZhdGFyQ2hhbmdlczogdHJ1ZSxcbiAgICBzaG93RGlzcGxheW5hbWVDaGFuZ2VzOiB0cnVlLFxuICAgIG1hdHJpeENsaWVudElzUmVhZHk6IGZhbHNlLFxuICAgIHNob3dVcmxQcmV2aWV3OiBmYWxzZSxcbiAgICB0aW1lbGluZVJlbmRlcmluZ1R5cGU6IFRpbWVsaW5lUmVuZGVyaW5nVHlwZS5Sb29tLFxuICAgIHRocmVhZElkOiB1bmRlZmluZWQsXG4gICAgbGl2ZVRpbWVsaW5lOiB1bmRlZmluZWQsXG4gICAgbmFycm93OiBmYWxzZSxcbn0pO1xuUm9vbUNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlJvb21Db250ZXh0XCI7XG5leHBvcnQgZGVmYXVsdCBSb29tQ29udGV4dDtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQWdCQTs7QUFHQTs7QUFuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0lBT1lBLHFCOzs7V0FBQUEscUI7RUFBQUEscUI7RUFBQUEscUI7RUFBQUEscUI7RUFBQUEscUI7RUFBQUEscUI7RUFBQUEscUI7RUFBQUEscUI7R0FBQUEscUIscUNBQUFBLHFCOztBQVVaLE1BQU1DLFdBQVcsZ0JBQUcsSUFBQUMsb0JBQUEsRUFBMEI7RUFDMUNDLFdBQVcsRUFBRSxJQUQ2QjtFQUUxQ0MsV0FBVyxFQUFFLEtBRjZCO0VBRzFDQyxVQUFVLEVBQUUsSUFIOEI7RUFJMUNDLGFBQWEsRUFBRSxLQUoyQjtFQUsxQ0MsaUJBQWlCLEVBQUUsQ0FMdUI7RUFNMUNDLE9BQU8sRUFBRSxLQU5pQztFQU8xQ0MsUUFBUSxFQUFFLEtBUGdDO0VBUTFDQyxTQUFTLEVBQUUsS0FSK0I7RUFTMUNDLGNBQWMsRUFBRSxJQVQwQjtFQVUxQ0MsT0FBTyxFQUFFLEtBVmlDO0VBVzFDQyx3QkFBd0IsRUFBRSxLQVhnQjtFQVkxQ0MsZ0JBQWdCLEVBQUUsS0Fad0I7RUFhMUNDLFFBQVEsRUFBRSxLQWJnQztFQWMxQ0MsYUFBYSxFQUFFLEtBZDJCO0VBZTFDQyxlQUFlLEVBQUUsS0FmeUI7RUFnQjFDQyxRQUFRLEVBQUUsS0FoQmdDO0VBaUIxQ0MsTUFBTSxFQUFFQyxjQUFBLENBQU9DLEtBakIyQjtFQWtCMUNDLFlBQVksRUFBRSxLQWxCNEI7RUFtQjFDQyxvQkFBb0IsRUFBRSxLQW5Cb0I7RUFvQjFDQyx3QkFBd0IsRUFBRSxLQXBCZ0I7RUFxQjFDQywyQkFBMkIsRUFBRSxJQXJCYTtFQXNCMUNDLDhCQUE4QixFQUFFLEtBdEJVO0VBdUIxQ0MsZ0JBQWdCLEVBQUUsS0F2QndCO0VBd0IxQ0MsZ0JBQWdCLEVBQUUsSUF4QndCO0VBeUIxQ0MsY0FBYyxFQUFFLElBekIwQjtFQTBCMUNDLGNBQWMsRUFBRSxJQTFCMEI7RUEyQjFDQyxpQkFBaUIsRUFBRSxJQTNCdUI7RUE0QjFDQyxzQkFBc0IsRUFBRSxJQTVCa0I7RUE2QjFDQyxtQkFBbUIsRUFBRSxLQTdCcUI7RUE4QjFDQyxjQUFjLEVBQUUsS0E5QjBCO0VBK0IxQ0MscUJBQXFCLEVBQUVuQyxxQkFBcUIsQ0FBQ29DLElBL0JIO0VBZ0MxQ0MsUUFBUSxFQUFFQyxTQWhDZ0M7RUFpQzFDQyxZQUFZLEVBQUVELFNBakM0QjtFQWtDMUNFLE1BQU0sRUFBRTtBQWxDa0MsQ0FBMUIsQ0FBcEI7QUFvQ0F2QyxXQUFXLENBQUN3QyxXQUFaLEdBQTBCLGFBQTFCO2VBQ2V4QyxXIn0=