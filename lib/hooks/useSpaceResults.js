"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSpaceResults = void 0;

var _react = require("react");

var _matrix = require("matrix-js-sdk/src/matrix");

var _roomHierarchy = require("matrix-js-sdk/src/room-hierarchy");

var _utils = require("matrix-js-sdk/src/utils");

var _MatrixClientPeg = require("../MatrixClientPeg");

/*
Copyright 2022 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const useSpaceResults = (space, query) => {
  const [rooms, setRooms] = (0, _react.useState)([]);
  const [hierarchy, setHierarchy] = (0, _react.useState)();
  const resetHierarchy = (0, _react.useCallback)(() => {
    setHierarchy(space ? new _roomHierarchy.RoomHierarchy(space, 50) : null);
  }, [space]);
  (0, _react.useEffect)(resetHierarchy, [resetHierarchy]);
  (0, _react.useEffect)(() => {
    if (!space || !hierarchy) return; // nothing to load

    let unmounted = false;

    (async () => {
      while (hierarchy?.canLoadMore && !unmounted && space === hierarchy.root) {
        await hierarchy.load();
        if (hierarchy.canLoadMore) hierarchy.load(); // start next load so that the loading attribute is right

        setRooms(hierarchy.rooms);
      }
    })();

    return () => {
      unmounted = true;
    };
  }, [space, hierarchy]);
  const results = (0, _react.useMemo)(() => {
    const trimmedQuery = query.trim();
    const lcQuery = trimmedQuery.toLowerCase();
    const normalizedQuery = (0, _utils.normalize)(trimmedQuery);

    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    return rooms?.filter(r => {
      return r.room_type !== _matrix.RoomType.Space && cli.getRoom(r.room_id)?.getMyMembership() !== "join" && ((0, _utils.normalize)(r.name || "").includes(normalizedQuery) || (r.canonical_alias || "").includes(lcQuery));
    });
  }, [rooms, query]);
  return [results, hierarchy?.loading ?? false];
};

exports.useSpaceResults = useSpaceResults;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1c2VTcGFjZVJlc3VsdHMiLCJzcGFjZSIsInF1ZXJ5Iiwicm9vbXMiLCJzZXRSb29tcyIsInVzZVN0YXRlIiwiaGllcmFyY2h5Iiwic2V0SGllcmFyY2h5IiwicmVzZXRIaWVyYXJjaHkiLCJ1c2VDYWxsYmFjayIsIlJvb21IaWVyYXJjaHkiLCJ1c2VFZmZlY3QiLCJ1bm1vdW50ZWQiLCJjYW5Mb2FkTW9yZSIsInJvb3QiLCJsb2FkIiwicmVzdWx0cyIsInVzZU1lbW8iLCJ0cmltbWVkUXVlcnkiLCJ0cmltIiwibGNRdWVyeSIsInRvTG93ZXJDYXNlIiwibm9ybWFsaXplZFF1ZXJ5Iiwibm9ybWFsaXplIiwiY2xpIiwiTWF0cml4Q2xpZW50UGVnIiwiZ2V0IiwiZmlsdGVyIiwiciIsInJvb21fdHlwZSIsIlJvb21UeXBlIiwiU3BhY2UiLCJnZXRSb29tIiwicm9vbV9pZCIsImdldE15TWVtYmVyc2hpcCIsIm5hbWUiLCJpbmNsdWRlcyIsImNhbm9uaWNhbF9hbGlhcyIsImxvYWRpbmciXSwic291cmNlcyI6WyIuLi8uLi9zcmMvaG9va3MvdXNlU3BhY2VSZXN1bHRzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMiBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBSb29tLCBSb29tVHlwZSB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy9tYXRyaXhcIjtcbmltcG9ydCB7IElIaWVyYXJjaHlSb29tIH0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL0B0eXBlcy9zcGFjZXNcIjtcbmltcG9ydCB7IFJvb21IaWVyYXJjaHkgfSBmcm9tIFwibWF0cml4LWpzLXNkay9zcmMvcm9vbS1oaWVyYXJjaHlcIjtcbmltcG9ydCB7IG5vcm1hbGl6ZSB9IGZyb20gXCJtYXRyaXgtanMtc2RrL3NyYy91dGlsc1wiO1xuXG5pbXBvcnQgeyBNYXRyaXhDbGllbnRQZWcgfSBmcm9tIFwiLi4vTWF0cml4Q2xpZW50UGVnXCI7XG5cbmV4cG9ydCBjb25zdCB1c2VTcGFjZVJlc3VsdHMgPSAoc3BhY2U/OiBSb29tLCBxdWVyeT86IHN0cmluZyk6IFtJSGllcmFyY2h5Um9vbVtdLCBib29sZWFuXSA9PiB7XG4gICAgY29uc3QgW3Jvb21zLCBzZXRSb29tc10gPSB1c2VTdGF0ZTxJSGllcmFyY2h5Um9vbVtdPihbXSk7XG4gICAgY29uc3QgW2hpZXJhcmNoeSwgc2V0SGllcmFyY2h5XSA9IHVzZVN0YXRlPFJvb21IaWVyYXJjaHk+KCk7XG5cbiAgICBjb25zdCByZXNldEhpZXJhcmNoeSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgc2V0SGllcmFyY2h5KHNwYWNlID8gbmV3IFJvb21IaWVyYXJjaHkoc3BhY2UsIDUwKSA6IG51bGwpO1xuICAgIH0sIFtzcGFjZV0pO1xuICAgIHVzZUVmZmVjdChyZXNldEhpZXJhcmNoeSwgW3Jlc2V0SGllcmFyY2h5XSk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIXNwYWNlIHx8ICFoaWVyYXJjaHkpIHJldHVybjsgLy8gbm90aGluZyB0byBsb2FkXG5cbiAgICAgICAgbGV0IHVubW91bnRlZCA9IGZhbHNlO1xuXG4gICAgICAgIChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICB3aGlsZSAoaGllcmFyY2h5Py5jYW5Mb2FkTW9yZSAmJiAhdW5tb3VudGVkICYmIHNwYWNlID09PSBoaWVyYXJjaHkucm9vdCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IGhpZXJhcmNoeS5sb2FkKCk7XG4gICAgICAgICAgICAgICAgaWYgKGhpZXJhcmNoeS5jYW5Mb2FkTW9yZSkgaGllcmFyY2h5LmxvYWQoKTsgLy8gc3RhcnQgbmV4dCBsb2FkIHNvIHRoYXQgdGhlIGxvYWRpbmcgYXR0cmlidXRlIGlzIHJpZ2h0XG4gICAgICAgICAgICAgICAgc2V0Um9vbXMoaGllcmFyY2h5LnJvb21zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkoKTtcblxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgdW5tb3VudGVkID0gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICB9LCBbc3BhY2UsIGhpZXJhcmNoeV0pO1xuXG4gICAgY29uc3QgcmVzdWx0cyA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBjb25zdCB0cmltbWVkUXVlcnkgPSBxdWVyeS50cmltKCk7XG4gICAgICAgIGNvbnN0IGxjUXVlcnkgPSB0cmltbWVkUXVlcnkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFF1ZXJ5ID0gbm9ybWFsaXplKHRyaW1tZWRRdWVyeSk7XG5cbiAgICAgICAgY29uc3QgY2xpID0gTWF0cml4Q2xpZW50UGVnLmdldCgpO1xuICAgICAgICByZXR1cm4gcm9vbXM/LmZpbHRlcihyID0+IHtcbiAgICAgICAgICAgIHJldHVybiByLnJvb21fdHlwZSAhPT0gUm9vbVR5cGUuU3BhY2UgJiZcbiAgICAgICAgICAgICAgICBjbGkuZ2V0Um9vbShyLnJvb21faWQpPy5nZXRNeU1lbWJlcnNoaXAoKSAhPT0gXCJqb2luXCIgJiZcbiAgICAgICAgICAgICAgICAoXG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbGl6ZShyLm5hbWUgfHwgXCJcIikuaW5jbHVkZXMobm9ybWFsaXplZFF1ZXJ5KSB8fFxuICAgICAgICAgICAgICAgICAgICAoci5jYW5vbmljYWxfYWxpYXMgfHwgXCJcIikuaW5jbHVkZXMobGNRdWVyeSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICB9LCBbcm9vbXMsIHF1ZXJ5XSk7XG5cbiAgICByZXR1cm4gW3Jlc3VsdHMsIGhpZXJhcmNoeT8ubG9hZGluZyA/PyBmYWxzZV07XG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBZ0JBOztBQUNBOztBQUVBOztBQUNBOztBQUVBOztBQXRCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFVTyxNQUFNQSxlQUFlLEdBQUcsQ0FBQ0MsS0FBRCxFQUFlQyxLQUFmLEtBQStEO0VBQzFGLE1BQU0sQ0FBQ0MsS0FBRCxFQUFRQyxRQUFSLElBQW9CLElBQUFDLGVBQUEsRUFBMkIsRUFBM0IsQ0FBMUI7RUFDQSxNQUFNLENBQUNDLFNBQUQsRUFBWUMsWUFBWixJQUE0QixJQUFBRixlQUFBLEdBQWxDO0VBRUEsTUFBTUcsY0FBYyxHQUFHLElBQUFDLGtCQUFBLEVBQVksTUFBTTtJQUNyQ0YsWUFBWSxDQUFDTixLQUFLLEdBQUcsSUFBSVMsNEJBQUosQ0FBa0JULEtBQWxCLEVBQXlCLEVBQXpCLENBQUgsR0FBa0MsSUFBeEMsQ0FBWjtFQUNILENBRnNCLEVBRXBCLENBQUNBLEtBQUQsQ0FGb0IsQ0FBdkI7RUFHQSxJQUFBVSxnQkFBQSxFQUFVSCxjQUFWLEVBQTBCLENBQUNBLGNBQUQsQ0FBMUI7RUFFQSxJQUFBRyxnQkFBQSxFQUFVLE1BQU07SUFDWixJQUFJLENBQUNWLEtBQUQsSUFBVSxDQUFDSyxTQUFmLEVBQTBCLE9BRGQsQ0FDc0I7O0lBRWxDLElBQUlNLFNBQVMsR0FBRyxLQUFoQjs7SUFFQSxDQUFDLFlBQVk7TUFDVCxPQUFPTixTQUFTLEVBQUVPLFdBQVgsSUFBMEIsQ0FBQ0QsU0FBM0IsSUFBd0NYLEtBQUssS0FBS0ssU0FBUyxDQUFDUSxJQUFuRSxFQUF5RTtRQUNyRSxNQUFNUixTQUFTLENBQUNTLElBQVYsRUFBTjtRQUNBLElBQUlULFNBQVMsQ0FBQ08sV0FBZCxFQUEyQlAsU0FBUyxDQUFDUyxJQUFWLEdBRjBDLENBRXhCOztRQUM3Q1gsUUFBUSxDQUFDRSxTQUFTLENBQUNILEtBQVgsQ0FBUjtNQUNIO0lBQ0osQ0FORDs7SUFRQSxPQUFPLE1BQU07TUFDVFMsU0FBUyxHQUFHLElBQVo7SUFDSCxDQUZEO0VBR0gsQ0FoQkQsRUFnQkcsQ0FBQ1gsS0FBRCxFQUFRSyxTQUFSLENBaEJIO0VBa0JBLE1BQU1VLE9BQU8sR0FBRyxJQUFBQyxjQUFBLEVBQVEsTUFBTTtJQUMxQixNQUFNQyxZQUFZLEdBQUdoQixLQUFLLENBQUNpQixJQUFOLEVBQXJCO0lBQ0EsTUFBTUMsT0FBTyxHQUFHRixZQUFZLENBQUNHLFdBQWIsRUFBaEI7SUFDQSxNQUFNQyxlQUFlLEdBQUcsSUFBQUMsZ0JBQUEsRUFBVUwsWUFBVixDQUF4Qjs7SUFFQSxNQUFNTSxHQUFHLEdBQUdDLGdDQUFBLENBQWdCQyxHQUFoQixFQUFaOztJQUNBLE9BQU92QixLQUFLLEVBQUV3QixNQUFQLENBQWNDLENBQUMsSUFBSTtNQUN0QixPQUFPQSxDQUFDLENBQUNDLFNBQUYsS0FBZ0JDLGdCQUFBLENBQVNDLEtBQXpCLElBQ0hQLEdBQUcsQ0FBQ1EsT0FBSixDQUFZSixDQUFDLENBQUNLLE9BQWQsR0FBd0JDLGVBQXhCLE9BQThDLE1BRDNDLEtBR0MsSUFBQVgsZ0JBQUEsRUFBVUssQ0FBQyxDQUFDTyxJQUFGLElBQVUsRUFBcEIsRUFBd0JDLFFBQXhCLENBQWlDZCxlQUFqQyxLQUNBLENBQUNNLENBQUMsQ0FBQ1MsZUFBRixJQUFxQixFQUF0QixFQUEwQkQsUUFBMUIsQ0FBbUNoQixPQUFuQyxDQUpELENBQVA7SUFNSCxDQVBNLENBQVA7RUFRSCxDQWRlLEVBY2IsQ0FBQ2pCLEtBQUQsRUFBUUQsS0FBUixDQWRhLENBQWhCO0VBZ0JBLE9BQU8sQ0FBQ2MsT0FBRCxFQUFVVixTQUFTLEVBQUVnQyxPQUFYLElBQXNCLEtBQWhDLENBQVA7QUFDSCxDQTVDTSJ9