"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useProfileInfo = void 0;

var _react = require("react");

var _MatrixClientPeg = require("../MatrixClientPeg");

var _useLatestResult = require("./useLatestResult");

/*
Copyright 2022 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const useProfileInfo = () => {
  const [profile, setProfile] = (0, _react.useState)(null);
  const [loading, setLoading] = (0, _react.useState)(false);
  const [updateQuery, updateResult] = (0, _useLatestResult.useLatestResult)(setProfile);
  const search = (0, _react.useCallback)(async _ref => {
    let {
      query: term
    } = _ref;
    updateQuery(term);

    if (!term?.length || !term.startsWith('@') || !term.includes(':')) {
      setProfile(null);
      return true;
    }

    setLoading(true);

    try {
      const result = await _MatrixClientPeg.MatrixClientPeg.get().getProfileInfo(term);
      updateResult(term, {
        user_id: term,
        avatar_url: result.avatar_url,
        display_name: result.displayname
      });
      return true;
    } catch (e) {
      console.error("Could not fetch profile info for params", {
        term
      }, e);
      updateResult(term, null);
      return false;
    } finally {
      setLoading(false);
    }
  }, [updateQuery, updateResult]);
  return {
    ready: true,
    loading,
    profile,
    search
  };
};

exports.useProfileInfo = useProfileInfo;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1c2VQcm9maWxlSW5mbyIsInByb2ZpbGUiLCJzZXRQcm9maWxlIiwidXNlU3RhdGUiLCJsb2FkaW5nIiwic2V0TG9hZGluZyIsInVwZGF0ZVF1ZXJ5IiwidXBkYXRlUmVzdWx0IiwidXNlTGF0ZXN0UmVzdWx0Iiwic2VhcmNoIiwidXNlQ2FsbGJhY2siLCJxdWVyeSIsInRlcm0iLCJsZW5ndGgiLCJzdGFydHNXaXRoIiwiaW5jbHVkZXMiLCJyZXN1bHQiLCJNYXRyaXhDbGllbnRQZWciLCJnZXQiLCJnZXRQcm9maWxlSW5mbyIsInVzZXJfaWQiLCJhdmF0YXJfdXJsIiwiZGlzcGxheV9uYW1lIiwiZGlzcGxheW5hbWUiLCJlIiwiY29uc29sZSIsImVycm9yIiwicmVhZHkiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvaG9va3MvdXNlUHJvZmlsZUluZm8udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDIyIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IE1hdHJpeENsaWVudFBlZyB9IGZyb20gXCIuLi9NYXRyaXhDbGllbnRQZWdcIjtcbmltcG9ydCB7IHVzZUxhdGVzdFJlc3VsdCB9IGZyb20gXCIuL3VzZUxhdGVzdFJlc3VsdFwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElQcm9maWxlSW5mb09wdHMge1xuICAgIHF1ZXJ5Pzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElQcm9maWxlSW5mbyB7XG4gICAgdXNlcl9pZDogc3RyaW5nO1xuICAgIGF2YXRhcl91cmw/OiBzdHJpbmc7XG4gICAgZGlzcGxheV9uYW1lPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgdXNlUHJvZmlsZUluZm8gPSAoKSA9PiB7XG4gICAgY29uc3QgW3Byb2ZpbGUsIHNldFByb2ZpbGVdID0gdXNlU3RhdGU8SVByb2ZpbGVJbmZvIHwgbnVsbD4obnVsbCk7XG5cbiAgICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgICBjb25zdCBbdXBkYXRlUXVlcnksIHVwZGF0ZVJlc3VsdF0gPSB1c2VMYXRlc3RSZXN1bHQ8c3RyaW5nLCBJUHJvZmlsZUluZm8gfCBudWxsPihzZXRQcm9maWxlKTtcblxuICAgIGNvbnN0IHNlYXJjaCA9IHVzZUNhbGxiYWNrKGFzeW5jICh7IHF1ZXJ5OiB0ZXJtIH06IElQcm9maWxlSW5mb09wdHMpOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICAgICAgdXBkYXRlUXVlcnkodGVybSk7XG4gICAgICAgIGlmICghdGVybT8ubGVuZ3RoIHx8ICF0ZXJtLnN0YXJ0c1dpdGgoJ0AnKSB8fCAhdGVybS5pbmNsdWRlcygnOicpKSB7XG4gICAgICAgICAgICBzZXRQcm9maWxlKG51bGwpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBzZXRMb2FkaW5nKHRydWUpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgTWF0cml4Q2xpZW50UGVnLmdldCgpLmdldFByb2ZpbGVJbmZvKHRlcm0pO1xuICAgICAgICAgICAgdXBkYXRlUmVzdWx0KHRlcm0sIHtcbiAgICAgICAgICAgICAgICB1c2VyX2lkOiB0ZXJtLFxuICAgICAgICAgICAgICAgIGF2YXRhcl91cmw6IHJlc3VsdC5hdmF0YXJfdXJsLFxuICAgICAgICAgICAgICAgIGRpc3BsYXlfbmFtZTogcmVzdWx0LmRpc3BsYXluYW1lLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkNvdWxkIG5vdCBmZXRjaCBwcm9maWxlIGluZm8gZm9yIHBhcmFtc1wiLCB7IHRlcm0gfSwgZSk7XG4gICAgICAgICAgICB1cGRhdGVSZXN1bHQodGVybSwgbnVsbCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH0sIFt1cGRhdGVRdWVyeSwgdXBkYXRlUmVzdWx0XSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICByZWFkeTogdHJ1ZSxcbiAgICAgICAgbG9hZGluZyxcbiAgICAgICAgcHJvZmlsZSxcbiAgICAgICAgc2VhcmNoLFxuICAgIH0gYXMgY29uc3Q7XG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBZ0JBOztBQUVBOztBQUNBOztBQW5CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFpQk8sTUFBTUEsY0FBYyxHQUFHLE1BQU07RUFDaEMsTUFBTSxDQUFDQyxPQUFELEVBQVVDLFVBQVYsSUFBd0IsSUFBQUMsZUFBQSxFQUE4QixJQUE5QixDQUE5QjtFQUVBLE1BQU0sQ0FBQ0MsT0FBRCxFQUFVQyxVQUFWLElBQXdCLElBQUFGLGVBQUEsRUFBUyxLQUFULENBQTlCO0VBRUEsTUFBTSxDQUFDRyxXQUFELEVBQWNDLFlBQWQsSUFBOEIsSUFBQUMsZ0NBQUEsRUFBNkNOLFVBQTdDLENBQXBDO0VBRUEsTUFBTU8sTUFBTSxHQUFHLElBQUFDLGtCQUFBLEVBQVksY0FBK0Q7SUFBQSxJQUF4RDtNQUFFQyxLQUFLLEVBQUVDO0lBQVQsQ0FBd0Q7SUFDdEZOLFdBQVcsQ0FBQ00sSUFBRCxDQUFYOztJQUNBLElBQUksQ0FBQ0EsSUFBSSxFQUFFQyxNQUFQLElBQWlCLENBQUNELElBQUksQ0FBQ0UsVUFBTCxDQUFnQixHQUFoQixDQUFsQixJQUEwQyxDQUFDRixJQUFJLENBQUNHLFFBQUwsQ0FBYyxHQUFkLENBQS9DLEVBQW1FO01BQy9EYixVQUFVLENBQUMsSUFBRCxDQUFWO01BQ0EsT0FBTyxJQUFQO0lBQ0g7O0lBRURHLFVBQVUsQ0FBQyxJQUFELENBQVY7O0lBQ0EsSUFBSTtNQUNBLE1BQU1XLE1BQU0sR0FBRyxNQUFNQyxnQ0FBQSxDQUFnQkMsR0FBaEIsR0FBc0JDLGNBQXRCLENBQXFDUCxJQUFyQyxDQUFyQjtNQUNBTCxZQUFZLENBQUNLLElBQUQsRUFBTztRQUNmUSxPQUFPLEVBQUVSLElBRE07UUFFZlMsVUFBVSxFQUFFTCxNQUFNLENBQUNLLFVBRko7UUFHZkMsWUFBWSxFQUFFTixNQUFNLENBQUNPO01BSE4sQ0FBUCxDQUFaO01BS0EsT0FBTyxJQUFQO0lBQ0gsQ0FSRCxDQVFFLE9BQU9DLENBQVAsRUFBVTtNQUNSQyxPQUFPLENBQUNDLEtBQVIsQ0FBYyx5Q0FBZCxFQUF5RDtRQUFFZDtNQUFGLENBQXpELEVBQW1FWSxDQUFuRTtNQUNBakIsWUFBWSxDQUFDSyxJQUFELEVBQU8sSUFBUCxDQUFaO01BQ0EsT0FBTyxLQUFQO0lBQ0gsQ0FaRCxTQVlVO01BQ05QLFVBQVUsQ0FBQyxLQUFELENBQVY7SUFDSDtFQUNKLENBdkJjLEVBdUJaLENBQUNDLFdBQUQsRUFBY0MsWUFBZCxDQXZCWSxDQUFmO0VBeUJBLE9BQU87SUFDSG9CLEtBQUssRUFBRSxJQURKO0lBRUh2QixPQUZHO0lBR0hILE9BSEc7SUFJSFE7RUFKRyxDQUFQO0FBTUgsQ0F0Q00ifQ==