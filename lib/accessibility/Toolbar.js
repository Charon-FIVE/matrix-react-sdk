"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _RovingTabIndex = require("./RovingTabIndex");

var _KeyBindingsManager = require("../KeyBindingsManager");

var _KeyboardShortcuts = require("./KeyboardShortcuts");

const _excluded = ["children"];

// This component implements the Toolbar design pattern from the WAI-ARIA Authoring Practices guidelines.
// https://www.w3.org/TR/wai-aria-practices-1.1/#toolbar
// All buttons passed in children must use RovingTabIndex to set `onFocus`, `isActive`, `ref`
const Toolbar = _ref => {
  let {
    children
  } = _ref,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  const onKeyDown = ev => {
    const target = ev.target; // Don't interfere with input default keydown behaviour

    if (target.tagName === "INPUT") return;
    let handled = true; // HOME and END are handled by RovingTabIndexProvider

    const action = (0, _KeyBindingsManager.getKeyBindingsManager)().getAccessibilityAction(ev);

    switch (action) {
      case _KeyboardShortcuts.KeyBindingAction.ArrowUp:
      case _KeyboardShortcuts.KeyBindingAction.ArrowDown:
        if (target.hasAttribute('aria-haspopup')) {
          target.click();
        }

        break;

      default:
        handled = false;
    }

    if (handled) {
      ev.preventDefault();
      ev.stopPropagation();
    }
  };

  return /*#__PURE__*/_react.default.createElement(_RovingTabIndex.RovingTabIndexProvider, {
    handleHomeEnd: true,
    handleLeftRight: true,
    onKeyDown: onKeyDown
  }, _ref2 => {
    let {
      onKeyDownHandler
    } = _ref2;
    return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({}, props, {
      onKeyDown: onKeyDownHandler,
      role: "toolbar"
    }), children);
  });
};

var _default = Toolbar;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUb29sYmFyIiwiY2hpbGRyZW4iLCJwcm9wcyIsIm9uS2V5RG93biIsImV2IiwidGFyZ2V0IiwidGFnTmFtZSIsImhhbmRsZWQiLCJhY3Rpb24iLCJnZXRLZXlCaW5kaW5nc01hbmFnZXIiLCJnZXRBY2Nlc3NpYmlsaXR5QWN0aW9uIiwiS2V5QmluZGluZ0FjdGlvbiIsIkFycm93VXAiLCJBcnJvd0Rvd24iLCJoYXNBdHRyaWJ1dGUiLCJjbGljayIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwib25LZXlEb3duSGFuZGxlciJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hY2Nlc3NpYmlsaXR5L1Rvb2xiYXIudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAyMCBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHsgUm92aW5nVGFiSW5kZXhQcm92aWRlciB9IGZyb20gXCIuL1JvdmluZ1RhYkluZGV4XCI7XG5pbXBvcnQgeyBnZXRLZXlCaW5kaW5nc01hbmFnZXIgfSBmcm9tIFwiLi4vS2V5QmluZGluZ3NNYW5hZ2VyXCI7XG5pbXBvcnQgeyBLZXlCaW5kaW5nQWN0aW9uIH0gZnJvbSBcIi4vS2V5Ym9hcmRTaG9ydGN1dHNcIjtcblxuaW50ZXJmYWNlIElQcm9wcyBleHRlbmRzIE9taXQ8UmVhY3QuSFRNTFByb3BzPEhUTUxEaXZFbGVtZW50PiwgXCJvbktleURvd25cIj4ge1xufVxuXG4vLyBUaGlzIGNvbXBvbmVudCBpbXBsZW1lbnRzIHRoZSBUb29sYmFyIGRlc2lnbiBwYXR0ZXJuIGZyb20gdGhlIFdBSS1BUklBIEF1dGhvcmluZyBQcmFjdGljZXMgZ3VpZGVsaW5lcy5cbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS1wcmFjdGljZXMtMS4xLyN0b29sYmFyXG4vLyBBbGwgYnV0dG9ucyBwYXNzZWQgaW4gY2hpbGRyZW4gbXVzdCB1c2UgUm92aW5nVGFiSW5kZXggdG8gc2V0IGBvbkZvY3VzYCwgYGlzQWN0aXZlYCwgYHJlZmBcbmNvbnN0IFRvb2xiYXI6IFJlYWN0LkZDPElQcm9wcz4gPSAoeyBjaGlsZHJlbiwgLi4ucHJvcHMgfSkgPT4ge1xuICAgIGNvbnN0IG9uS2V5RG93biA9IChldjogUmVhY3QuS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBldi50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICAgIC8vIERvbid0IGludGVyZmVyZSB3aXRoIGlucHV0IGRlZmF1bHQga2V5ZG93biBiZWhhdmlvdXJcbiAgICAgICAgaWYgKHRhcmdldC50YWdOYW1lID09PSBcIklOUFVUXCIpIHJldHVybjtcblxuICAgICAgICBsZXQgaGFuZGxlZCA9IHRydWU7XG5cbiAgICAgICAgLy8gSE9NRSBhbmQgRU5EIGFyZSBoYW5kbGVkIGJ5IFJvdmluZ1RhYkluZGV4UHJvdmlkZXJcbiAgICAgICAgY29uc3QgYWN0aW9uID0gZ2V0S2V5QmluZGluZ3NNYW5hZ2VyKCkuZ2V0QWNjZXNzaWJpbGl0eUFjdGlvbihldik7XG4gICAgICAgIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgICAgICAgICBjYXNlIEtleUJpbmRpbmdBY3Rpb24uQXJyb3dVcDpcbiAgICAgICAgICAgIGNhc2UgS2V5QmluZGluZ0FjdGlvbi5BcnJvd0Rvd246XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldC5oYXNBdHRyaWJ1dGUoJ2FyaWEtaGFzcG9wdXAnKSkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQuY2xpY2soKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgaGFuZGxlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhbmRsZWQpIHtcbiAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gPFJvdmluZ1RhYkluZGV4UHJvdmlkZXIgaGFuZGxlSG9tZUVuZCBoYW5kbGVMZWZ0UmlnaHQgb25LZXlEb3duPXtvbktleURvd259PlxuICAgICAgICB7ICh7IG9uS2V5RG93bkhhbmRsZXIgfSkgPT4gPGRpdiB7Li4ucHJvcHN9IG9uS2V5RG93bj17b25LZXlEb3duSGFuZGxlcn0gcm9sZT1cInRvb2xiYXJcIj5cbiAgICAgICAgICAgIHsgY2hpbGRyZW4gfVxuICAgICAgICA8L2Rpdj4gfVxuICAgIDwvUm92aW5nVGFiSW5kZXhQcm92aWRlcj47XG59O1xuXG5leHBvcnQgZGVmYXVsdCBUb29sYmFyO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBZ0JBOztBQUVBOztBQUNBOztBQUNBOzs7O0FBS0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUEsT0FBeUIsR0FBRyxRQUE0QjtFQUFBLElBQTNCO0lBQUVDO0VBQUYsQ0FBMkI7RUFBQSxJQUFaQyxLQUFZOztFQUMxRCxNQUFNQyxTQUFTLEdBQUlDLEVBQUQsSUFBNkI7SUFDM0MsTUFBTUMsTUFBTSxHQUFHRCxFQUFFLENBQUNDLE1BQWxCLENBRDJDLENBRTNDOztJQUNBLElBQUlBLE1BQU0sQ0FBQ0MsT0FBUCxLQUFtQixPQUF2QixFQUFnQztJQUVoQyxJQUFJQyxPQUFPLEdBQUcsSUFBZCxDQUwyQyxDQU8zQzs7SUFDQSxNQUFNQyxNQUFNLEdBQUcsSUFBQUMseUNBQUEsSUFBd0JDLHNCQUF4QixDQUErQ04sRUFBL0MsQ0FBZjs7SUFDQSxRQUFRSSxNQUFSO01BQ0ksS0FBS0csbUNBQUEsQ0FBaUJDLE9BQXRCO01BQ0EsS0FBS0QsbUNBQUEsQ0FBaUJFLFNBQXRCO1FBQ0ksSUFBSVIsTUFBTSxDQUFDUyxZQUFQLENBQW9CLGVBQXBCLENBQUosRUFBMEM7VUFDdENULE1BQU0sQ0FBQ1UsS0FBUDtRQUNIOztRQUNEOztNQUVKO1FBQ0lSLE9BQU8sR0FBRyxLQUFWO0lBVFI7O0lBWUEsSUFBSUEsT0FBSixFQUFhO01BQ1RILEVBQUUsQ0FBQ1ksY0FBSDtNQUNBWixFQUFFLENBQUNhLGVBQUg7SUFDSDtFQUNKLENBekJEOztFQTJCQSxvQkFBTyw2QkFBQyxzQ0FBRDtJQUF3QixhQUFhLE1BQXJDO0lBQXNDLGVBQWUsTUFBckQ7SUFBc0QsU0FBUyxFQUFFZDtFQUFqRSxHQUNEO0lBQUEsSUFBQztNQUFFZTtJQUFGLENBQUQ7SUFBQSxvQkFBMEIsK0RBQVNoQixLQUFUO01BQWdCLFNBQVMsRUFBRWdCLGdCQUEzQjtNQUE2QyxJQUFJLEVBQUM7SUFBbEQsSUFDdEJqQixRQURzQixDQUExQjtFQUFBLENBREMsQ0FBUDtBQUtILENBakNEOztlQW1DZUQsTyJ9