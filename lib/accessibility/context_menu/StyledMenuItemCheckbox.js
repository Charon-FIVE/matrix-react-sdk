"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StyledMenuItemCheckbox = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _RovingTabIndex = require("../RovingTabIndex");

var _StyledCheckbox = _interopRequireDefault(require("../../components/views/elements/StyledCheckbox"));

var _KeyboardShortcuts = require("../KeyboardShortcuts");

var _KeyBindingsManager = require("../../KeyBindingsManager");

const _excluded = ["children", "label", "onChange", "onClose"];

// Semantic component for representing a styled role=menuitemcheckbox
const StyledMenuItemCheckbox = _ref => {
  let {
    children,
    label,
    onChange,
    onClose
  } = _ref,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  const [onFocus, isActive, ref] = (0, _RovingTabIndex.useRovingTabIndex)();

  const onKeyDown = e => {
    let handled = true;
    const action = (0, _KeyBindingsManager.getKeyBindingsManager)().getAccessibilityAction(e);

    switch (action) {
      case _KeyboardShortcuts.KeyBindingAction.Space:
        onChange();
        break;

      case _KeyboardShortcuts.KeyBindingAction.Enter:
        onChange(); // Implements https://www.w3.org/TR/wai-aria-practices/#keyboard-interaction-12

        onClose();
        break;

      default:
        handled = false;
    }

    if (handled) {
      e.stopPropagation();
      e.preventDefault();
    }
  };

  const onKeyUp = e => {
    const action = (0, _KeyBindingsManager.getKeyBindingsManager)().getAccessibilityAction(e);

    switch (action) {
      case _KeyboardShortcuts.KeyBindingAction.Space:
      case _KeyboardShortcuts.KeyBindingAction.Enter:
        // prevent the input default handler as we handle it on keydown to match
        // https://www.w3.org/TR/wai-aria-practices/examples/menubar/menubar-2/menubar-2.html
        e.stopPropagation();
        e.preventDefault();
        break;
    }
  };

  return /*#__PURE__*/_react.default.createElement(_StyledCheckbox.default, (0, _extends2.default)({}, props, {
    role: "menuitemcheckbox",
    "aria-label": label,
    onChange: onChange,
    onKeyDown: onKeyDown,
    onKeyUp: onKeyUp,
    onFocus: onFocus,
    inputRef: ref,
    tabIndex: isActive ? 0 : -1
  }), children);
};

exports.StyledMenuItemCheckbox = StyledMenuItemCheckbox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTdHlsZWRNZW51SXRlbUNoZWNrYm94IiwiY2hpbGRyZW4iLCJsYWJlbCIsIm9uQ2hhbmdlIiwib25DbG9zZSIsInByb3BzIiwib25Gb2N1cyIsImlzQWN0aXZlIiwicmVmIiwidXNlUm92aW5nVGFiSW5kZXgiLCJvbktleURvd24iLCJlIiwiaGFuZGxlZCIsImFjdGlvbiIsImdldEtleUJpbmRpbmdzTWFuYWdlciIsImdldEFjY2Vzc2liaWxpdHlBY3Rpb24iLCJLZXlCaW5kaW5nQWN0aW9uIiwiU3BhY2UiLCJFbnRlciIsInN0b3BQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0Iiwib25LZXlVcCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hY2Nlc3NpYmlsaXR5L2NvbnRleHRfbWVudS9TdHlsZWRNZW51SXRlbUNoZWNrYm94LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMTUsIDIwMTYgT3Blbk1hcmtldCBMdGRcbkNvcHlyaWdodCAyMDE4IE5ldyBWZWN0b3IgTHRkXG5Db3B5cmlnaHQgMjAxOSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHsgdXNlUm92aW5nVGFiSW5kZXggfSBmcm9tIFwiLi4vUm92aW5nVGFiSW5kZXhcIjtcbmltcG9ydCBTdHlsZWRDaGVja2JveCBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy92aWV3cy9lbGVtZW50cy9TdHlsZWRDaGVja2JveFwiO1xuaW1wb3J0IHsgS2V5QmluZGluZ0FjdGlvbiB9IGZyb20gXCIuLi9LZXlib2FyZFNob3J0Y3V0c1wiO1xuaW1wb3J0IHsgZ2V0S2V5QmluZGluZ3NNYW5hZ2VyIH0gZnJvbSBcIi4uLy4uL0tleUJpbmRpbmdzTWFuYWdlclwiO1xuXG5pbnRlcmZhY2UgSVByb3BzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50UHJvcHM8dHlwZW9mIFN0eWxlZENoZWNrYm94PiB7XG4gICAgbGFiZWw/OiBzdHJpbmc7XG4gICAgb25DaGFuZ2UoKTsgLy8gd2UgaGFuZGxlIGtleXVwL2Rvd24gb3Vyc2VsdmVzIHNvIGxvc2UgdGhlIENoYW5nZUV2ZW50XG4gICAgb25DbG9zZSgpOiB2b2lkOyAvLyBnZXRzIGNhbGxlZCBhZnRlciBvbkNoYW5nZSBvbiBLZXlCaW5kaW5nQWN0aW9uLkFjdGl2YXRlU2VsZWN0ZWRCdXR0b25cbn1cblxuLy8gU2VtYW50aWMgY29tcG9uZW50IGZvciByZXByZXNlbnRpbmcgYSBzdHlsZWQgcm9sZT1tZW51aXRlbWNoZWNrYm94XG5leHBvcnQgY29uc3QgU3R5bGVkTWVudUl0ZW1DaGVja2JveDogUmVhY3QuRkM8SVByb3BzPiA9ICh7IGNoaWxkcmVuLCBsYWJlbCwgb25DaGFuZ2UsIG9uQ2xvc2UsIC4uLnByb3BzIH0pID0+IHtcbiAgICBjb25zdCBbb25Gb2N1cywgaXNBY3RpdmUsIHJlZl0gPSB1c2VSb3ZpbmdUYWJJbmRleDxIVE1MSW5wdXRFbGVtZW50PigpO1xuXG4gICAgY29uc3Qgb25LZXlEb3duID0gKGU6IFJlYWN0LktleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgICAgbGV0IGhhbmRsZWQgPSB0cnVlO1xuICAgICAgICBjb25zdCBhY3Rpb24gPSBnZXRLZXlCaW5kaW5nc01hbmFnZXIoKS5nZXRBY2Nlc3NpYmlsaXR5QWN0aW9uKGUpO1xuXG4gICAgICAgIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgICAgICAgICBjYXNlIEtleUJpbmRpbmdBY3Rpb24uU3BhY2U6XG4gICAgICAgICAgICAgICAgb25DaGFuZ2UoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgS2V5QmluZGluZ0FjdGlvbi5FbnRlcjpcbiAgICAgICAgICAgICAgICBvbkNoYW5nZSgpO1xuICAgICAgICAgICAgICAgIC8vIEltcGxlbWVudHMgaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLXByYWN0aWNlcy8ja2V5Ym9hcmQtaW50ZXJhY3Rpb24tMTJcbiAgICAgICAgICAgICAgICBvbkNsb3NlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGhhbmRsZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYW5kbGVkKSB7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBvbktleVVwID0gKGU6IFJlYWN0LktleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgYWN0aW9uID0gZ2V0S2V5QmluZGluZ3NNYW5hZ2VyKCkuZ2V0QWNjZXNzaWJpbGl0eUFjdGlvbihlKTtcbiAgICAgICAgc3dpdGNoIChhY3Rpb24pIHtcbiAgICAgICAgICAgIGNhc2UgS2V5QmluZGluZ0FjdGlvbi5TcGFjZTpcbiAgICAgICAgICAgIGNhc2UgS2V5QmluZGluZ0FjdGlvbi5FbnRlcjpcbiAgICAgICAgICAgICAgICAvLyBwcmV2ZW50IHRoZSBpbnB1dCBkZWZhdWx0IGhhbmRsZXIgYXMgd2UgaGFuZGxlIGl0IG9uIGtleWRvd24gdG8gbWF0Y2hcbiAgICAgICAgICAgICAgICAvLyBodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtcHJhY3RpY2VzL2V4YW1wbGVzL21lbnViYXIvbWVudWJhci0yL21lbnViYXItMi5odG1sXG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiAoXG4gICAgICAgIDxTdHlsZWRDaGVja2JveFxuICAgICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICAgICAgcm9sZT1cIm1lbnVpdGVtY2hlY2tib3hcIlxuICAgICAgICAgICAgYXJpYS1sYWJlbD17bGFiZWx9XG4gICAgICAgICAgICBvbkNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgICAgICBvbktleURvd249e29uS2V5RG93bn1cbiAgICAgICAgICAgIG9uS2V5VXA9e29uS2V5VXB9XG4gICAgICAgICAgICBvbkZvY3VzPXtvbkZvY3VzfVxuICAgICAgICAgICAgaW5wdXRSZWY9e3JlZn1cbiAgICAgICAgICAgIHRhYkluZGV4PXtpc0FjdGl2ZSA/IDAgOiAtMX1cbiAgICAgICAgPlxuICAgICAgICAgICAgeyBjaGlsZHJlbiB9XG4gICAgICAgIDwvU3R5bGVkQ2hlY2tib3g+XG4gICAgKTtcbn07XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFrQkE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFRQTtBQUNPLE1BQU1BLHNCQUF3QyxHQUFHLFFBQXNEO0VBQUEsSUFBckQ7SUFBRUMsUUFBRjtJQUFZQyxLQUFaO0lBQW1CQyxRQUFuQjtJQUE2QkM7RUFBN0IsQ0FBcUQ7RUFBQSxJQUFaQyxLQUFZO0VBQzFHLE1BQU0sQ0FBQ0MsT0FBRCxFQUFVQyxRQUFWLEVBQW9CQyxHQUFwQixJQUEyQixJQUFBQyxpQ0FBQSxHQUFqQzs7RUFFQSxNQUFNQyxTQUFTLEdBQUlDLENBQUQsSUFBNEI7SUFDMUMsSUFBSUMsT0FBTyxHQUFHLElBQWQ7SUFDQSxNQUFNQyxNQUFNLEdBQUcsSUFBQUMseUNBQUEsSUFBd0JDLHNCQUF4QixDQUErQ0osQ0FBL0MsQ0FBZjs7SUFFQSxRQUFRRSxNQUFSO01BQ0ksS0FBS0csbUNBQUEsQ0FBaUJDLEtBQXRCO1FBQ0lkLFFBQVE7UUFDUjs7TUFDSixLQUFLYSxtQ0FBQSxDQUFpQkUsS0FBdEI7UUFDSWYsUUFBUSxHQURaLENBRUk7O1FBQ0FDLE9BQU87UUFDUDs7TUFDSjtRQUNJUSxPQUFPLEdBQUcsS0FBVjtJQVZSOztJQWFBLElBQUlBLE9BQUosRUFBYTtNQUNURCxDQUFDLENBQUNRLGVBQUY7TUFDQVIsQ0FBQyxDQUFDUyxjQUFGO0lBQ0g7RUFDSixDQXJCRDs7RUFzQkEsTUFBTUMsT0FBTyxHQUFJVixDQUFELElBQTRCO0lBQ3hDLE1BQU1FLE1BQU0sR0FBRyxJQUFBQyx5Q0FBQSxJQUF3QkMsc0JBQXhCLENBQStDSixDQUEvQyxDQUFmOztJQUNBLFFBQVFFLE1BQVI7TUFDSSxLQUFLRyxtQ0FBQSxDQUFpQkMsS0FBdEI7TUFDQSxLQUFLRCxtQ0FBQSxDQUFpQkUsS0FBdEI7UUFDSTtRQUNBO1FBQ0FQLENBQUMsQ0FBQ1EsZUFBRjtRQUNBUixDQUFDLENBQUNTLGNBQUY7UUFDQTtJQVBSO0VBU0gsQ0FYRDs7RUFZQSxvQkFDSSw2QkFBQyx1QkFBRCw2QkFDUWYsS0FEUjtJQUVJLElBQUksRUFBQyxrQkFGVDtJQUdJLGNBQVlILEtBSGhCO0lBSUksUUFBUSxFQUFFQyxRQUpkO0lBS0ksU0FBUyxFQUFFTyxTQUxmO0lBTUksT0FBTyxFQUFFVyxPQU5iO0lBT0ksT0FBTyxFQUFFZixPQVBiO0lBUUksUUFBUSxFQUFFRSxHQVJkO0lBU0ksUUFBUSxFQUFFRCxRQUFRLEdBQUcsQ0FBSCxHQUFPLENBQUM7RUFUOUIsSUFXTU4sUUFYTixDQURKO0FBZUgsQ0FwRE0ifQ==