"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RovingAccessibleButton = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _AccessibleButton = _interopRequireDefault(require("../../components/views/elements/AccessibleButton"));

var _RovingTabIndex = require("../RovingTabIndex");

const _excluded = ["inputRef", "onFocus"];

// Wrapper to allow use of useRovingTabIndex for simple AccessibleButtons outside of React Functional Components.
const RovingAccessibleButton = _ref => {
  let {
    inputRef,
    onFocus
  } = _ref,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  const [onFocusInternal, isActive, ref] = (0, _RovingTabIndex.useRovingTabIndex)(inputRef);
  return /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, (0, _extends2.default)({}, props, {
    onFocus: event => {
      onFocusInternal();
      onFocus?.(event);
    },
    inputRef: ref,
    tabIndex: isActive ? 0 : -1
  }));
};

exports.RovingAccessibleButton = RovingAccessibleButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSb3ZpbmdBY2Nlc3NpYmxlQnV0dG9uIiwiaW5wdXRSZWYiLCJvbkZvY3VzIiwicHJvcHMiLCJvbkZvY3VzSW50ZXJuYWwiLCJpc0FjdGl2ZSIsInJlZiIsInVzZVJvdmluZ1RhYkluZGV4IiwiZXZlbnQiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYWNjZXNzaWJpbGl0eS9yb3ZpbmcvUm92aW5nQWNjZXNzaWJsZUJ1dHRvbi50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDIwIFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgQWNjZXNzaWJsZUJ1dHRvbiBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy92aWV3cy9lbGVtZW50cy9BY2Nlc3NpYmxlQnV0dG9uXCI7XG5pbXBvcnQgeyB1c2VSb3ZpbmdUYWJJbmRleCB9IGZyb20gXCIuLi9Sb3ZpbmdUYWJJbmRleFwiO1xuaW1wb3J0IHsgUmVmIH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuaW50ZXJmYWNlIElQcm9wcyBleHRlbmRzIE9taXQ8UmVhY3QuQ29tcG9uZW50UHJvcHM8dHlwZW9mIEFjY2Vzc2libGVCdXR0b24+LCBcImlucHV0UmVmXCIgfCBcInRhYkluZGV4XCI+IHtcbiAgICBpbnB1dFJlZj86IFJlZjtcbn1cblxuLy8gV3JhcHBlciB0byBhbGxvdyB1c2Ugb2YgdXNlUm92aW5nVGFiSW5kZXggZm9yIHNpbXBsZSBBY2Nlc3NpYmxlQnV0dG9ucyBvdXRzaWRlIG9mIFJlYWN0IEZ1bmN0aW9uYWwgQ29tcG9uZW50cy5cbmV4cG9ydCBjb25zdCBSb3ZpbmdBY2Nlc3NpYmxlQnV0dG9uOiBSZWFjdC5GQzxJUHJvcHM+ID0gKHsgaW5wdXRSZWYsIG9uRm9jdXMsIC4uLnByb3BzIH0pID0+IHtcbiAgICBjb25zdCBbb25Gb2N1c0ludGVybmFsLCBpc0FjdGl2ZSwgcmVmXSA9IHVzZVJvdmluZ1RhYkluZGV4KGlucHV0UmVmKTtcbiAgICByZXR1cm4gPEFjY2Vzc2libGVCdXR0b25cbiAgICAgICAgey4uLnByb3BzfVxuICAgICAgICBvbkZvY3VzPXtldmVudCA9PiB7XG4gICAgICAgICAgICBvbkZvY3VzSW50ZXJuYWwoKTtcbiAgICAgICAgICAgIG9uRm9jdXM/LihldmVudCk7XG4gICAgICAgIH19XG4gICAgICAgIGlucHV0UmVmPXtyZWZ9XG4gICAgICAgIHRhYkluZGV4PXtpc0FjdGl2ZSA/IDAgOiAtMX1cbiAgICAvPjtcbn07XG5cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQWdCQTs7QUFFQTs7QUFDQTs7OztBQU9BO0FBQ08sTUFBTUEsc0JBQXdDLEdBQUcsUUFBcUM7RUFBQSxJQUFwQztJQUFFQyxRQUFGO0lBQVlDO0VBQVosQ0FBb0M7RUFBQSxJQUFaQyxLQUFZO0VBQ3pGLE1BQU0sQ0FBQ0MsZUFBRCxFQUFrQkMsUUFBbEIsRUFBNEJDLEdBQTVCLElBQW1DLElBQUFDLGlDQUFBLEVBQWtCTixRQUFsQixDQUF6QztFQUNBLG9CQUFPLDZCQUFDLHlCQUFELDZCQUNDRSxLQUREO0lBRUgsT0FBTyxFQUFFSyxLQUFLLElBQUk7TUFDZEosZUFBZTtNQUNmRixPQUFPLEdBQUdNLEtBQUgsQ0FBUDtJQUNILENBTEU7SUFNSCxRQUFRLEVBQUVGLEdBTlA7SUFPSCxRQUFRLEVBQUVELFFBQVEsR0FBRyxDQUFILEdBQU8sQ0FBQztFQVB2QixHQUFQO0FBU0gsQ0FYTSJ9